<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="sonrai Staging Flows " enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.3.1.23. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;112&quot;, &quot;Google Chrome&quot;;v=&quot;112&quot;, &quot;Not:A-Brand&quot;;v=&quot;99&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;macOS&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">app.s.sonraisecurity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">login.s.sonraisecurity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value">stage11733927.s.sonraisecurity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_4" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_4</stringProp>
            <stringProp name="Argument.value">jaeger-collector-web.s.sonraisecurity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_5" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_5</stringProp>
            <stringProp name="Argument.value">front-end-collector-web.s.sonraisecurity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token" elementType="Argument">
            <stringProp name="Argument.name">Token</stringProp>
            <stringProp name="Argument.value">Bearer eyJraWQiOiI5MGNmYmNmNy1iNzA2LTQ3ZTktYjcwZi0wYzAyMWQ1YTdjN2UiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiJzdGFnZS1ncmFwaHFsLXNlcnZlci5zLnNvbnJhaXNlY3VyaXR5LmNvbSIsInN1YiI6InNybjpzdGFnZTExNzMzOTI3OjpTb25yYWlVc2VyVG9rZW4vMzg0OWRiN2ItYjJhYy00ODNjLWFiZjgtZWMxZmI1MGMwYWY2IiwiaHR0cHM6Ly9zb25yYWlzZWN1cml0eS5jb20vb3JncyI6WyJzdGFnZTExNzMzOTI3Il0sInNjb3BlIjoicmVhZDpkYXRhIHJlYWQ6cGxhdGZvcm0gYXJyaXZhbDp1cGxvYWQiLCJpc3MiOiJTb25yYWkiLCJodHRwczovL3NvbnJhaXNlY3VyaXR5LmNvbS9vcmciOiJzdGFnZTExNzMzOTI3IiwiZXhwIjoxNjg2NDI4NzcyLCJpYXQiOjE2ODM4MzY3NzIsImh0dHBzOi8vc29ucmFpc2VjdXJpdHkuY29tL2VudiI6InN0YWdlIiwiaHR0cHM6Ly9zb25yYWlzZWN1cml0eS5jb20vYXBpLXRva2VuIjoidjEuMCJ9.hHQb2ChuoSYM0RRjvCeVfpRa2UUlpstsjnT2rod6j3Gjuwqee7aIL1YjTktBcPRkKYLx4HMr25_yLS6KxL7zs17OyoYaTDTCp4hgW2kMsE86FaXT6oDuGGE_5rfn3RR-KW8xvNQdoXx0TEyfsWo3_cuL3D41u2ye36JXUAQoeO3AvgVSAMnBQHiBNAyDMJDgJnxSSGaGdzGBrzbvKTj80OiNTu-dOZfuN4cyJVJoVCx11GI2SNMP-UmahOpWDOCkqDSDwuXxgHxZDRpYXBYwScEV_PrFxakuPUNUFJEIrZWVoZvEaXgXRa1spkbWjYQ90A3XeOdfAWnhsDIg4c1gIg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GraphQL Operations" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T01_licensing" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;licensing&quot;,&quot;variables&quot;:{&quot;ComputeFilters&quot;:{&quot;type&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;EC2&quot;,&quot;GCPVMInstance&quot;,&quot;VirtualMachine&quot;,&quot;OCIInstance&quot;]},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;AccountFilters&quot;:{&quot;type&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;AWSAccount&quot;,&quot;GCPProject&quot;,&quot;AzureTenant&quot;]},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;SubscriptionFilters&quot;:{&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;OCI_dynamicgroups&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;OCIDynamicGroup&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;OCI_Users&quot;:{&quot;type&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;OCIUser&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;AWS_RolesFilters&quot;:{&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;GCP_ServiceAccountsFilters&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;GCPServiceAccount&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;Azure_ServicePrincipalsFilters&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;ServicePrincipal&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;active&quot;:{&quot;value&quot;:true},&quot;metadata&quot;:{&quot;op&quot;:&quot;NOT_CONTAINS&quot;,&quot;value&quot;:&quot;servicePrincipal.appOwnerOrganizationId:f8cdef31-a31e-4b4a-93e4-5f571e91255a&quot;},&quot;or&quot;:[{&quot;hasAttached&quot;:{&quot;count&quot;:{&quot;op&quot;:&quot;GT&quot;,&quot;value&quot;:0}}},{&quot;isMemberOf&quot;:{&quot;items&quot;:{&quot;hasAttached&quot;:{&quot;count&quot;:{&quot;op&quot;:&quot;GT&quot;,&quot;value&quot;:0}}}}}]}},&quot;query&quot;:&quot;query licensing($Azure_ServicePrincipalsFilters: UserFilter, $GCP_ServiceAccountsFilters: UserFilter, $AWS_RolesFilters: RoleFilter, $OCI_Users: UserFilter, $OCI_dynamicgroups: IdentityreferenceFilter, $AccountFilters: AccountFilter, $ComputeFilters: ComputeFilter, $SubscriptionFilters: SubscriptionFilter) {\n  Azure_ServicePrincipals: Users(where: $Azure_ServicePrincipalsFilters) {\n    count\n    __typename\n  }\n  GCP_ServiceAccounts: Users(where: $GCP_ServiceAccountsFilters) {\n    count\n    __typename\n  }\n  AWS_Roles: Roles(where: $AWS_RolesFilters) {\n    count\n    __typename\n  }\n  OCI_Users: Users(where: $OCI_Users) {\n    count\n    __typename\n  }\n  OCI_dynamicgroups: IdentityReferences(where: $OCI_dynamicgroups) {\n    count\n    __typename\n  }\n  Accounts: Accounts(where: $AccountFilters) {\n    group {\n      key {\n        cloudType\n        __typename\n      }\n      count\n      __typename\n    }\n    total: count\n    __typename\n  }\n  Subscriptions(where: $SubscriptionFilters) {\n    total: count\n    __typename\n  }\n  Compute: Compute(where: $ComputeFilters) {\n    group {\n      key {\n        type\n        cloudType\n        __typename\n      }\n      count\n      __typename\n    }\n    total: count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:04b3-488b-aa26-de4100f2cef4/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">licensing</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;,&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;,&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;,&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;,&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;,&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;,&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;cloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:52b7-40a7-bde2-d9c68acad21b/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;cloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;,&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;,&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;,&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;,&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;,&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a17d-4e0d-8e61-8970fa6eb6b0/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;,&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;,&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;,&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:797d-41f7-a227-0f8492a379fa/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T05_InsightsFindingsTrends" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;InsightsFindingsTrends&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T15:29:08.680Z&quot;,&quot;2023-04-30T15:29:08.672Z&quot;]},&quot;cloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}},&quot;granularityRates&quot;:&quot;DAY&quot;,&quot;granularityTotals&quot;:&quot;DAY&quot;},&quot;query&quot;:&quot;query InsightsFindingsTrends($filters: TicketTrendsFilter, $granularityRates: TicketTrendGranularity!, $granularityTotals: TicketTrendGranularity!) {\n  Rates: TicketTrends(\n    where: $filters\n    type: {type: DAILY_RATES}\n    granularity: {granularity: $granularityRates}\n  ) {\n    items(includeRisk: true) {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n  Totals: TicketTrendsV2(\n    granularity: {granularity: $granularityTotals}\n    where: $filters\n    type: {type: DAILY_TOTALS}\n  ) {\n    items(includeRisk: true) {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1fb9-4051-83bc-ed832d4f456a/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">InsightsFindingsTrends</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T06_getIdentityInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getIdentityInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getIdentityInsights($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardSrn\n      standardFamilySrn\n      severityCategory\n      standardFamily {\n        name\n        __typename\n      }\n      resourceType\n      ticketKey\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:17a0-48c2-b9ef-6a3fded48249/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getIdentityInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T07_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;,&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;,&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;,&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;,&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;,&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;,&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;,&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;,&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;,&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;,&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;,&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;,&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;,&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;,&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;,&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]},&quot;cloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a328-4b7b-b268-b1c6db7b26b6/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T08_getDataProtectionInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDataProtectionInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;,&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;,&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;,&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getDataProtectionInsights($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardSrn\n      standardFamilySrn\n      standardFamily {\n        name\n        __typename\n      }\n      resourceType\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      ticketKey\n      severityCategory\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f6c9-49b4-b3a4-80df7d39d949/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDataProtectionInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T09_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;,&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;,&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;,&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;,&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;,&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;,&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;,&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;,&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;,&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]},&quot;cloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5e6f-4604-a897-cbedc10dfe4c/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T10_getNetworkInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNetworkInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getNetworkInsights($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardSrn\n      standardFamilySrn\n      severityCategory\n      standardFamily {\n        name\n        __typename\n      }\n      resourceType\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      ticketKey\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:beed-47ce-ba25-5d00bb72c09e/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getNetworkInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T11_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;,&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;,&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;,&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;,&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;,&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;,&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;,&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;,&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;,&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]},&quot;cloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:86fa-4700-a897-f6d0e362e4d7/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T12_getFundamentalInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFundamentalInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getFundamentalInsights($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardSrn\n      standardFamilySrn\n      standardFamily {\n        name\n        __typename\n      }\n      resourceType\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      ticketKey\n      severityCategory\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:aaba-4693-a148-615e4dc5fc93/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFundamentalInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T13_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;,&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;,&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;,&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;,&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;,&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;,&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;,&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;,&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;,&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;,&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;,&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;,&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]},&quot;cloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7a25-4fb4-9f35-e2a1bb35281b/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T14_vulnerabilitiesByPublishedDate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilitiesByPublishedDate&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;resourceCloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query vulnerabilitiesByPublishedDate($filters: SecurityFindingFilter) {\n  SecurityFindingsPublished(\n    where: $filters\n    groupBy: [findingPublishedDate]\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{findingPublishedDate: DESC}]) {\n      count\n      findingRiskSeverity\n      findingPublishedDate\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a2e5-4339-a763-620be84998a8/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilitiesByPublishedDate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T15_vulnerabilities_by_time" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_time&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;observedAt&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-01T00:00:00.000Z&quot;,&quot;2023-05-01T00:00:00.000Z&quot;]},&quot;resourceCloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query vulnerabilities_by_time($filters: SecurityFindingFilter) {\n  SecurityFindings(\n    view: raw\n    groupBy: [observedAt, findingRiskSeverity]\n    where: $filters\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{observedAt: DESC}, {findingRiskSeverity: DESC}]) {\n      count @uniq(field: \&quot;findingId\&quot;)\n      findingRiskSeverity\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:deef-4c2c-977b-a8429a487889/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_time</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T16_top5Vulnerabilities" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;top5Vulnerabilities&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;observedAt&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-01T00:00:00.000Z&quot;,&quot;2023-05-01T00:00:00.000Z&quot;]},&quot;resourceCloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query top5Vulnerabilities($filters: SecurityFindingFilter) {\n  SecurityFindings(where: $filters, groupBy: [findingId]) {\n    items(limit: 5, orderBy: [{findingRiskIndex: DESC}, {findingId: DESC}]) {\n      count\n      findingId\n      resourceSrn\n      riskIndex\n      riskSeverity\n      findingScore\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c3d7-4eed-9364-b07489611de6/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">top5Vulnerabilities</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T17_top5ResourceAtRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;top5ResourcesAtRisk&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;observedAt&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-01T00:00:00.000Z&quot;,&quot;2023-05-01T00:00:00.000Z&quot;]},&quot;resourceCloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;query&quot;:&quot;query top5ResourcesAtRisk($filters: SecurityFindingFilter) {\n  SecurityFindings(where: $filters, groupBy: resourceSrn) {\n    items(limit: 5, orderBy: [{riskIndex: DESC}, {resourceSrn: DESC}]) {\n      resourceAccount\n      resourceAccountName\n      resourceName\n      resourceSrn\n      resourceCloud\n      riskSeverity\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1b34-4cd8-a182-4c4d170e7891/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">top5ResourcesAtRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T18_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/9576a064-65ef-45d6-858e-b0b766ba7099&quot;,&quot;srn:supersonrai::StandardFamily/6da88d66-6fda-44a4-a2ca-e29dbc10ee1b&quot;,&quot;srn:supersonrai::StandardFamily/342ee2b0-6a5f-4aba-9a33-d3d18a16d3cf&quot;,&quot;srn:supersonrai::StandardFamily/76642506-7c0c-4a36-81a2-ffd1697fbd0b&quot;,&quot;srn:supersonrai::StandardFamily/839bad50-b61e-4edc-a903-10db46121553&quot;,&quot;srn:supersonrai::StandardFamily/582927d9-ac98-4477-b1f0-c88e766712fd&quot;,&quot;srn:supersonrai::StandardFamily/784d4859-5373-4e35-a5fa-d54489310417&quot;,&quot;srn:supersonrai::StandardFamily/889cdfd6-c56e-473a-b209-ff51ded92451&quot;,&quot;srn:supersonrai::StandardFamily/2f4b38c8-7411-48f9-8eb1-1a806401bbad&quot;,&quot;srn:supersonrai::StandardFamily/c4440b74-8c34-4e3d-8398-02a091092e59&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/9576a064-65ef-45d6-858e-b0b766ba7099&quot;,&quot;srn:supersonrai::StandardFamily/6da88d66-6fda-44a4-a2ca-e29dbc10ee1b&quot;,&quot;srn:supersonrai::StandardFamily/342ee2b0-6a5f-4aba-9a33-d3d18a16d3cf&quot;,&quot;srn:supersonrai::StandardFamily/76642506-7c0c-4a36-81a2-ffd1697fbd0b&quot;,&quot;srn:supersonrai::StandardFamily/839bad50-b61e-4edc-a903-10db46121553&quot;,&quot;srn:supersonrai::StandardFamily/582927d9-ac98-4477-b1f0-c88e766712fd&quot;,&quot;srn:supersonrai::StandardFamily/784d4859-5373-4e35-a5fa-d54489310417&quot;,&quot;srn:supersonrai::StandardFamily/889cdfd6-c56e-473a-b209-ff51ded92451&quot;,&quot;srn:supersonrai::StandardFamily/2f4b38c8-7411-48f9-8eb1-1a806401bbad&quot;,&quot;srn:supersonrai::StandardFamily/c4440b74-8c34-4e3d-8398-02a091092e59&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/9576a064-65ef-45d6-858e-b0b766ba7099&quot;,&quot;srn:supersonrai::StandardFamily/6da88d66-6fda-44a4-a2ca-e29dbc10ee1b&quot;,&quot;srn:supersonrai::StandardFamily/342ee2b0-6a5f-4aba-9a33-d3d18a16d3cf&quot;,&quot;srn:supersonrai::StandardFamily/76642506-7c0c-4a36-81a2-ffd1697fbd0b&quot;,&quot;srn:supersonrai::StandardFamily/839bad50-b61e-4edc-a903-10db46121553&quot;,&quot;srn:supersonrai::StandardFamily/582927d9-ac98-4477-b1f0-c88e766712fd&quot;,&quot;srn:supersonrai::StandardFamily/784d4859-5373-4e35-a5fa-d54489310417&quot;,&quot;srn:supersonrai::StandardFamily/889cdfd6-c56e-473a-b209-ff51ded92451&quot;,&quot;srn:supersonrai::StandardFamily/2f4b38c8-7411-48f9-8eb1-1a806401bbad&quot;,&quot;srn:supersonrai::StandardFamily/c4440b74-8c34-4e3d-8398-02a091092e59&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-31T00:00:00.000Z&quot;,&quot;2023-04-30T00:00:00.000Z&quot;]},&quot;cloud&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:04b4-4b19-9291-b9be00ab4d0c/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CloudImpacted_AzureFilteration_T19_getActiveThreat" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getActiveThreat&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::Standard/40a087c8-319c-4756-bcda-4f9d11d046d3&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]}}},&quot;query&quot;:&quot;query getActiveThreat($filters: TicketRollupFilter!) {\n  TicketRollups(where: $filters, includeRollup: {standardSrn: true, status: true}) {\n    count\n    items(includeRisk: true) {\n      count\n      riskScoreNumeric\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:67bb-4451-9001-b583829045e7/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getActiveThreat</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_CloudImpacted_AzureFilteration_Exposedlogs_T01_findingsByResourceTotalCount" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findingsByResourceTotalCount&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;account&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/2f2bcadc-bbad-4d44-b1ea-7cd9540b5e6a&quot;]}}},&quot;query&quot;:&quot;query findingsByResourceTotalCount($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, swimlaneSrn: true, status: true}\n  ) {\n    count(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:beeb-4ca8-9731-d448616e54c8/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">findingsByResourceTotalCount</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_CloudImpacted_AzureFilteration_Exposedlogs_T02_findingsByResource" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findingsByResource&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;account&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/2f2bcadc-bbad-4d44-b1ea-7cd9540b5e6a&quot;]}},&quot;offset&quot;:0,&quot;limit&quot;:1000,&quot;orderBy&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;DESC&quot;}}]},&quot;query&quot;:&quot;query findingsByResource($filters: TicketRollupFilter!, $orderBy: [TicketRollupOrder], $offset: Long, $limit: Long) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, swimlaneSrn: true, status: true}\n  ) {\n    items(includeRisk: true, orderBy: $orderBy, limit: $limit, offset: $offset) {\n      resourceSRN\n      resourceName\n      resourceType\n      resourceTypeFriendlyName\n      account\n      riskScoreDescription\n      riskArray\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7002-4d88-be8e-8c5060a6ac09/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">findingsByResource</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_CloudImpacted_AzureFilteration_Exposedlogs_SelectRecord_T01_getResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getResourceDetails&quot;,&quot;variables&quot;:{&quot;resourceSrn&quot;:&quot;srn:azure:Microsoft.Storage::1bd233b2-c77b-4210-8821-6d698724bb61/DataContainer//subscriptions/054b5bea-1385-48ef-90b6-d87d231d7c33/resourcegroups/vh-resourcegroup/providers/microsoft.storage/storageaccounts/vhstorageaccount2/storagecontainers/vh-big-container&quot;},&quot;query&quot;:&quot;query getResourceDetails($resourceSrn: String!) {\n  Resources(where: {srn: {op: EQ, value: $resourceSrn}}) {\n    items {\n      srn\n      account\n      name\n      createdDate\n      tagSet\n      label\n      resourceId\n      region\n      metadata\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:faf9-41a1-88cd-6d7cac5337ad/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_CloudImpacted_AzureFilteration_Exposedlogs_SelectRecord_T02_getFindingsTotalCount" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFindingsTotalCount&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/2f2bcadc-bbad-4d44-b1ea-7cd9540b5e6a&quot;]},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:azure:Microsoft.Storage::1bd233b2-c77b-4210-8821-6d698724bb61/DataContainer//subscriptions/054b5bea-1385-48ef-90b6-d87d231d7c33/resourcegroups/vh-resourcegroup/providers/microsoft.storage/storageaccounts/vhstorageaccount2/storagecontainers/vh-big-container&quot;}}},&quot;query&quot;:&quot;query getFindingsTotalCount($filters: TicketsFilter!) {\n  Tickets(where: $filters) {\n    globalCount(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:65af-4fb8-95c3-e285acf393e2/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFindingsTotalCount</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_CloudImpacted_AzureFilteration_Exposedlogs_SelectRecord_T03_getVuln" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVuln&quot;,&quot;variables&quot;:{&quot;findingId&quot;:&quot;srn:azure:Microsoft.Storage::1bd233b2-c77b-4210-8821-6d698724bb61/DataContainer//subscriptions/054b5bea-1385-48ef-90b6-d87d231d7c33/resourcegroups/vh-resourcegroup/providers/microsoft.storage/storageaccounts/vhstorageaccount2/storagecontainers/vh-big-container&quot;},&quot;query&quot;:&quot;query getVuln($findingId: String!) {\n  SecurityFindings(\n    where: {findingId: {op: EQ, value: $findingId}}\n    groupBy: [findingId]\n  ) {\n    items {\n      findingId\n      findingVersion\n      findingFixedVersion\n      findingPublishedDate\n      resourceSrn\n      resourceName\n      findingScore\n      observedAt\n      findingDescription\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c34e-4926-b381-6c4c53394829/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getVuln</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_CloudImpacted_AzureFilteration_Exposedlogs_SelectRecord_T04_getFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFindings&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;cloudType&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;azure&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/2f2bcadc-bbad-4d44-b1ea-7cd9540b5e6a&quot;]},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:azure:Microsoft.Storage::1bd233b2-c77b-4210-8821-6d698724bb61/DataContainer//subscriptions/054b5bea-1385-48ef-90b6-d87d231d7c33/resourcegroups/vh-resourcegroup/providers/microsoft.storage/storageaccounts/vhstorageaccount2/storagecontainers/vh-big-container&quot;}},&quot;offset&quot;:0,&quot;limit&quot;:5,&quot;orderBy&quot;:[{&quot;severityNumeric&quot;:{&quot;order&quot;:&quot;DESC&quot;}}]},&quot;query&quot;:&quot;query getFindings($filters: TicketsFilter!, $offset: Long, $limit: Long, $orderBy: [TicketOrder]) {\n  Tickets(where: $filters) {\n    items(limit: $limit, offset: $offset, orderBy: $orderBy, includeRisk: true) {\n      title\n      templatedTitle\n      ticketKey\n      severityCategory\n      lastSeen\n      srn\n      resourceName\n      resourceSRN\n      resourceType\n      resourceTypeFriendlyName\n      account\n      isOperationalized\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f35e-4f2e-9e08-b9da6d029b1d/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_CloudImpacted_AzureFilteration_Exposedlogs_Findings_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/9bcde41e-d42a-4aab-a951-3a22f9771ff0&quot;,&quot;includeRisk&quot;:true},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9a09-48a7-830e-3f439ddb37b2/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_CloudImpacted_AzureFilteration_Exposedlogs_Findings_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/9bcde41e-d42a-4aab-a951-3a22f9771ff0&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:26fe-4cae-9bb5-0dccdc643c99/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_CloudImpacted_AzureFilteration_Exposedlogs_Findings_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/9bcde41e-d42a-4aab-a951-3a22f9771ff0&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3260-4eca-8a06-909df0814fc3/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_CloudImpacted_AzureFilteration_Exposedlogs_Findings_T04_fetchChangeDetectionOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchChangeDetectionOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchChangeDetectionOptions {\n  data: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n  identity: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:28e9-46c9-a446-9fce0805384e/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchChangeDetectionOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_CloudImpacted_AzureFilteration_Exposedlogs_Findings_T05_resourceSummary" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourceSummary&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:azure:Microsoft.Storage::1bd233b2-c77b-4210-8821-6d698724bb61/DataContainer//subscriptions/054b5bea-1385-48ef-90b6-d87d231d7c33/resourcegroups/vh-resourcegroup/providers/microsoft.storage/storageaccounts/vhstorageaccount2/storagecontainers/vh-big-container&quot;},&quot;query&quot;:&quot;query resourceSummary($resourceSRN: String) {\n  Entities(where: {srn: {value: $resourceSRN}}) {\n    items {\n      srn\n      label\n      __typename\n      ... on Resource {\n        name\n        friendlyName\n        resourceId\n        swimlaneSRNs\n        importance\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:19da-431a-9695-a005f5583845/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourceSummary</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_CloudImpacted_AzureFilteration_Exposedlogs_Findings_T06_resourcelookup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcelookup&quot;,&quot;variables&quot;:{&quot;resourceSrns&quot;:[],&quot;limit&quot;:0},&quot;query&quot;:&quot;query resourcelookup($resourceSrns: [String]!, $limit: Int!) {\n  Resources(where: {srn: {op: IN_LIST, values: $resourceSrns}}) {\n    items(limit: $limit) {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6d16-4fb0-8df9-625242a3d123/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcelookup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_CloudImpacted_AzureFilteration_Exposedlogs_Findings_T07_fetchRelatedTicketAndFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTicketAndFindings&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:azure:Microsoft.Storage::1bd233b2-c77b-4210-8821-6d698724bb61/DataContainer//subscriptions/054b5bea-1385-48ef-90b6-d87d231d7c33/resourcegroups/vh-resourcegroup/providers/microsoft.storage/storageaccounts/vhstorageaccount2/storagecontainers/vh-big-container&quot;,&quot;findingsFilter&quot;:{&quot;or&quot;:[{&quot;resourceSrn&quot;:{&quot;value&quot;:&quot;srn:azure:Microsoft.Storage::1bd233b2-c77b-4210-8821-6d698724bb61/DataContainer//subscriptions/054b5bea-1385-48ef-90b6-d87d231d7c33/resourcegroups/vh-resourcegroup/providers/microsoft.storage/storageaccounts/vhstorageaccount2/storagecontainers/vh-big-container&quot;}}]}},&quot;query&quot;:&quot;query fetchRelatedTicketAndFindings($resourceSRN: String!, $findingsFilter: SecurityFindingFilter!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  findings: SecurityFindings(\n    where: $findingsFilter\n    orderBy: {field: findingSeverity, order: DESC}\n    groupBy: [findingId]\n  ) {\n    items(limit: 5) {\n      findingId\n      findingCategory\n      findingDescription\n      findingScore\n      findingSeverity\n      findingPublishedDate\n      findingType\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment RelatedTicketItem on Ticket {\n  srn\n  title\n  templatedTitle\n  status\n  severityNumeric\n  severityCategory\n  lastModified\n  lastSeen\n  firstSeen\n  createdBy\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:60cf-42d5-8d9a-a7c1a2fe7754/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTicketAndFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_CloudImpacted_AzureFilteration_SelectDataTicket_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/17ec1a4f-1c4f-469d-8961-27895674db1c&quot;,&quot;includeRisk&quot;:false},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b5f9-4faa-a32c-710e38db0fe0/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_CloudImpacted_AzureFilteration_SelectDataTicket_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/17ec1a4f-1c4f-469d-8961-27895674db1c&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6305-4e77-873b-d22b431442a0/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_CloudImpacted_AzureFilteration_SelectDataTicket_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/17ec1a4f-1c4f-469d-8961-27895674db1c&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a235-4fb6-ad18-b3ab513df6ba/t:adb36e3e/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_TopInsights_T01_findingsByResourceTotalCount" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findingsByResourceTotalCount&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;account&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;}}},&quot;query&quot;:&quot;query findingsByResourceTotalCount($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, swimlaneSrn: true, status: true}\n  ) {\n    count(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">fefbf9230c6751481f037b687cd04c1b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7865-478a-9aca-b780ae4bf993/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">68abaa27a878c0de</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">fefbf9230c6751481f037b687cd04c1b-68abaa27a878c0de-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">findingsByResourceTotalCount</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_TopInsights_T02_findingByResource" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;findingsByResource&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;account&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;}},&quot;offset&quot;:0,&quot;limit&quot;:1000,&quot;orderBy&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;DESC&quot;}}]},&quot;query&quot;:&quot;query findingsByResource($filters: TicketRollupFilter!, $orderBy: [TicketRollupOrder], $offset: Long, $limit: Long) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, swimlaneSrn: true, status: true}\n  ) {\n    items(includeRisk: true, orderBy: $orderBy, limit: $limit, offset: $offset) {\n      resourceSRN\n      resourceName\n      resourceType\n      resourceTypeFriendlyName\n      account\n      riskScoreDescription\n      riskArray\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b1b3346dfafce9a4d74496888cdaf927</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:22ec-409b-84e3-58a7201d4377/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">320c2a6d20894b98</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b1b3346dfafce9a4d74496888cdaf927-320c2a6d20894b98-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">findingsByResource</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_TopInsights_SelectAnyRecordInResource_T01_getResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getResourceDetails&quot;,&quot;variables&quot;:{&quot;resourceSrn&quot;:&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;},&quot;query&quot;:&quot;query getResourceDetails($resourceSrn: String!) {\n  Resources(where: {srn: {op: EQ, value: $resourceSrn}}) {\n    items {\n      srn\n      account\n      name\n      createdDate\n      tagSet\n      label\n      resourceId\n      region\n      metadata\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7d0835bb0c680f3134072687b94a0d80</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7f63-41fd-8c44-a8d649fe3ece/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e5e17638dd7c7c5c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7d0835bb0c680f3134072687b94a0d80-e5e17638dd7c7c5c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_TopInsights_SelectAnyRecordInResource_T02_getFindingsTotalCount" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFindingsTotalCount&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;}}},&quot;query&quot;:&quot;query getFindingsTotalCount($filters: TicketsFilter!) {\n  Tickets(where: $filters) {\n    globalCount(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">dd9dc1712b2d3eaa46b31169dfaada0b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f9c7-405d-a2f0-6d997e6377ba/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">49f6d3d02c2f093d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">dd9dc1712b2d3eaa46b31169dfaada0b-49f6d3d02c2f093d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFindingsTotalCount</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_TopInsights_SelectAnyRecordInResource_T03_getVuln" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getVuln&quot;,&quot;variables&quot;:{&quot;findingId&quot;:&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;},&quot;query&quot;:&quot;query getVuln($findingId: String!) {\n  SecurityFindings(\n    where: {findingId: {op: EQ, value: $findingId}}\n    groupBy: [findingId]\n  ) {\n    items {\n      findingId\n      findingVersion\n      findingFixedVersion\n      findingPublishedDate\n      resourceSrn\n      resourceName\n      findingScore\n      observedAt\n      findingDescription\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b263bcba46407ee79ba80ba2990bd6ee</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:dace-4ad3-b921-b0c6a50487ed/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2ad8e8bd4ba54f55</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b263bcba46407ee79ba80ba2990bd6ee-2ad8e8bd4ba54f55-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getVuln</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_TopInsights_SelectAnyRecordInResource_T04_getFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFindings&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;}},&quot;offset&quot;:0,&quot;limit&quot;:5,&quot;orderBy&quot;:[{&quot;severityNumeric&quot;:{&quot;order&quot;:&quot;DESC&quot;}}]},&quot;query&quot;:&quot;query getFindings($filters: TicketsFilter!, $offset: Long, $limit: Long, $orderBy: [TicketOrder]) {\n  Tickets(where: $filters) {\n    items(limit: $limit, offset: $offset, orderBy: $orderBy, includeRisk: true) {\n      title\n      templatedTitle\n      ticketKey\n      severityCategory\n      lastSeen\n      srn\n      resourceName\n      resourceSRN\n      resourceType\n      resourceTypeFriendlyName\n      account\n      isOperationalized\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">839e94672c24a825019309d637c1924b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b1dd-4441-8008-1d38360c43a3/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5fc091070ec762e3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">839e94672c24a825019309d637c1924b-5fc091070ec762e3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TopInsights_SelectAnyRecordInResource_findings_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/efe666f9-123f-43c2-bce2-be7a920edc14&quot;,&quot;includeRisk&quot;:true},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3193ad5d96b6ee4eddf1c23a7be3a8c7</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7389-461a-8440-6f5466aca184/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f42b205e944f11e3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3193ad5d96b6ee4eddf1c23a7be3a8c7-f42b205e944f11e3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TopInsights_SelectAnyRecordInResource_findings_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/efe666f9-123f-43c2-bce2-be7a920edc14&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e25dc1bcfa33910b1ee9a3c1105a856a</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ed2d-4cc1-a72e-f33ef1b2591d/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">163ca5139d9c40af</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e25dc1bcfa33910b1ee9a3c1105a856a-163ca5139d9c40af-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TopInsights_SelectAnyRecordInResource_findings_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/efe666f9-123f-43c2-bce2-be7a920edc14&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e142cc5d9075b5424b6eb634cf844f0c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7d53-464a-afdf-959e2fa02a62/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9d5865455720ba82</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e142cc5d9075b5424b6eb634cf844f0c-9d5865455720ba82-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TopInsights_SelectAnyRecordInResource_findings_T04_fetchChnageDetectionOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchChangeDetectionOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchChangeDetectionOptions {\n  data: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n  identity: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">4b93479aaa41e6f668d172de12ce150d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:44ec-44cd-a01c-2cd2de868732/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">073b3c6fe115f693</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">4b93479aaa41e6f668d172de12ce150d-073b3c6fe115f693-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchChangeDetectionOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TopInsights_SelectAnyRecordInResource_findings_T05_resourceSummary" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourceSummary&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;},&quot;query&quot;:&quot;query resourceSummary($resourceSRN: String) {\n  Entities(where: {srn: {value: $resourceSRN}}) {\n    items {\n      srn\n      label\n      __typename\n      ... on Resource {\n        name\n        friendlyName\n        resourceId\n        swimlaneSRNs\n        importance\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f9ce0cd3574e3ff43a76c73c4d3a949f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d8d4-4981-9c36-c134b9afd7c5/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">671ef552a069638d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f9ce0cd3574e3ff43a76c73c4d3a949f-671ef552a069638d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourceSummary</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TopInsights_SelectAnyRecordInResource_findings_T06_resourcelookup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcelookup&quot;,&quot;variables&quot;:{&quot;resourceSrns&quot;:[],&quot;limit&quot;:0},&quot;query&quot;:&quot;query resourcelookup($resourceSrns: [String]!, $limit: Int!) {\n  Resources(where: {srn: {op: IN_LIST, values: $resourceSrns}}) {\n    items(limit: $limit) {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">439106614de99ef3a979a9ab4716ccb2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a8cc-45ef-abc8-2dbe57a73f8b/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">25bc312117141fec</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">439106614de99ef3a979a9ab4716ccb2-25bc312117141fec-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcelookup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TopInsights_SelectAnyRecordInResource_findings_T07_fetchRelatedTicketAndFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTicketAndFindings&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;,&quot;findingsFilter&quot;:{&quot;or&quot;:[{&quot;resourceSrn&quot;:{&quot;value&quot;:&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;}}]}},&quot;query&quot;:&quot;query fetchRelatedTicketAndFindings($resourceSRN: String!, $findingsFilter: SecurityFindingFilter!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  findings: SecurityFindings(\n    where: $findingsFilter\n    orderBy: {field: findingSeverity, order: DESC}\n    groupBy: [findingId]\n  ) {\n    items(limit: 5) {\n      findingId\n      findingCategory\n      findingDescription\n      findingScore\n      findingSeverity\n      findingPublishedDate\n      findingType\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment RelatedTicketItem on Ticket {\n  srn\n  title\n  templatedTitle\n  status\n  severityNumeric\n  severityCategory\n  lastModified\n  lastSeen\n  firstSeen\n  createdBy\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e63f39e2f2e6fcc8da7734f6f49450be</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ddf5-4437-a08e-195ba2bc26c0/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">920e53aff09aba00</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e63f39e2f2e6fcc8da7734f6f49450be-920e53aff09aba00-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTicketAndFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TopInsights_SelectAnyRecordInResource_findings_T08_getTicketEvidenceResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketEvidenceResourceDetails&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;,&quot;srn:aws:sqs::380873608913/PolicyVersion/InlinePolicy/us-east-1/stage-souptonuts-audit_current/0&quot;,&quot;srn:aws:sqs::380873608913/PolicyEntry/InlinePolicy/us-east-1/stage-souptonuts-audit_current/0/1&quot;,&quot;srn:aws:iam::380873608913/Role/stage-souptonuts-processor&quot;]},&quot;query&quot;:&quot;query getTicketEvidenceResourceDetails($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items {\n      friendlyName\n      name\n      srn\n      friendlyTypeName\n      label\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">5bb411b91b2bd54d0181d1a5fe7e2ded</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:618c-4d47-9c0e-bde217713e3c/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d503a6ad016f7124</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">5bb411b91b2bd54d0181d1a5fe7e2ded-d503a6ad016f7124-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketEvidenceResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_TopInsights_Findings_SelectIdentityTicket_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/40bab40d-8177-4bcd-8922-d21762f4a764&quot;,&quot;includeRisk&quot;:false},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">6a0a492d440b30d37187c92921efce21</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d075-4dec-9115-70022e2b9e8d/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b8c880069a32c508</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">6a0a492d440b30d37187c92921efce21-b8c880069a32c508-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_TopInsights_Findings_SelectIdentityTicket_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/40bab40d-8177-4bcd-8922-d21762f4a764&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e0e1610c1a33171ba747acdf7e84c693</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:68e3-4329-b1c1-2a5bb83f7469/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b26691465e5a9094</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e0e1610c1a33171ba747acdf7e84c693-b26691465e5a9094-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_TopInsights_Findings_SelectIdentityTicket_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/40bab40d-8177-4bcd-8922-d21762f4a764&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">975e9705029b2e5e49d60b30c3601ff6</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b1ee-4be4-b71b-4001a3a64335/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7ce81c27b2e97ab1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">975e9705029b2e5e49d60b30c3601ff6-7ce81c27b2e97ab1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_TopInsights_Findings_SelectIdentityTicket_T04_getTicketEvidenceResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketEvidenceResourceDetails&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:aws:sqs::380873608913/Policy/InlinePolicy/us-east-1/stage-souptonuts-audit_current&quot;,&quot;srn:aws:sqs::380873608913/PolicyVersion/InlinePolicy/us-east-1/stage-souptonuts-audit_current/0&quot;,&quot;srn:aws:sqs::380873608913/PolicyEntry/InlinePolicy/us-east-1/stage-souptonuts-audit_current/0/0&quot;,&quot;srn:aws:service::Global/User/Service/*&quot;,&quot;srn:aws:sqs::380873608913/PermissionList/InlinePolicy/us-east-1/stage-souptonuts-audit_current/0/0&quot;,&quot;srn:sonrai::Permission/aws/sqs:sendmessage&quot;,&quot;srn:aws:sqs::380873608913/DataContainer/AWSSQSQueue/us-east-1/stage-souptonuts-audit_current&quot;]},&quot;query&quot;:&quot;query getTicketEvidenceResourceDetails($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items {\n      friendlyName\n      name\n      srn\n      friendlyTypeName\n      label\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3a1597b8649f1c3e3bbb91822d4d280d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c7e6-4ef8-bb02-82d7db788371/t:37ad8f11/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b23714ac3a2efa5e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3a1597b8649f1c3e3bbb91822d4d280d-b23714ac3a2efa5e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketEvidenceResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_5ThingsToDoRight_T01_fetchRealtedTickets" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTickets&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:azure:ActiveDirectory::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/User/ecbfe352-e633-4a30-8b21-080cef9f7bb6&quot;},&quot;query&quot;:&quot;query fetchRelatedTickets($resourceSRN: String!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">48f7eb5c68cdde97de06667c99420b6b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:800d-470c-b4d0-e12cb7664c15/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">bf8ecf278bacaf2b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">48f7eb5c68cdde97de06667c99420b6b-bf8ecf278bacaf2b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTickets</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_5ThingsToDoRight_SelectAzure_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/3cbc354c-6ed0-42a4-95f9-87292608a8dd&quot;,&quot;includeRisk&quot;:true},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">5dd678c554ee4b08b61fd0056ac78986</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ee8c-4588-8e26-2d65b9cda74a/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6ec0a68cb13729bf</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">5dd678c554ee4b08b61fd0056ac78986-6ec0a68cb13729bf-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_5ThingsToDoRight_SelectAzure_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/3cbc354c-6ed0-42a4-95f9-87292608a8dd&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">baa00713bd69c78957fb31a5a6166e35</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:48a0-4160-b261-3ee07a5608ba/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f62ad89b11e40193</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">baa00713bd69c78957fb31a5a6166e35-f62ad89b11e40193-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_5ThingsToDoRight_SelectAzure_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/3cbc354c-6ed0-42a4-95f9-87292608a8dd&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3c4d7c55e48274bdfb183d6c7a63dedb</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9112-4412-8fa8-0405bfe94c18/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9b273a45dc00d79a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3c4d7c55e48274bdfb183d6c7a63dedb-9b273a45dc00d79a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_5ThingsToDoRight_SelectAzure_T04_fetchChangeDetectionOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchChangeDetectionOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchChangeDetectionOptions {\n  data: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n  identity: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c2bc00217ab9e30adfa32df87a670635</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:92c1-4b2f-bea7-09f9f4b9448e/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fba5e1d873934a48</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c2bc00217ab9e30adfa32df87a670635-fba5e1d873934a48-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchChangeDetectionOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_5ThingsToDoRight_SelectAzure_T05_resourceSummary" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourceSummary&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:azure:ActiveDirectory::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/User/ecbfe352-e633-4a30-8b21-080cef9f7bb6&quot;},&quot;query&quot;:&quot;query resourceSummary($resourceSRN: String) {\n  Entities(where: {srn: {value: $resourceSRN}}) {\n    items {\n      srn\n      label\n      __typename\n      ... on Resource {\n        name\n        friendlyName\n        resourceId\n        swimlaneSRNs\n        importance\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2a3419f4344d00b5b8bb79933ab54194</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3e93-41e6-b201-23f76c7361b7/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">65dc2a110fc5b48f</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2a3419f4344d00b5b8bb79933ab54194-65dc2a110fc5b48f-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourceSummary</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_5ThingsToDoRight_SelectAzure_T06_resourcelookup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcelookup&quot;,&quot;variables&quot;:{&quot;resourceSrns&quot;:[],&quot;limit&quot;:0},&quot;query&quot;:&quot;query resourcelookup($resourceSrns: [String]!, $limit: Int!) {\n  Resources(where: {srn: {op: IN_LIST, values: $resourceSrns}}) {\n    items(limit: $limit) {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a29ad133a15d8664a1a016a9613e3f10</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ee5b-44c3-813f-6155537aefbe/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f21f541e9d417b5b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a29ad133a15d8664a1a016a9613e3f10-f21f541e9d417b5b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcelookup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_5ThingsToDoRight_SelectAzure_T07_fetchRelatedTicketAndFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTicketAndFindings&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:azure:ActiveDirectory::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/User/ecbfe352-e633-4a30-8b21-080cef9f7bb6&quot;,&quot;findingsFilter&quot;:{&quot;or&quot;:[{&quot;resourceSrn&quot;:{&quot;value&quot;:&quot;srn:azure:ActiveDirectory::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/User/ecbfe352-e633-4a30-8b21-080cef9f7bb6&quot;}}]}},&quot;query&quot;:&quot;query fetchRelatedTicketAndFindings($resourceSRN: String!, $findingsFilter: SecurityFindingFilter!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  findings: SecurityFindings(\n    where: $findingsFilter\n    orderBy: {field: findingSeverity, order: DESC}\n    groupBy: [findingId]\n  ) {\n    items(limit: 5) {\n      findingId\n      findingCategory\n      findingDescription\n      findingScore\n      findingSeverity\n      findingPublishedDate\n      findingType\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment RelatedTicketItem on Ticket {\n  srn\n  title\n  templatedTitle\n  status\n  severityNumeric\n  severityCategory\n  lastModified\n  lastSeen\n  firstSeen\n  createdBy\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3cf7e1c68d120fb24c26be269ecb95ca</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7a40-4402-bce7-ee07c3ef3595/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">856cb18233b93e23</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3cf7e1c68d120fb24c26be269ecb95ca-856cb18233b93e23-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTicketAndFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_5ThingsToDoRight_SelectAzure_T08_getTicketEvidenceResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketEvidenceResourceDetails&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:azure:ActiveDirectory::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/User/ecbfe352-e633-4a30-8b21-080cef9f7bb6&quot;,&quot;srn:azure:Microsoft.Authorization::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/Policy//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/providers/microsoft.authorization/classicadministrators/000340010e0331f0&quot;]},&quot;query&quot;:&quot;query getTicketEvidenceResourceDetails($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items {\n      friendlyName\n      name\n      srn\n      friendlyTypeName\n      label\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c94ebd08f5dad027da31a67fe3724b36</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6b09-4d6a-be21-7aca5aa6c6dc/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d9cae981688ce80e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c94ebd08f5dad027da31a67fe3724b36-d9cae981688ce80e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketEvidenceResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_5ThingsToDoRight_SelectAzure_SelectIdentityTicket_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/ab34ed8b-01f5-4aa0-bf11-036605b754e9&quot;,&quot;includeRisk&quot;:false},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">ae31136991f038778236e298b8e86b35</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:33e5-4424-a9fd-42f301ab77f3/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f1907fa251332bbf</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">ae31136991f038778236e298b8e86b35-f1907fa251332bbf-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_5ThingsToDoRight_SelectAzure_SelectIdentityTicket_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/ab34ed8b-01f5-4aa0-bf11-036605b754e9&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3a61bc2fca77234bc387737cd282ad16</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:cf2f-473b-aae3-620c7b6c8d59/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">87ae1ad5d4b3e1c3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3a61bc2fca77234bc387737cd282ad16-87ae1ad5d4b3e1c3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_5ThingsToDoRight_SelectAzure_SelectIdentityTicket_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/ab34ed8b-01f5-4aa0-bf11-036605b754e9&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">338b97698b410f042b335d3f8ddb59b5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c9b0-4c98-a09d-6f00f91affec/t:5d25a660/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">03cb6826c1a5ffc5</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">338b97698b410f042b335d3f8ddb59b5-03cb6826c1a5ffc5-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T01_getIdentityCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getIdentityCounts&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;active&quot;:{&quot;value&quot;:true}},&quot;awsFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;aws&quot;}},&quot;gcpFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;gcp&quot;}},&quot;serviceaccountFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;type&quot;:{&quot;value&quot;:&quot;GCPServiceAccount&quot;}},&quot;serviceaccountkeysFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;type&quot;:{&quot;value&quot;:&quot;GCPServiceAccountKey&quot;}},&quot;azureFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;azure&quot;}},&quot;ociFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;oci&quot;}},&quot;includeAws&quot;:true,&quot;includeGcp&quot;:true,&quot;includeAzure&quot;:true,&quot;includeOci&quot;:true},&quot;query&quot;:&quot;query getIdentityCounts($filters: IdentityFilter!, $awsFilters: IdentityFilter!, $gcpFilters: IdentityFilter!, $azureFilters: IdentityFilter!, $ociFilters: IdentityFilter!, $serviceaccountFilters: UserFilter!, $serviceaccountkeysFilters: AccesskeyFilter!, $includeAws: Boolean!, $includeGcp: Boolean!, $includeOci: Boolean!, $includeAzure: Boolean!) {\n  total: Identities(where: $filters) {\n    count\n    __typename\n  }\n  aws: Identities(where: $awsFilters) @include(if: $includeAws) {\n    count\n    __typename\n  }\n  gcp: Identities(where: $gcpFilters) @include(if: $includeGcp) {\n    count\n    __typename\n  }\n  serviceaccount: Users(where: $serviceaccountFilters) @include(if: $includeGcp) {\n    count\n    __typename\n  }\n  serviceaccountkeys: AccessKeys(where: $serviceaccountkeysFilters) @include(if: $includeGcp) {\n    count\n    __typename\n  }\n  azure: Identities(where: $azureFilters) @include(if: $includeAzure) {\n    count\n    __typename\n  }\n  oci: Identities(where: $ociFilters) @include(if: $includeOci) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ad24-4897-be64-c11ba5b256b6/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">974dea8ae9dee2ae</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-974dea8ae9dee2ae-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getIdentityCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:af90-49de-9a4e-3bdbc7a62aa9/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">88b462d6550cdffb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-88b462d6550cdffb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d039-40aa-a1be-6ef64bdcfb80/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">808a98a33f1da5dd</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-808a98a33f1da5dd-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:88e3-46e9-b005-ad4b1e3057e5/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">288e06a4a83cd7e6</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-288e06a4a83cd7e6-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T05_getLateralMovementRollup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getLateralMovementRollup&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getLateralMovementRollup($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {standardControlSrn: {order: ASC, precedence: 1}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      standardControlSrn\n      standardControl {\n        name\n        __typename\n      }\n      controlPolicyTitle\n      ticketKey\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:042f-41ee-958a-25e60930257e/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">deee24ffd2eb2e66</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-deee24ffd2eb2e66-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getLateralMovementRollup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T06_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9608-4bf8-9d5b-2ca4a21d1e1e/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2837245af3986fbe</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-2837245af3986fbe-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T07_getUnusedIdentity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUnusedIdentity&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getUnusedIdentity($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2ca3-48ea-b99f-8debda7eb741/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9d7e8891b50e2749</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-9d7e8891b50e2749-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getUnusedIdentity</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T08_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a9fc-4e24-b849-2eade2596f0f/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6b212077338c5b90</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-6b212077338c5b90-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T09_getCrossAccounttrustExposure" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCrossAccountTrustExposure&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getCrossAccountTrustExposure($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {standardControlSrn: {order: ASC, precedence: 1}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4993-4b28-b467-e4e52a168675/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">20265e1fdc470534</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-20265e1fdc470534-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getCrossAccountTrustExposure</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T10_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4fa5-42ac-a560-8dc7386511d7/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8f82ac8d562e5a81</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-8f82ac8d562e5a81-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T11_getOverpriviledgedIdentity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOverpriviledgedIdentity&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getOverpriviledgedIdentity($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {resourceType: {order: ASC, precedence: 1}, standardControlSrn: {order: ASC, precedence: 2}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:800c-461c-9a68-3939517b058c/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">49b09deb671212e4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-49b09deb671212e4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOverpriviledgedIdentity</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T12_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c8dd-4852-a336-13d8d132cbcb/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f8c26cbde981daaa</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-f8c26cbde981daaa-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T13_getAccessKeys" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAccessKeys&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getAccessKeys($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardControl {\n        name\n        __typename\n      }\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6b95-4adc-bd46-81bfd1597fc8/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">aaa78e2c38a94e42</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-aaa78e2c38a94e42-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAccessKeys</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T14_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:452d-48fe-bb88-0a32dbb5a19b/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b34778d5eb04a7ab</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-b34778d5eb04a7ab-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T15_TopFiveRiskyIdentities" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveRiskyIdentities&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query TopFiveRiskyIdentities($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(limit: 5, orderBy: [{severityNumeric: {order: DESC}}], includeRisk: true) {\n      srn\n      title\n      severityCategory\n      account\n      resourceName\n      ticketKey\n      resourceSRN\n      status\n      cloudType\n      swimlaneSRNs\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:de51-4668-aab3-c2b42f029baa/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e90cc1cec2ceb0ed</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-e90cc1cec2ceb0ed-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveRiskyIdentities</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T16_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:817c-40cd-ab71-a45dcfeec87a/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">32e8c7fff0ebf54f</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-32e8c7fff0ebf54f-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T17_getOtherIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOtherIssues&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getOtherIssues($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      severityCategory\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ce6b-476d-a84d-bdd356f77ce7/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1130575d7678934b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-1130575d7678934b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOtherIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_IdentityInsights_T18_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-02T00:00:00.000Z&quot;,&quot;2023-05-02T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9c46-4ff3-a23c-f88e5d8c0186/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5e1aad8632130ab1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-5e1aad8632130ab1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_IdentityInsights_AWSFilteration_T01_getAWSIdentityCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAWSIdentityCounts&quot;,&quot;variables&quot;:{&quot;usersFilter&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;User&quot;},&quot;active&quot;:{&quot;value&quot;:true}},&quot;groupsFilter&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;Group&quot;},&quot;active&quot;:{&quot;value&quot;:true}},&quot;rolesFilter&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;Role&quot;},&quot;active&quot;:{&quot;value&quot;:true}},&quot;otherFilter&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;aws&quot;},&quot;label&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;Group&quot;,&quot;Role&quot;]}}},&quot;query&quot;:&quot;query getAWSIdentityCounts($usersFilter: UserFilter!, $groupsFilter: GroupFilter!, $rolesFilter: RoleFilter!, $otherFilter: IdentityFilter!) {\n  users: Users(where: $usersFilter) {\n    count\n    __typename\n  }\n  groups: Groups(where: $groupsFilter) {\n    count\n    __typename\n  }\n  roles: Roles(where: $rolesFilter) {\n    count\n    __typename\n  }\n  other: Identities(where: $otherFilter) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:fcda-4fe1-bab7-9aeeca3d3b9d/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">322d3b00aa9f1951</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">26aa519ab7f39986f1e0095762688ca1-322d3b00aa9f1951-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAWSIdentityCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_IdentityInsights_AWSFilteration_clickUsers_T01_getNodeTypeCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNodeTypeCounts&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getNodeTypeCounts {\n  GroupedQuery(where: {keys: [Label]}) {\n    key\n    items {\n      value\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d3ee608351bbbd170dcd9c6ca424de82</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:107e-482d-8e12-6a85ea7f42f9/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">be1ca6a3d4ad4dcc</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d3ee608351bbbd170dcd9c6ca424de82-be1ca6a3d4ad4dcc-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getNodeTypeCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_IdentityInsights_AWSFilteration_clickUsers_T02_pivotedQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;pivotedQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100},&quot;query&quot;:&quot;query pivotedQuery($limit: Int) {\n  Users(\n    where: {and: [{and: [{active: {op: EQ, value: true}}, {cloudType: {op: EQ, value: \&quot;aws\&quot;, caseSensitive: false}}, {type: {op: EQ, value: User}}]}, {}, {}]}\n  ) {\n    items(limit: $limit) {\n      name\n      userName\n      type\n      label\n      isConsoleEnabled\n      active\n      account\n      createdDate\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">476f45dc846fa05f2e873ecf76c173d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a64c-498f-bc35-663bbe722ce4/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9a61aac0a4260b9b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">476f45dc846fa05f2e873ecf76c173d3-9a61aac0a4260b9b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">UISearchQuery - unnamed</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_IdentityInsights_AWSFilteration_clickUsers_T03_getTags" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTags&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getTags {\n  Tags {\n    count\n    group {\n      key {\n        key\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d9111537275913788a8f05eb8e164c56</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1824-461a-8f5b-2b1cf3c5964a/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1582896abbbb7570</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d9111537275913788a8f05eb8e164c56-1582896abbbb7570-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTags</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_IdentityInsights_AWSFilteration_Cards_T01_PivotedQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;pivotedQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100},&quot;query&quot;:&quot;query pivotedQuery($limit: Int) {\n  Users(\n    where: {and: [{and: [{active: {op: EQ, value: true}}, {cloudType: {op: EQ, value: \&quot;aws\&quot;, caseSensitive: false}}, {type: {op: EQ, value: User}}]}, {}, {}]}\n  ) {\n    items(limit: $limit) {\n      name\n      userName\n      type\n      label\n      isConsoleEnabled\n      active\n      account\n      createdDate\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a6f4c28f38235252ef8c5d10a0422aea</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1d3f-4478-b175-9f62a7240209/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">bf80b9fa167e6bbb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a6f4c28f38235252ef8c5d10a0422aea-bf80b9fa167e6bbb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">UISearchQuery - unnamed</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_IdentityInsights_AWSFilteration_RealtionExplorer_T01_pivotedQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;pivotedQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100},&quot;query&quot;:&quot;query pivotedQuery($limit: Int) {\n  Users(\n    where: {and: [{and: [{active: {op: EQ, value: true}}, {cloudType: {op: EQ, value: \&quot;aws\&quot;, caseSensitive: false}}, {type: {op: EQ, value: User}}]}, {}, {}]}\n  ) {\n    items(limit: $limit) {\n      name\n      userName\n      type\n      label\n      isConsoleEnabled\n      active\n      account\n      createdDate\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">041c3783543115e3fff6a0b3bae1fc5c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:07c1-4cb0-acfd-9dc60be918d0/t:d7d78b46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f2abb4cf25714585</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">041c3783543115e3fff6a0b3bae1fc5c-f2abb4cf25714585-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">UISearchQuery - unnamed</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Top5RiskyIdentities_SelectFirstRisk_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/a1e05572-4102-4da4-8e2a-de7a241024f6&quot;,&quot;includeRisk&quot;:true},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">931133bf7dc4a7469d80db088525d423</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0972-448a-9737-68ecfb757137/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">dd36d5f492a90eae</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">931133bf7dc4a7469d80db088525d423-dd36d5f492a90eae-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Top5RiskyIdentities_SelectFirstRisk_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/a1e05572-4102-4da4-8e2a-de7a241024f6&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b7201c4e05c77b3e90e579cefdee68dd</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d7db-466b-92cb-92281cc9be95/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">50ade013c5363ab1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b7201c4e05c77b3e90e579cefdee68dd-50ade013c5363ab1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Top5RiskyIdentities_SelectFirstRisk_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/a1e05572-4102-4da4-8e2a-de7a241024f6&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3726a069ce1ee30c6b9416e4116c6411</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bd4c-45ec-a376-f28711d73f43/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0886cd6e78e7360b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3726a069ce1ee30c6b9416e4116c6411-0886cd6e78e7360b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Top5RiskyIdentities_SelectFirstRisk_T04_fetchChangeDetectionOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchChangeDetectionOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchChangeDetectionOptions {\n  data: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n  identity: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f5e566cc75e938fa20e353b6e7bb53f7</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8fa7-419c-a4dc-2f7657c52a8a/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a047ef06f0fdb186</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f5e566cc75e938fa20e353b6e7bb53f7-a047ef06f0fdb186-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchChangeDetectionOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Top5RiskyIdentities_SelectFirstRisk_T05_resourceSummary" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourceSummary&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:iam::474484658459/Role/custom-pricing-org-role&quot;},&quot;query&quot;:&quot;query resourceSummary($resourceSRN: String) {\n  Entities(where: {srn: {value: $resourceSRN}}) {\n    items {\n      srn\n      label\n      __typename\n      ... on Resource {\n        name\n        friendlyName\n        resourceId\n        swimlaneSRNs\n        importance\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3abdf8f0e1b5b7923d24b02613f215ba</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0776-4f26-8b03-ecbc9c3198ae/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7f10d5ba23f9fab1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3abdf8f0e1b5b7923d24b02613f215ba-7f10d5ba23f9fab1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourceSummary</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Top5RiskyIdentities_SelectFirstRisk_T06_resourcelookup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcelookup&quot;,&quot;variables&quot;:{&quot;resourceSrns&quot;:[],&quot;limit&quot;:0},&quot;query&quot;:&quot;query resourcelookup($resourceSrns: [String]!, $limit: Int!) {\n  Resources(where: {srn: {op: IN_LIST, values: $resourceSrns}}) {\n    items(limit: $limit) {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e9212317ad7dbd088c0970a80923b7ed</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f21d-4ad6-892b-be8d47977f91/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">006ce0f5be47882a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e9212317ad7dbd088c0970a80923b7ed-006ce0f5be47882a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcelookup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Top5RiskyIdentities_SelectFirstRisk_T07_fetchRelatedTicketAndFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTicketAndFindings&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:iam::474484658459/Role/custom-pricing-org-role&quot;,&quot;findingsFilter&quot;:{&quot;or&quot;:[{&quot;resourceSrn&quot;:{&quot;value&quot;:&quot;srn:aws:iam::474484658459/Role/custom-pricing-org-role&quot;}}]}},&quot;query&quot;:&quot;query fetchRelatedTicketAndFindings($resourceSRN: String!, $findingsFilter: SecurityFindingFilter!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  findings: SecurityFindings(\n    where: $findingsFilter\n    orderBy: {field: findingSeverity, order: DESC}\n    groupBy: [findingId]\n  ) {\n    items(limit: 5) {\n      findingId\n      findingCategory\n      findingDescription\n      findingScore\n      findingSeverity\n      findingPublishedDate\n      findingType\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment RelatedTicketItem on Ticket {\n  srn\n  title\n  templatedTitle\n  status\n  severityNumeric\n  severityCategory\n  lastModified\n  lastSeen\n  firstSeen\n  createdBy\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2d9090b273840f04991d9ffaf5a96980</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1559-4f98-9fc2-a2b031c03beb/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">dcd9772fc6a3c9b3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2d9090b273840f04991d9ffaf5a96980-dcd9772fc6a3c9b3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTicketAndFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Top5RiskyIdentities_SelectFirstRisk_T08_getTicketEvidenceResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketEvidenceResourceDetails&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:aws:iam::474484658459/Role/custom-pricing-org-role&quot;,&quot;srn:aws:iam::080189833334/Policy/InlinePolicy/role/OrganizationAccountAccessRole/AdministratorAccess&quot;,&quot;srn:aws:iam::080189833334/Policy/ManagedPolicy/AdministratorAccess&quot;,&quot;srn:aws:iam::080189833334/Policy/ManagedPolicy/ReadOnlyAccess&quot;,&quot;srn:aws:iam::080189833334/Policy/ManagedPolicy/SecurityAudit&quot;]},&quot;query&quot;:&quot;query getTicketEvidenceResourceDetails($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items {\n      friendlyName\n      name\n      srn\n      friendlyTypeName\n      label\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">5c04b471c2f306aad75fe958b051f248</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1a37-41e1-8250-7f0884b0a198/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">57490ad56b5d2ada</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">5c04b471c2f306aad75fe958b051f248-57490ad56b5d2ada-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketEvidenceResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Top5RiskyIdentities_SelectFirstRisk_IdentityTicket_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/df90f242-f095-4c6b-9d0b-f08a348d688c&quot;,&quot;includeRisk&quot;:false},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">72d4bc3f51135b0222cf14e0cccb0b0a</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:004d-4ce1-ad36-9651913cbbe4/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ad93502f64d34c37</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">72d4bc3f51135b0222cf14e0cccb0b0a-ad93502f64d34c37-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Top5RiskyIdentities_SelectFirstRisk_IdentityTicket_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/df90f242-f095-4c6b-9d0b-f08a348d688c&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">899e452c9c01fec21ed420b3d84a4c3d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:549d-4623-bb6e-c2eb9d0e35bc/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c74a26d9cb94a4f2</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">899e452c9c01fec21ed420b3d84a4c3d-c74a26d9cb94a4f2-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Top5RiskyIdentities_SelectFirstRisk_IdentityTicket_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/df90f242-f095-4c6b-9d0b-f08a348d688c&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f8472b8acaf7aa14a62bcf336a6105a4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:800b-405f-8310-a220dc6cb576/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">cd240856fadd5cdd</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f8472b8acaf7aa14a62bcf336a6105a4-cd240856fadd5cdd-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Top5RiskyIdentities_SelectFirstRisk_IdentityTicket_T04_getTicketEvidenceResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketEvidenceResourceDetails&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:aws:iam::474484658459/Role/custom-pricing-org-role&quot;,&quot;srn:aws:iam::474484658459/Policy/ManagedPolicy/custom-pricing-org-policy&quot;,&quot;srn:aws:iam::080189833334/Policy/TrustRelationship/role/OrganizationAccountAccessRole/assumed-role&quot;,&quot;srn:aws:iam::080189833334/Role/OrganizationAccountAccessRole&quot;,&quot;srn:aws:iam::080189833334/Policy/InlinePolicy/role/OrganizationAccountAccessRole/AdministratorAccess&quot;,&quot;srn:aws:iam::284563492725/Policy/TrustRelationship/role/OrganizationAccountAccessRole/assumed-role&quot;,&quot;srn:aws:iam::284563492725/Role/OrganizationAccountAccessRole&quot;,&quot;srn:aws:iam::284563492725/Policy/InlinePolicy/role/OrganizationAccountAccessRole/AdministratorAccess&quot;,&quot;srn:aws:iam::284563492725/Policy/TrustRelationship/role/sonrai-fiesta-admin/assumed-role&quot;,&quot;srn:aws:iam::284563492725/Role/sonrai-fiesta-admin&quot;,&quot;srn:aws:iam::284563492725/Policy/ManagedPolicy/AdministratorAccess&quot;,&quot;srn:aws:iam::284563492725/Policy/TrustRelationship/role/gian-1233-test/assumed-role&quot;,&quot;srn:aws:iam::284563492725/Role/gian-1233-test&quot;,&quot;srn:aws:iam::284563492725/Policy/ManagedPolicy/Sonrai-125-150&quot;,&quot;srn:aws:iam::284563492725/Policy/TrustRelationship/role/sonrai-collector-20220909175620/assumed-role&quot;,&quot;srn:aws:iam::284563492725/Role/sonrai-collector-20220909175620&quot;,&quot;srn:aws:iam::080189833334/Policy/TrustRelationship/role/sonrai-collector-bots-20220114185218/assumed-role&quot;,&quot;srn:aws:iam::080189833334/Role/sonrai-collector-bots-20220114185218&quot;,&quot;srn:aws:iam::080189833334/Policy/ManagedPolicy/AdministratorAccess&quot;,&quot;srn:aws:iam::080189833334/Policy/TrustRelationship/role/sonrai-Eric-Vault-Collector-roles-bot/assumed-role&quot;,&quot;srn:aws:iam::080189833334/Role/sonrai-Eric-Vault-Collector-roles-bot&quot;,&quot;srn:aws:iam::284563492725/Policy/TrustRelationship/role/AWSCloudFormationStackSetExecutionRole/assumed-role&quot;,&quot;srn:aws:iam::284563492725/Role/AWSCloudFormationStackSetExecutionRole&quot;,&quot;srn:aws:iam::284563492725/Policy/TrustRelationship/role/sonrai-collector-inventa/assumed-role&quot;,&quot;srn:aws:iam::284563492725/Role/sonrai-collector-inventa&quot;,&quot;srn:aws:iam::284563492725/Policy/TrustRelationship/role/RoleA/assumed-role&quot;,&quot;srn:aws:iam::284563492725/Role/RoleA&quot;,&quot;srn:aws:iam::531734574008/Policy/TrustRelationship/role/OrganizationAccountAccessRole/assumed-role&quot;,&quot;srn:aws:iam::531734574008/Role/OrganizationAccountAccessRole&quot;,&quot;srn:aws:iam::531734574008/Policy/InlinePolicy/role/OrganizationAccountAccessRole/AdministratorAccess&quot;,&quot;srn:aws:iam::577945324761/Policy/TrustRelationship/role/CoreyScannerRole/assumed-role&quot;,&quot;srn:aws:iam::577945324761/Role/CoreyScannerRole&quot;,&quot;srn:aws:iam::577945324761/Policy/ManagedPolicy/AdministratorAccess&quot;]},&quot;query&quot;:&quot;query getTicketEvidenceResourceDetails($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items {\n      friendlyName\n      name\n      srn\n      friendlyTypeName\n      label\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c11d1d1f27316de5c2b37c1839b63e05</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f4da-4f41-a495-08874cdc53ab/t:1a6a5512/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0c8970098118c54c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c11d1d1f27316de5c2b37c1839b63e05-0c8970098118c54c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketEvidenceResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T01_networkCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;networkCounts&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;keys&quot;:[&quot;Cloud&quot;,&quot;Type&quot;],&quot;labels&quot;:[&quot;Network&quot;,&quot;NetworkGroup&quot;,&quot;NetworkListener&quot;,&quot;NetworkInterface&quot;,&quot;NetworkComponent&quot;]}},&quot;query&quot;:&quot;query networkCounts($filters: GroupedQueryFilter!) {\n  GroupedQuery(where: $filters) {\n    items {\n      value\n      count\n      hasGroupedResult {\n        key\n        items {\n          value\n          count\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ffb9-409f-b323-835b0798c3bd/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">networkCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bb99-4bd0-938a-ff7a2757f356/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:543f-4c1c-9a18-64b612e3f8a1/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c0b1-4083-b92d-7c45c901f07e/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T05_getEncryption" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEncryption&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/c55fe0c4-c888-47b2-b5d0-e949021b1c2a&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getEncryption($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {standardControlSrn: {order: ASC, precedence: 1}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      standardControlSrn\n      standardControl {\n        name\n        __typename\n      }\n      resourceType\n      resourceTypeFriendlyName\n      ticketKey\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:acf4-40ae-822c-981ec08ff112/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getEncryption</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T06_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/c55fe0c4-c888-47b2-b5d0-e949021b1c2a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/c55fe0c4-c888-47b2-b5d0-e949021b1c2a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/c55fe0c4-c888-47b2-b5d0-e949021b1c2a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1815-41f6-a4ce-cb5faf152a73/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T07_getExposedResources" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getExposedResources&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getExposedResources($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b12b-4180-811b-779ddc897f27/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getExposedResources</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T08_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8a0d-44da-a9cb-ecf38973e1d6/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T09_getRecentChanges" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getRecentChanges&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;account&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getRecentChanges($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      standardControlSrn\n      controlPolicyTitle\n      severityCategory\n      account\n      resourceName\n      ticketKey\n      resourceSRN\n      status\n      cloudType\n      swimlaneSrn\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0e3b-465e-950a-30ee18641e26/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getRecentChanges</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T10_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f0d2-4d17-9da9-610f2e097c84/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T11_getUnused" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUnused&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getUnused($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f3c8-4fd8-a389-0c4f38cd6f8e/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getUnused</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T12_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d1da-490d-9675-3007bdfe31de/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T13_getOtherIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOtherIssues&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getOtherIssues($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      severityCategory\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:22b4-4568-8488-c66935e146fe/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOtherIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_NetworkInsights_T14_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8285-4acd-866a-8c626b070160/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_NetworkInsights_AWSfilteration_5ThingsToDoRight now_T01_fetchRelatedTickets" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTickets&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:azure:Microsoft.Compute::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/Compute//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.compute/virtualmachines/research&quot;},&quot;query&quot;:&quot;query fetchRelatedTickets($resourceSRN: String!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:286c-4269-bc7f-1251d5b17c05/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTickets</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_NetworkInsights_AWSfilteration_5ThingsToDoRightNow_SelectFirstRecord_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/f9f29109-5849-42d9-92e8-8fd19aaf755b&quot;,&quot;includeRisk&quot;:true},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:63ce-4d70-9c54-d594013cae5c/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_NetworkInsights_AWSfilteration_5ThingsToDoRightNow_SelectFirstRecord_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/f9f29109-5849-42d9-92e8-8fd19aaf755b&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:074f-4b71-9036-e927c5d72e2c/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_NetworkInsights_AWSfilteration_5ThingsToDoRightNow_SelectFirstRecord_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/f9f29109-5849-42d9-92e8-8fd19aaf755b&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5c05-43ff-aacf-5d79b3ad63b8/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_NetworkInsights_AWSfilteration_5ThingsToDoRightNow_SelectFirstRecord_T04_fetchChangeDetectionOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchChangeDetectionOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchChangeDetectionOptions {\n  data: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n  identity: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3e04-4107-9657-1214805deaff/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchChangeDetectionOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_NetworkInsights_AWSfilteration_5ThingsToDoRightNow_SelectFirstRecord_T05_resourceSummary" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourceSummary&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:azure:Microsoft.Compute::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/Compute//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.compute/virtualmachines/research&quot;},&quot;query&quot;:&quot;query resourceSummary($resourceSRN: String) {\n  Entities(where: {srn: {value: $resourceSRN}}) {\n    items {\n      srn\n      label\n      __typename\n      ... on Resource {\n        name\n        friendlyName\n        resourceId\n        swimlaneSRNs\n        importance\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c692-4848-9f7b-25bc59b5cd6c/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourceSummary</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_NetworkInsights_AWSfilteration_5ThingsToDoRightNow_SelectFirstRecord_T06_resourcelookup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcelookup&quot;,&quot;variables&quot;:{&quot;resourceSrns&quot;:[],&quot;limit&quot;:0},&quot;query&quot;:&quot;query resourcelookup($resourceSrns: [String]!, $limit: Int!) {\n  Resources(where: {srn: {op: IN_LIST, values: $resourceSrns}}) {\n    items(limit: $limit) {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0b18-4138-8029-750c2386124d/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcelookup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_NetworkInsights_AWSfilteration_5ThingsToDoRightNow_SelectFirstRecord_T07_fetchRelatedTicketAndFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTicketAndFindings&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:azure:Microsoft.Compute::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/Compute//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.compute/virtualmachines/research&quot;,&quot;findingsFilter&quot;:{&quot;or&quot;:[{&quot;resourceSrn&quot;:{&quot;value&quot;:&quot;srn:azure:Microsoft.Compute::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/Compute//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.compute/virtualmachines/research&quot;}}]}},&quot;query&quot;:&quot;query fetchRelatedTicketAndFindings($resourceSRN: String!, $findingsFilter: SecurityFindingFilter!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  findings: SecurityFindings(\n    where: $findingsFilter\n    orderBy: {field: findingSeverity, order: DESC}\n    groupBy: [findingId]\n  ) {\n    items(limit: 5) {\n      findingId\n      findingCategory\n      findingDescription\n      findingScore\n      findingSeverity\n      findingPublishedDate\n      findingType\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment RelatedTicketItem on Ticket {\n  srn\n  title\n  templatedTitle\n  status\n  severityNumeric\n  severityCategory\n  lastModified\n  lastSeen\n  firstSeen\n  createdBy\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:91f8-4e8e-8a16-f93d0563cb84/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTicketAndFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_NetworkInsights_AWSfilteration_5ThingsToDoRightNow_SelectFirstRecord_T08_getTicketEvidenceResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketEvidenceResourceDetails&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:azure:Microsoft.Compute::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/Compute//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.compute/virtualmachines/research&quot;,&quot;srn:azure:Microsoft.Network::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/NetworkInterface//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.network/networkinterfaces/research841&quot;,&quot;srn:azure:Microsoft.Network::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/NetworkPolicy//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.network/networksecuritygroups/research-nsg&quot;,&quot;srn:azure:Microsoft.Network::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/NetworkPermission//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.network/networksecuritygroups/research-nsg/securityrules/ssh_allow_beau&quot;,&quot;srn:sonrai::Protocol/tcp&quot;,&quot;srn:azure:Microsoft.Network::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/CIDR/73.55.189.82/32&quot;,&quot;srn:sonrai::PortRange/22&quot;,&quot;srn:azure:Microsoft.Network::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/CIDR//subscriptions/5881f0b7-7d4d-495d-a6ff-8a45aa78e827/resourcegroups/research_group/providers/microsoft.network/publicipaddresses/research-ip&quot;]},&quot;query&quot;:&quot;query getTicketEvidenceResourceDetails($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items {\n      friendlyName\n      name\n      srn\n      friendlyTypeName\n      label\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d041-42ad-8df5-7bf3d3f64294/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketEvidenceResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_NetworkInsights_5ThingsToDoRightNow_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/d87e5244-8e76-4ad5-8210-a7801d28dcc9&quot;,&quot;includeRisk&quot;:false},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:18d4-438b-add8-733846a48343/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_NetworkInsights_5ThingsToDoRightNow_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/d87e5244-8e76-4ad5-8210-a7801d28dcc9&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:871e-4488-a27d-21bde1e5889e/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_NetworkInsights_5ThingsToDoRightNow_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/d87e5244-8e76-4ad5-8210-a7801d28dcc9&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:409e-4ace-a01f-d9b85cb3743e/t:84220895/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T01_getDataCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDataCounts&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;active&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:true}}},&quot;query&quot;:&quot;query getDataCounts($filters: DataFilter!) {\n  Data(where: $filters) {\n    count\n    group {\n      key {\n        cloudType\n        __typename\n      }\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6cd9-4385-a6e1-5080b359830c/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f8d8111f4ee5a0c0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-f8d8111f4ee5a0c0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDataCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:be3a-4550-b517-368bb62b1b67/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">05a81fd367f8acb2</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-05a81fd367f8acb2-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8a0f-46fa-a788-08607954b4ec/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2aaff39feb684c94</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-2aaff39feb684c94-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c7a0-4206-af9f-066a2d9d4efa/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">837309401d2507f3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-837309401d2507f3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T05_getDataCountsForCloud" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDataCountsForCloud&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:null}}},&quot;query&quot;:&quot;query getDataCountsForCloud($filters: DataFilter!) {\n  Data(where: $filters) {\n    group {\n      key {\n        serviceType\n        __typename\n      }\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c61f-48d9-b3fa-c66d9c925761/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">04d868e2b1ef8665</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-04d868e2b1ef8665-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDataCountsForCloud</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T06_getEncryptionKeys" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEncryptionKeys&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getEncryptionKeys($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d3cc-41b4-b44e-bbcd33e11b28/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9dabf85e04cfb8fb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-9dabf85e04cfb8fb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getEncryptionKeys</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T07_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f490-40f7-9c3a-ea73aff047a2/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ce7d77878a5fc847</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-ce7d77878a5fc847-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T08_getClassification" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getClassification&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getClassification($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      serviceType\n      resourceTypeFriendlyName\n      serviceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7ec7-403f-b4e5-5f9b84d44be7/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">60542bacc113e94b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-60542bacc113e94b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getClassification</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T09_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e70c-4d6f-a164-18ab7475ae41/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6fb0016b4ab42f8b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-6fb0016b4ab42f8b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T10_getAccess" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAccess&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getAccess($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      serviceType\n      serviceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2cb4-471a-bd7c-85e26d55cbe5/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">973ce7f09a5751ba</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-973ce7f09a5751ba-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAccess</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T11_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a9f8-4e1f-9d87-2757aebb9af2/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">554577adf2f50b9f</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-554577adf2f50b9f-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T12_getKeyAndCert" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getKeyAndCert&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getKeyAndCert($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:62c8-48aa-9277-86d4fbf75ef4/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ead52150609ca869</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-ead52150609ca869-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getKeyAndCert</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T13_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0239-4c6c-bc4d-9d73a93c5e9f/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">442e87dbdda67583</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-442e87dbdda67583-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T14_getOtherIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOtherIssues&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getOtherIssues($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      severityCategory\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c222-4c39-8114-4c7fff17394b/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ad48a1a0476257c1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-ad48a1a0476257c1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOtherIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_DataProtection_T15_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:dd47-4421-bf05-a8086dc165f7/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">39699a681c643e96</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-39699a681c643e96-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_DataProtection_AWSFilteration_T01_getDataCountsForCloud" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDataCountsForCloud&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;aws&quot;}}},&quot;query&quot;:&quot;query getDataCountsForCloud($filters: DataFilter!) {\n  Data(where: $filters) {\n    group {\n      key {\n        serviceType\n        __typename\n      }\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7b0d-4889-bf0c-cf7dbf8cd3cb/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9d650ba851cd28ed</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-9d650ba851cd28ed-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDataCountsForCloud</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_DataProtection_5ThingsToDo_T01_fetchRelatedTickets" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTickets&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:lambda::474484658459/Compute/AWSLambda/us-east-2/test&quot;},&quot;query&quot;:&quot;query fetchRelatedTickets($resourceSRN: String!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    count: globalCount(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a789-4e65-a95a-934f4dd698e6/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1c5bec88177fc37c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7e77d53fb3b279b7ee37dbd9fc170099-1c5bec88177fc37c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTickets</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_DataProtection_5ThingsToDo_SelectTitle_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/8c9d061d-909b-42fd-8b69-c4ca34fa4c8b&quot;,&quot;includeRisk&quot;:true},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">6beadfa584c39e33c4c967edf7583574</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bc34-4c05-8b47-4fcc6d796da0/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a2d8b3c6265c9a18</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">6beadfa584c39e33c4c967edf7583574-a2d8b3c6265c9a18-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_DataProtection_5ThingsToDo_SelectTitle_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/8c9d061d-909b-42fd-8b69-c4ca34fa4c8b&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b525722e90bdf05c831b9f10eaae0b64</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2012-42fc-bb76-c255b2f46fe1/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">54f65bb3c57551ce</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b525722e90bdf05c831b9f10eaae0b64-54f65bb3c57551ce-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_DataProtection_5ThingsToDo_SelectTitle_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/8c9d061d-909b-42fd-8b69-c4ca34fa4c8b&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9c665a1d833ead3a945aa231502832a2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bb21-4b1b-a0dc-f2f33579e8cb/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">037db69754d95cbb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9c665a1d833ead3a945aa231502832a2-037db69754d95cbb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_DataProtection_5ThingsToDo_SelectTitle_T04_fetchChangeDetectionOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchChangeDetectionOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchChangeDetectionOptions {\n  data: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n  identity: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">27857ab80ea78c11f25c4b269158758f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4520-4cd9-9de6-5dc0fbdd5cee/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">372be09e6cf0d3a9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">27857ab80ea78c11f25c4b269158758f-372be09e6cf0d3a9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchChangeDetectionOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_DataProtection_5ThingsToDo_SelectTitle_T05_resourceSummary" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourceSummary&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:lambda::474484658459/Compute/AWSLambda/us-east-2/test&quot;},&quot;query&quot;:&quot;query resourceSummary($resourceSRN: String) {\n  Entities(where: {srn: {value: $resourceSRN}}) {\n    items {\n      srn\n      label\n      __typename\n      ... on Resource {\n        name\n        friendlyName\n        resourceId\n        swimlaneSRNs\n        importance\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">41cb36fec2c894225e36cec63ce94e53</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b48a-4eb9-bcb6-39f939363673/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b723490191f2d1e5</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">41cb36fec2c894225e36cec63ce94e53-b723490191f2d1e5-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourceSummary</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_DataProtection_5ThingsToDo_SelectTitle_T06_resourcelookup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcelookup&quot;,&quot;variables&quot;:{&quot;resourceSrns&quot;:[],&quot;limit&quot;:0},&quot;query&quot;:&quot;query resourcelookup($resourceSrns: [String]!, $limit: Int!) {\n  Resources(where: {srn: {op: IN_LIST, values: $resourceSrns}}) {\n    items(limit: $limit) {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">21a218ed4dc217ab90404dc2e448a1e5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:62c6-4887-9918-90d513613e63/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d5daf1385d4f86a8</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">21a218ed4dc217ab90404dc2e448a1e5-d5daf1385d4f86a8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcelookup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_DataProtection_5ThingsToDo_SelectTitle_T07_fetchRelatedTicketAndFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTicketAndFindings&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:lambda::474484658459/Compute/AWSLambda/us-east-2/test&quot;,&quot;findingsFilter&quot;:{&quot;or&quot;:[{&quot;resourceSrn&quot;:{&quot;value&quot;:&quot;srn:aws:lambda::474484658459/Compute/AWSLambda/us-east-2/test&quot;}}]}},&quot;query&quot;:&quot;query fetchRelatedTicketAndFindings($resourceSRN: String!, $findingsFilter: SecurityFindingFilter!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  findings: SecurityFindings(\n    where: $findingsFilter\n    orderBy: {field: findingSeverity, order: DESC}\n    groupBy: [findingId]\n  ) {\n    items(limit: 5) {\n      findingId\n      findingCategory\n      findingDescription\n      findingScore\n      findingSeverity\n      findingPublishedDate\n      findingType\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment RelatedTicketItem on Ticket {\n  srn\n  title\n  templatedTitle\n  status\n  severityNumeric\n  severityCategory\n  lastModified\n  lastSeen\n  firstSeen\n  createdBy\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3c4525b5015bcc916f0b2754acf15c15</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e9ee-4970-815d-28fcfaf3e6c3/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">cbe4e2734751fb07</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3c4525b5015bcc916f0b2754acf15c15-cbe4e2734751fb07-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTicketAndFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_DataProtection_5ThingsToDo_SelectTitle_SelectTickt_T01_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/87ee7ebd-54e8-41e1-9951-ea4fd1cefb83&quot;,&quot;includeRisk&quot;:false},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">cce55b849e3f3d4bb99d6fa72d26e6d5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c774-4a06-83cc-69dee209076d/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">28f9e6edf8f27c77</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">cce55b849e3f3d4bb99d6fa72d26e6d5-28f9e6edf8f27c77-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_DataProtection_5ThingsToDo_SelectTitle_SelectTickt_T02_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/87ee7ebd-54e8-41e1-9951-ea4fd1cefb83&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">634327bb6a018936a17019d81cbcf24b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4ad7-4db5-9cf3-d8852453aa12/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">3d9f416805fbb800</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">634327bb6a018936a17019d81cbcf24b-3d9f416805fbb800-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_DataProtection_5ThingsToDo_SelectTitle_SelectTickt_T03_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/87ee7ebd-54e8-41e1-9951-ea4fd1cefb83&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">5c7f976ef638a6094add7c2cce84c847</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9e15-4709-803b-ccafdc5c13a9/t:646bcf9b/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d776949575062315</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">5c7f976ef638a6094add7c2cce84c847-d776949575062315-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T01_fundamentalCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fundamentalCounts&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;keys&quot;:[&quot;Cloud&quot;,&quot;Label&quot;,&quot;Type&quot;],&quot;labels&quot;:[&quot;Account&quot;,&quot;Audit&quot;,&quot;EventStream&quot;,&quot;Compute&quot;]}},&quot;query&quot;:&quot;query fundamentalCounts($filters: GroupedQueryFilter!) {\n  GroupedQuery(where: $filters) {\n    items {\n      value\n      count\n      hasGroupedResult {\n        key\n        items {\n          value\n          count\n          hasGroupedResult {\n            key\n            items {\n              value\n              count\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:fae8-43d9-9747-c7cc9d1eb21a/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">404ce2c8e78866c4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-404ce2c8e78866c4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fundamentalCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ab38-4497-8fc9-01eff7e6d312/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">80a656ac3c050070</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-80a656ac3c050070-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8e6a-4a32-8f2a-6acca1a9673c/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a0068c741b9fc0ba</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-a0068c741b9fc0ba-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6f2d-4bda-8f62-c71a9a025f65/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">470a8f18832ad409</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-470a8f18832ad409-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T05_getAuditLoggingQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAuditLoggingQuery&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getAuditLoggingQuery($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {resourceType: {order: ASC, precedence: 1}, standardControlSrn: {order: ASC, precedence: 2}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9ecd-4bcd-9f38-ed65e32c3fc7/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2dacc0eb5a038f03</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-2dacc0eb5a038f03-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAuditLoggingQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T06_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0cef-4ad9-8b03-2e391325e24a/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">deea5805f9d21719</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-deea5805f9d21719-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T07_getRecentChanges" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getRecentChanges&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;account&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getRecentChanges($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      standardControlSrn\n      controlPolicyTitle\n      severityCategory\n      account\n      resourceName\n      ticketKey\n      resourceSRN\n      status\n      cloudType\n      swimlaneSrn\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:851a-4e57-8a14-d6fafe8d1a34/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ff53a250dacb7a08</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-ff53a250dacb7a08-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getRecentChanges</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T08_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0372-4ff5-abea-1a96316629e2/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">dde081601b278f0d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-dde081601b278f0d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T09_getPlatform" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getPlatform&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getPlatform($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {resourceType: {order: ASC, precedence: 1}, standardControlSrn: {order: ASC, precedence: 2}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6b40-48df-8381-e0fc8f9b708e/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c6241deb7748cfa5</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-c6241deb7748cfa5-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getPlatform</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T10_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:fda4-409c-97b8-a00ba3f0303e/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">33e11e6d0366c892</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-33e11e6d0366c892-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T11_getDatabasePosture" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDatabasePosture&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getDatabasePosture($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {resourceType: {order: ASC, precedence: 1}, standardControlSrn: {order: ASC, precedence: 2}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:69b6-4a91-ac89-f751010b67d2/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">747d025444c99bf8</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-747d025444c99bf8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDatabasePosture</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T12_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c722-441f-93dc-9a16a33a7f9f/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">64853d26c26b785c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-64853d26c26b785c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T13_getIAM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getIAM&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getIAM($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {standardControlSrn: {order: ASC, precedence: 1}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      standardControlSrn\n      standardControl {\n        name\n        __typename\n      }\n      controlPolicyTitle\n      serviceType\n      serviceTypeFriendlyName\n      ticketKey\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:407b-49b7-abbf-eeda39910088/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">77bc96bf1a3580d0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-77bc96bf1a3580d0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getIAM</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Fundamental_T14_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-03T00:00:00.000Z&quot;,&quot;2023-05-03T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c7ae-4606-854b-9b9d8e9bf5b8/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">85eee86a13a2ce2d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">47b0c8d4356395fd84e3ddf80951352d-85eee86a13a2ce2d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Fundamental_AWS filteration_T01_getNodeTypeCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNodeTypeCounts&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getNodeTypeCounts {\n  GroupedQuery(where: {keys: [Label]}) {\n    key\n    items {\n      value\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">842ed7870ee2e5353b4a3b28a01fe626</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:07dc-46fa-bcf4-7c9f49216212/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">635212e87afd6ab2</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">842ed7870ee2e5353b4a3b28a01fe626-635212e87afd6ab2-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getNodeTypeCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Fundamental_AWS filteration_T02_pivotedQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;pivotedQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100},&quot;query&quot;:&quot;query pivotedQuery($limit: Int) {\n  Compute(\n    where: {and: [{and: [{active: {op: EQ, value: true}}, {cloudType: {op: EQ, value: \&quot;aws\&quot;, caseSensitive: false}}]}, {}, {}]}\n  ) {\n    items(limit: $limit) {\n      name\n      type\n      serviceType\n      runState\n      launchTime\n      createdDate\n      active\n      account\n      region\n      availabilityZone\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c7e9291bdc8c00411b60d8776836342e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d6c8-47ad-8ecc-6b3363631e10/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">de144f28730297f4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c7e9291bdc8c00411b60d8776836342e-de144f28730297f4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">UISearchQuery - unnamed</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Fundamental_AWS filteration_T03_getTags" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTags&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getTags {\n  Tags {\n    count\n    group {\n      key {\n        key\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">193aef91575ca92cd3d4a7416d092e85</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6771-4aaa-b25e-a3ea09cfeaa2/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6ab73a2e8483092a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">193aef91575ca92cd3d4a7416d092e85-6ab73a2e8483092a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTags</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Fundamental_AWS filteration_Card_T01_pivotedQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;pivotedQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100},&quot;query&quot;:&quot;query pivotedQuery($limit: Int) {\n  Compute(\n    where: {and: [{and: [{active: {op: EQ, value: true}}, {cloudType: {op: EQ, value: \&quot;aws\&quot;, caseSensitive: false}}]}, {}, {}]}\n  ) {\n    items(limit: $limit) {\n      name\n      type\n      serviceType\n      runState\n      launchTime\n      createdDate\n      active\n      account\n      region\n      availabilityZone\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">04f63120aeada23a82050dd9f8defbf0</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5a10-4007-99ea-8cb036ed69ac/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">bcb5cfa974707a42</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">04f63120aeada23a82050dd9f8defbf0-bcb5cfa974707a42-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">UISearchQuery - unnamed</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_Fundamental_AWSfilteration_RelationExplorer_T01_pivotedQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;pivotedQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100},&quot;query&quot;:&quot;query pivotedQuery($limit: Int) {\n  Compute(\n    where: {and: [{and: [{active: {op: EQ, value: true}}, {cloudType: {op: EQ, value: \&quot;aws\&quot;, caseSensitive: false}}]}, {}, {}]}\n  ) {\n    items(limit: $limit) {\n      name\n      type\n      serviceType\n      runState\n      launchTime\n      createdDate\n      active\n      account\n      region\n      availabilityZone\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bf1f2809c4b60a38b9db8fb4b0c0fb</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4082-4e2a-8360-32cee3b8384f/t:7e4f0682/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">85480183277c2a82</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bf1f2809c4b60a38b9db8fb4b0c0fb-85480183277c2a82-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">UISearchQuery - unnamed</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_WorkloadProtection_T01_vulnerabilities_by_published_date" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_published_date&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_published_date($filters: SecurityFindingFilter) {\n  SecurityFindingsPublished(\n    where: $filters\n    groupBy: [findingPublishedDate, findingRiskSeverity]\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{findingPublishedDate: DESC}]) {\n      count\n      findingPublishedDate\n      findingRiskSeverity\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">baa64833ff485033e503746e033eec96</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ec33-4d1b-80d8-310fbdc1b5a7/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">11732cfc7e27636d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">baa64833ff485033e503746e033eec96-11732cfc7e27636d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_published_date</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_WorkloadProtection_T02_vulnerabilities_by_time" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_time&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;},&quot;observedAt&quot;:{&quot;op&quot;:&quot;GTE&quot;,&quot;value&quot;:&quot;2023-04-27T00:00:00.000Z&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_time($filters: SecurityFindingFilter) {\n  SecurityFindings(\n    view: raw\n    groupBy: [observedAt, findingRiskSeverity]\n    where: $filters\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{observedAt: DESC}, {findingRiskSeverity: DESC}]) {\n      count @uniq(field: \&quot;findingId\&quot;)\n      findingRiskSeverity\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">bb7eafb2b4cabb457af56dad3c24342f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c913-4942-9296-9e68d312990f/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">62a841e0143cd963</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">bb7eafb2b4cabb457af56dad3c24342f-62a841e0143cd963-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_time</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_WorkloadProtection_T03_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:0,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3779a4cf1c06e5adfa9b5a253a60855e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b50d-45e3-978f-e30348e9625e/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d774f8d544697075</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3779a4cf1c06e5adfa9b5a253a60855e-d774f8d544697075-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Vulnerability_T01_vulnearabilities_by_published_date" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_published_date&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_published_date($filters: SecurityFindingFilter) {\n  SecurityFindingsPublished(\n    where: $filters\n    groupBy: [findingPublishedDate, findingRiskSeverity]\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{findingPublishedDate: DESC}]) {\n      count\n      findingPublishedDate\n      findingRiskSeverity\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">32394620f8c08ba853989484cd551eed</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e5ce-4e82-8acf-78af280c67c2/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">63cba7ff03086cd3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">32394620f8c08ba853989484cd551eed-63cba7ff03086cd3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_published_date</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Vulnerability_vulnerabilities_by_time" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_time&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;},&quot;observedAt&quot;:{&quot;op&quot;:&quot;GTE&quot;,&quot;value&quot;:&quot;2023-04-27T00:00:00.000Z&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_time($filters: SecurityFindingFilter) {\n  SecurityFindings(\n    view: raw\n    groupBy: [observedAt, findingRiskSeverity]\n    where: $filters\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{observedAt: DESC}, {findingRiskSeverity: DESC}]) {\n      count @uniq(field: \&quot;findingId\&quot;)\n      findingRiskSeverity\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">309fdb7389ee3d95cb767c5d4819ef6f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5b62-45e6-af68-21ef7ffafeab/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c780f13b75c9ce65</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">309fdb7389ee3d95cb767c5d4819ef6f-c780f13b75c9ce65-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_time</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Vulnerability_T03_vulnearabilities_group_by_vulnearability" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_group_by_vulnerability&quot;,&quot;variables&quot;:{&quot;offset&quot;:0,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}},&quot;sortBy&quot;:[{&quot;findingRiskIndex&quot;:&quot;DESC&quot;},{&quot;findingId&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query vulnerabilities_group_by_vulnerability($filters: SecurityFindingFilter, $offset: Int, $limit: Int, $sortBy: [SecurityFindingOrder!]!) {\n  SecurityFindings(groupBy: [findingId], where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      findingId\n      findingDescription\n      findingPackage\n      findingScore\n      findingVersion\n      findingFixedVersion\n      findingType\n      findingUrl\n      findingPublishedDate\n      findingScore\n      findingScoreType\n      findingScoreSystem\n      findingScoreVector\n      observedAt\n      swimlaneSRNs\n      environments\n      findingRiskIndex\n      findingRiskSeverity\n      targetScannerTypes\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">035733716be8208547399c19fc11a8ea</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a538-4e5c-bc30-4041fa080f4f/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7051f19374681d87</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">035733716be8208547399c19fc11a8ea-7051f19374681d87-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_group_by_vulnerability</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ContainerImage_T01_vulnerabilities_by_published_date" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_published_date&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;CONTAINER_IMAGE&quot;},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_published_date($filters: SecurityFindingFilter) {\n  SecurityFindingsPublished(\n    where: $filters\n    groupBy: [findingPublishedDate, findingRiskSeverity]\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{findingPublishedDate: DESC}]) {\n      count\n      findingPublishedDate\n      findingRiskSeverity\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d70f850502aa0fc234bf547413aa337b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:29e3-4852-bb54-f572202c8174/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a9652f12f7680a4d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d70f850502aa0fc234bf547413aa337b-a9652f12f7680a4d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_published_date</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ContainerImage_T02_vulnearabilities_by_time" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_time&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;CONTAINER_IMAGE&quot;},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;},&quot;observedAt&quot;:{&quot;op&quot;:&quot;GTE&quot;,&quot;value&quot;:&quot;2023-04-27T00:00:00.000Z&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_time($filters: SecurityFindingFilter) {\n  SecurityFindings(\n    view: raw\n    groupBy: [observedAt, findingRiskSeverity]\n    where: $filters\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{observedAt: DESC}, {findingRiskSeverity: DESC}]) {\n      count @uniq(field: \&quot;findingId\&quot;)\n      findingRiskSeverity\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">18b855a0bef3425eed8643a26f63e770</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:fae1-4246-a72f-b4b5ed20834a/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">40620ae2698836ba</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">18b855a0bef3425eed8643a26f63e770-40620ae2698836ba-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_time</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ContainerImage_T03_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:0,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;CONTAINER_IMAGE&quot;}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">56babca84a73583d949a194a9dbdc291</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6323-4fc4-80f4-c9d8cdfd8417/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">3131c2372f3bcfbd</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">56babca84a73583d949a194a9dbdc291-3131c2372f3bcfbd-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_WorkloadTab_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:0,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">73347b88f6da584eba9d34ed3ca33ea8</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5fad-4360-a8d6-7733d025fe9e/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0bf7311e9ab30f75</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">73347b88f6da584eba9d34ed3ca33ea8-0bf7311e9ab30f75-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_WorkloadTab_Container_Next1_T01_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:10,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">4e92959865282adc0f7e8a533171e82b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:189f-4b1c-90b3-19403a77db42/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">386d75dd1d6cb2e2</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">4e92959865282adc0f7e8a533171e82b-386d75dd1d6cb2e2-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_WorkloadTab_Container_Next2_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:20,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">af15bb75c23d8b01da7a78ea9943a96e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e495-473e-a7e1-46b602d8e742/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5b1cc4182093e895</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">af15bb75c23d8b01da7a78ea9943a96e-5b1cc4182093e895-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_WorkloadTab_Container_Next3_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:30,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">8c45e9afd7a8dd9a0cc6b88c066f83fe</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f542-467f-80d4-8eb347220bd5/t:8a467d78/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">61ae5516517c616d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">8c45e9afd7a8dd9a0cc6b88c066f83fe-61ae5516517c616d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_Workload_FilterLow_T01_vulnerabilites_by_published_date" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_published_date&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;findingRiskSeverity&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;LOW&quot;]},&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_published_date($filters: SecurityFindingFilter) {\n  SecurityFindingsPublished(\n    where: $filters\n    groupBy: [findingPublishedDate, findingRiskSeverity]\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{findingPublishedDate: DESC}]) {\n      count\n      findingPublishedDate\n      findingRiskSeverity\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c700b81768e6835663e9d0b342e97c02</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7272-4e49-8955-7d7938b0f7ac/t:cb5c4600/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">534d0a0927851787</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c700b81768e6835663e9d0b342e97c02-534d0a0927851787-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_published_date</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_Workload_FilterLow_T02_vulnearabilities_by_time" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_time&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;findingRiskSeverity&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;LOW&quot;]},&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;},&quot;observedAt&quot;:{&quot;op&quot;:&quot;GTE&quot;,&quot;value&quot;:&quot;2023-05-01T00:00:00.000Z&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_time($filters: SecurityFindingFilter) {\n  SecurityFindings(\n    view: raw\n    groupBy: [observedAt, findingRiskSeverity]\n    where: $filters\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{observedAt: DESC}, {findingRiskSeverity: DESC}]) {\n      count @uniq(field: \&quot;findingId\&quot;)\n      findingRiskSeverity\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">6e1122279b59c5d3b8a6b7af2d64fe54</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b65e-4aa9-ab9b-9ffe620f304b/t:cb5c4600/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">91ab372765b25417</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">6e1122279b59c5d3b8a6b7af2d64fe54-91ab372765b25417-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_time</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_Workload_FilterLow_T03_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:0,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;hasFinding&quot;:{&quot;findingRiskSeverity&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;LOW&quot;]},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">be006f22e58c0ee199c8338809968479</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:12d9-4053-81e9-81eba0dd3799/t:cb5c4600/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ca749987049b6066</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">be006f22e58c0ee199c8338809968479-ca749987049b6066-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06_Workload_filterLow_Container_Page1_T01_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:10,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;hasFinding&quot;:{&quot;findingRiskSeverity&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;LOW&quot;]},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">61e5970007ecf154c9cad949d64ceb6d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e3f9-4afb-af13-fd2c9ff6cf13/t:cb5c4600/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0b4c5fc46cbe46dd</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">61e5970007ecf154c9cad949d64ceb6d-0b4c5fc46cbe46dd-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07_Workload_filterLow_Container_Page2_T01_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:20,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;hasFinding&quot;:{&quot;findingRiskSeverity&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;LOW&quot;]},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">14cbc0d916960a242acdb33a059f1fce</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a9f5-4ec9-a8fb-d8db54088467/t:cb5c4600/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">93a46a7f07fe029d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">14cbc0d916960a242acdb33a059f1fce-93a46a7f07fe029d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08_Workload_filterLow_Container_Page2_T01_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:30,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;hasFinding&quot;:{&quot;findingRiskSeverity&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;LOW&quot;]},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">61d0f67ed8b2e6723aafeeb2547f22b8</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:113f-4707-9d30-67008595737e/t:cb5c4600/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c9223267bf1e4880</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">61d0f67ed8b2e6723aafeeb2547f22b8-c9223267bf1e4880-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="09_Workload_filterLow_Container_Page4_T01_overview_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;overview_group_by_vm&quot;,&quot;variables&quot;:{&quot;offset&quot;:40,&quot;limit&quot;:10,&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;hasFinding&quot;:{&quot;findingRiskSeverity&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;LOW&quot;]},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;sortBy&quot;:[{&quot;riskIndex&quot;:&quot;DESC&quot;},{&quot;name&quot;:&quot;DESC&quot;}]},&quot;query&quot;:&quot;query overview_group_by_vm($filters: ComputeSummaryFilter!, $limit: Int, $offset: Int, $sortBy: [ComputeSummaryOrder]) {\n  ComputeSummary(where: $filters) {\n    count\n    items(limit: $limit, offset: $offset, orderBy: $sortBy) {\n      riskIndex\n      observedAt\n      active\n      loadId\n      type\n      scanId\n      computeId\n      resourceSrn: srn\n      computeType\n      resourceName: name\n      label\n      resourceCloud: cloudType\n      riskSeverity\n      targetScannerTypes: scannerTypes\n      swimlaneSRNs\n      environments\n      resourceProperties\n      region\n      serviceType\n      resourceAccount: account\n      resourceAccountName: accountName\n      computeImage\n      tagSet\n      vpcId\n      osName\n      countLow\n      countMedium\n      countHigh\n      countCritical\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2bb9a2768e87c52e443073dc4bb7bc58</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:193f-4dde-9713-aab155ced229/t:cb5c4600/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">405a60b1bafd45cb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2bb9a2768e87c52e443073dc4bb7bc58-405a60b1bafd45cb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">overview_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T01_fetchStandards" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchStandards&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchStandards {\n  Standards {\n    items(limit: -1) {\n      ...fields\n      contains {\n        items(limit: -1) {\n          ...fields\n          containedBy {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          contains {\n            items(limit: -1) {\n              ...fields\n              containedBy {\n                items {\n                  srn\n                  __typename\n                }\n                __typename\n              }\n              ... on Standardcontrol {\n                mapsTo {\n                  items(limit: -1) {\n                    srn\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment fields on Standardinterface {\n  name\n  description\n  srn\n  orgID\n  resourceId\n  __typename\n  ... on Standard {\n    color\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:819e-4352-9f73-cd85a67569a8/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b44af371f032eb39</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-b44af371f032eb39-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchStandards</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T02_getObjectives" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getObjectives&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getObjectives {\n  SonraiObjectives {\n    items {\n      srn\n      resourceId\n      name\n      description\n      createdBy\n      definedControlFrameworks {\n        controlFrameworkSrn\n        controlFrameworkOrder\n        __typename\n      }\n      appliedControlFrameworks {\n        items {\n          srn\n          swimlaneSRNs\n          contains {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="cache-control" elementType="Header">
                <stringProp name="Header.name">cache-control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">841f90ee1ef7f319</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5d10-48fa-8543-bfe21a492384/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-841f90ee1ef7f319-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getObjectives</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T03_check_if_trends_exist" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;check_if_trends_exist&quot;,&quot;variables&quot;:{&quot;today&quot;:&quot;2023-05-05T00:00&quot;},&quot;query&quot;:&quot;query check_if_trends_exist($today: DateTime) {\n  trendCount: PolicyTrends(\n    where: {dateTime: {op: EQ, value: $today}}\n    groupby: {fields: [\&quot;id\&quot;]}\n  ) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:89bc-4c55-8d1c-0a57ee57fa2e/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7a0bac95b68d6768</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-7a0bac95b68d6768-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">check_if_trends_exist</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T04_compliance_issue_by_security_area" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_issues_by_security_area&quot;,&quot;variables&quot;:{&quot;pastFilters&quot;:{&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-04-27T12:48:19.184Z&quot;}},&quot;currentFilters&quot;:{&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:48:19.184Z&quot;}}},&quot;query&quot;:&quot;query compliance_issues_by_security_area($pastFilters: PolicyTrendsFilter, $currentFilters: PolicyTrendsFilter) {\n  current: PolicyTrends(\n    where: $currentFilters\n    groupby: {fields: [\&quot;securityArea\&quot;]}\n  ) {\n    items {\n      failing: count\n      securityArea\n      __typename\n    }\n    __typename\n  }\n  past: PolicyTrends(where: $pastFilters, groupby: {fields: [\&quot;securityArea\&quot;]}) {\n    items {\n      failing: count\n      securityArea\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:005e-4267-8ccc-344dc9f11f6c/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">616e2de9f7660ee7</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-616e2de9f7660ee7-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_issues_by_security_area</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T05_compliance_risk_trend" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_risk_trend&quot;,&quot;variables&quot;:{&quot;key&quot;:&quot;standardSrn&quot;,&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-27T12:48:19.184Z&quot;,&quot;2023-05-05T12:48:19.184Z&quot;]}}},&quot;query&quot;:&quot;query compliance_risk_trend($filters: PolicyTrendsFilter, $key: String) {\n  PolicyTrends(where: $filters, groupby: {fields: [$key, \&quot;dateTime\&quot;]}) {\n    items {\n      standardSrn\n      dateTime\n      riskScore\n      standardControlSrn\n      standardFamilySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b0ca-40f8-ae14-7242e19e6921/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8e1a98d41fa6d72a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-8e1a98d41fa6d72a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_risk_trend</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T06_resources_total" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resources_total&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;swimlaneSRNs&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/c87de86d-6448-4312-8141-c67f10ffbc66&quot;,&quot;srn:stage11733927::Swimlane/54346aae-f962-4303-8775-558e376772da&quot;,&quot;srn:stage11733927::Swimlane/632c1e2a-0cf7-4432-b593-4b0c45c082d5&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/5861c490-03f2-4ca8-a060-f822e88dd658&quot;,&quot;srn:stage11733927::Swimlane/846176cf-47c2-4d8f-b094-43e1d5f161fc&quot;,&quot;srn:stage11733927::Swimlane/635c2880-ca1d-4434-92a4-c7feaf74ae53&quot;,&quot;srn:stage11733927::Swimlane/4f7e22fa-6c07-41bc-943d-23ad332ddf18&quot;,&quot;srn:stage11733927::Swimlane/c177456e-edcf-4bad-aeac-2e7834afd322&quot;,&quot;srn:stage11733927::Swimlane/be0a8d40-d422-4eb4-a940-d95da8486981&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/9057a678-a9c9-4088-ac95-f42d99e20d45&quot;,&quot;srn:stage11733927::Swimlane/8ffcd427-b034-4080-9feb-74abe4a2bc1a&quot;,&quot;srn:stage11733927::Swimlane/17dce178-87b1-4b25-be32-ce58a03cffd7&quot;,&quot;srn:stage11733927::Swimlane/60b72733-a220-4260-8ed1-66671f59597e&quot;,&quot;srn:stage11733927::Swimlane/798d6f98-48ac-4a71-b704-3765e39d5938&quot;,&quot;srn:stage11733927::Swimlane/7bc365e5-b897-4b58-8753-be85e03573f6&quot;,&quot;srn:stage11733927::Swimlane/7e986fc7-7db9-475c-898b-c666b1c7411a&quot;,&quot;srn:stage11733927::Swimlane/d8db091e-0147-40fe-bef0-08f2f5d172cf&quot;,&quot;srn:stage11733927::Swimlane/a459fece-58ef-49e2-9779-357f876e15e9&quot;,&quot;srn:stage11733927::Swimlane/a6736f91-4891-4e61-b96d-7ca3d9ff25f7&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/2c9894ff-d4de-4d83-9557-630d70634d8a&quot;,&quot;srn:stage11733927::Swimlane/0fccef66-2e58-4164-ae72-cf6528270022&quot;,&quot;srn:stage11733927::Swimlane/082a0e22-5dad-41ee-b7ab-15e567119797&quot;,&quot;srn:stage11733927::Swimlane/882f219e-e3aa-453e-b997-91e8e0b5516e&quot;,&quot;srn:stage11733927::Swimlane/f47a8e25-188a-4c9d-91d6-1a54883e9fa2&quot;,&quot;srn:stage11733927::Swimlane/a766f0c1-f619-4fba-94a9-498aeb81624c&quot;,&quot;srn:stage11733927::Swimlane/edb2917d-81a3-4b74-9e22-1af5f507a2fe&quot;,&quot;srn:stage11733927::Swimlane/d84a67d6-760c-4a6a-924b-c8f46c9d5360&quot;,&quot;srn:stage11733927::Swimlane/57cdd790-cb15-4213-a618-d7306ae5e595&quot;,&quot;srn:stage11733927::Swimlane/454d1176-305e-40c3-ab66-c6fdac382a1d&quot;,&quot;srn:stage11733927::Swimlane/00b2a8b9-345b-40eb-abe4-0d74832b3cfb&quot;,&quot;srn:stage11733927::Swimlane/525ec320-5276-4bbc-b8bc-89feeeb14328&quot;,&quot;srn:stage11733927::Swimlane/f5c522fa-e7f4-4be4-8f0e-469e4f603f36&quot;,&quot;srn:stage11733927::Swimlane/94eab80b-4b32-46c2-9ee2-20c7e898eeb3&quot;,&quot;srn:stage11733927::Swimlane/3fc23896-66b4-4bbd-925d-a977ab832acc&quot;,&quot;srn:stage11733927::Swimlane/7c2896dc-7604-4f5b-bc4e-0a0034d061d2&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;,&quot;srn:stage11733927::Swimlane/2a6bd270-2f19-4535-8244-014b2e43be49&quot;,&quot;srn:stage11733927::Swimlane/6720e478-06db-444d-a19f-42b61ba08d6b&quot;,&quot;srn:stage11733927::Swimlane/52d5c2a5-9132-44d9-8eb8-1386b5bb8dc4&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/5c8ebc78-17e2-49cb-acc7-fb200922d32a&quot;,&quot;srn:stage11733927::Swimlane/876ed902-5674-475d-9f94-8466a06c5625&quot;,&quot;srn:stage11733927::Swimlane/054e6112-5c09-4a64-806f-fdc03d4887da&quot;,&quot;srn:stage11733927::Swimlane/ba3b5b6e-9c31-4053-b37a-03d2dd0d558a&quot;,&quot;srn:stage11733927::Swimlane/e058b72f-904d-428d-9225-ea92e9166a9d&quot;,&quot;srn:stage11733927::Swimlane/d622d287-90d2-49d1-add1-22fdbb5cc4d0&quot;,&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;,&quot;srn:stage11733927::Swimlane/81a239ab-ac92-4b0d-899d-74c35e600b2a&quot;,&quot;srn:stage11733927::Swimlane/6579051f-fc8a-46e7-882a-0cde2219f9ef&quot;,&quot;srn:stage11733927::Swimlane/24f4367c-8a0e-4905-8811-0726d4d112bd&quot;,&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/6024d0eb-d1bb-4d48-9fd3-f96fff0e1d2e&quot;,&quot;srn:stage11733927::Swimlane/e55fb989-dbe7-46f7-8fa4-957c7e4acb52&quot;,&quot;srn:stage11733927::Swimlane/05fe70d3-183b-4452-b0f5-2e8f2aeb5996&quot;,&quot;srn:stage11733927::Swimlane/186b2a2d-4b46-4639-a942-bd396c53bd67&quot;,&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/a9443082-562d-4269-a53d-fba35565b4ce&quot;,&quot;srn:stage11733927::Swimlane/5e06ca2b-15b9-4654-99c0-2f2731b55e96&quot;,&quot;srn:stage11733927::Swimlane/55773a02-470e-4cf8-95de-2845ef4408d2&quot;,&quot;srn:stage11733927::Swimlane/ac7784fd-bd3d-4966-9bac-610c39053e99&quot;,&quot;srn:stage11733927::Swimlane/ff34414f-e6d4-4b25-a45c-05c3d603dec9&quot;,&quot;srn:stage11733927::Swimlane/538951ca-f147-4685-90f1-083473ebba0e&quot;,&quot;srn:stage11733927::Swimlane/3ace1654-4a66-45da-9b3d-78d7b24583d2&quot;,&quot;srn:stage11733927::Swimlane/4dfead77-670a-4c66-b1da-81ed07092089&quot;,&quot;srn:stage11733927::Swimlane/d470e390-13f2-4859-97d6-2b2bb4fc3cba&quot;,&quot;srn:stage11733927::Swimlane/f8e036fd-4c39-4abf-b142-24a7c13adf91&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;]}}},&quot;query&quot;:&quot;query resources_total($filters: ResourceFilter) {\n  Resources(where: $filters) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2e7b-415d-a0ce-25d9cf34fe77/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">21f0b3bd7eeff54b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-21f0b3bd7eeff54b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resources_total</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T07_policy_compliance_donut" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;policy_compliance_donut&quot;,&quot;variables&quot;:{&quot;failedFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:48:19.184Z&quot;}},&quot;totalFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:48:19.184Z&quot;}}},&quot;query&quot;:&quot;query policy_compliance_donut($failedFilters: PolicyTrendsFilter, $totalFilters: PolicyTrendsFilter) {\n  failed: PolicyTrends(where: $failedFilters, groupby: {fields: [\&quot;policySrn\&quot;]}) {\n    count\n    __typename\n  }\n  total: PolicyTrends(where: $totalFilters, groupby: {fields: [\&quot;id\&quot;]}) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:898e-4683-acc7-1b32f0fbcf2e/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">eb5d6cb26e257092</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-eb5d6cb26e257092-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">policy_compliance_donut</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T08_riskCountsV2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;riskCountsV2&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;offset&quot;:0,&quot;sort&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}],&quot;filter&quot;:{&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;}},&quot;includeRollup&quot;:{&quot;status&quot;:true,&quot;environment&quot;:true}},&quot;query&quot;:&quot;query riskCountsV2($filter: TicketRollupFilter!, $includeRollup: TicketRollupIncludeRollup!, $limit: Long = 100, $offset: Long = 0, $sort: [TicketRollupOrder] = [{riskScore: {order: ASC}}]) {\n  TicketRollups(where: $filter, includeRollup: $includeRollup) {\n    items(limit: $limit, offset: $offset, orderBy: $sort) {\n      count\n      severityCategory\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:be8b-4125-bc84-743a769077d1/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f0d7affca857cef7</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-f0d7affca857cef7-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">riskCountsV2</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Compliance_T09_compliance_coverage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_coverage&quot;,&quot;variables&quot;:{&quot;key&quot;:&quot;standardSrn&quot;,&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:48:19.184Z&quot;}}},&quot;query&quot;:&quot;query compliance_coverage($filters: PolicyTrendsFilter, $key: String) {\n  compliance_coverage: PolicyTrends(\n    where: $filters\n    groupby: {fields: [$key, \&quot;id\&quot;]}\n  ) {\n    items {\n      standardSrn\n      riskLevel\n      riskScore\n      standardControlSrn\n      standardFamilySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6bd8-46f3-9fcf-1ff34384c224/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">82168fde98ddcd4c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9a1d1349d4b401365a629486176045f9-82168fde98ddcd4c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_coverage</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_ComplianceStandard_T01_compliance_issues_by_security_area" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_issues_by_security_area&quot;,&quot;variables&quot;:{&quot;pastFilters&quot;:{&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-04-27T12:48:52.003Z&quot;}},&quot;currentFilters&quot;:{&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:48:52.003Z&quot;}}},&quot;query&quot;:&quot;query compliance_issues_by_security_area($pastFilters: PolicyTrendsFilter, $currentFilters: PolicyTrendsFilter) {\n  current: PolicyTrends(\n    where: $currentFilters\n    groupby: {fields: [\&quot;securityArea\&quot;]}\n  ) {\n    items {\n      failing: count\n      securityArea\n      __typename\n    }\n    __typename\n  }\n  past: PolicyTrends(where: $pastFilters, groupby: {fields: [\&quot;securityArea\&quot;]}) {\n    items {\n      failing: count\n      securityArea\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">4ba80204fe59bc52f492f61f63780dd5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a4c0-4a2f-8ecf-1bc220b7abb8/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a0a0fe204ee548ca</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">4ba80204fe59bc52f492f61f63780dd5-a0a0fe204ee548ca-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_issues_by_security_area</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_ComplianceStandard_T02_compliance_risk_trend" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_risk_trend&quot;,&quot;variables&quot;:{&quot;key&quot;:&quot;standardFamilySrn&quot;,&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-27T12:48:52.003Z&quot;,&quot;2023-05-05T12:48:52.003Z&quot;]}}},&quot;query&quot;:&quot;query compliance_risk_trend($filters: PolicyTrendsFilter, $key: String) {\n  PolicyTrends(where: $filters, groupby: {fields: [$key, \&quot;dateTime\&quot;]}) {\n    items {\n      standardSrn\n      dateTime\n      riskScore\n      standardControlSrn\n      standardFamilySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">0609e53d768e20e2b2fdbd2ce541d197</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e07a-4d82-87f9-f3f0f8f6bc1b/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">07f498047bb0e9f5</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">0609e53d768e20e2b2fdbd2ce541d197-07f498047bb0e9f5-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_risk_trend</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_ComplianceStandard_T03_policy_compliance_donut" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;policy_compliance_donut&quot;,&quot;variables&quot;:{&quot;failedFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:48:52.003Z&quot;}},&quot;totalFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:48:52.003Z&quot;}}},&quot;query&quot;:&quot;query policy_compliance_donut($failedFilters: PolicyTrendsFilter, $totalFilters: PolicyTrendsFilter) {\n  failed: PolicyTrends(where: $failedFilters, groupby: {fields: [\&quot;policySrn\&quot;]}) {\n    count\n    __typename\n  }\n  total: PolicyTrends(where: $totalFilters, groupby: {fields: [\&quot;id\&quot;]}) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">202d0e9a1fb4c7255d481bdcf0239c4f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4f1f-4a3c-866b-17bc885d08fe/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a1de67ccd6f28931</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">202d0e9a1fb4c7255d481bdcf0239c4f-a1de67ccd6f28931-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">policy_compliance_donut</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_ComplianceStandard_T04_riskCountsV2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;riskCountsV2&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;offset&quot;:0,&quot;sort&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}],&quot;filter&quot;:{&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;}},&quot;includeRollup&quot;:{&quot;status&quot;:true,&quot;standardSrn&quot;:true,&quot;environment&quot;:true}},&quot;query&quot;:&quot;query riskCountsV2($filter: TicketRollupFilter!, $includeRollup: TicketRollupIncludeRollup!, $limit: Long = 100, $offset: Long = 0, $sort: [TicketRollupOrder] = [{riskScore: {order: ASC}}]) {\n  TicketRollups(where: $filter, includeRollup: $includeRollup) {\n    items(limit: $limit, offset: $offset, orderBy: $sort) {\n      count\n      severityCategory\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d6c4cb91efc48ee5f5ca23f93d925c0b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c525-4a94-9890-37f7231ece9a/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c2693515585c1073</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d6c4cb91efc48ee5f5ca23f93d925c0b-c2693515585c1073-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">riskCountsV2</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_ComplianceStandard_T05_compliance_coverage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_coverage&quot;,&quot;variables&quot;:{&quot;key&quot;:&quot;standardFamilySrn&quot;,&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:48:52.003Z&quot;}}},&quot;query&quot;:&quot;query compliance_coverage($filters: PolicyTrendsFilter, $key: String) {\n  compliance_coverage: PolicyTrends(\n    where: $filters\n    groupby: {fields: [$key, \&quot;id\&quot;]}\n  ) {\n    items {\n      standardSrn\n      riskLevel\n      riskScore\n      standardControlSrn\n      standardFamilySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">6cb52888db740988ba65a96edf3d452f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7c7d-47bd-8a15-faf7e4255b11/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">71063f4982cb0f86</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">6cb52888db740988ba65a96edf3d452f-71063f4982cb0f86-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_coverage</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T01_compliance_issues_by_security_area" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_issues_by_security_area&quot;,&quot;variables&quot;:{&quot;pastFilters&quot;:{&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-04-27T12:49:17.666Z&quot;}},&quot;currentFilters&quot;:{&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:49:17.666Z&quot;}}},&quot;query&quot;:&quot;query compliance_issues_by_security_area($pastFilters: PolicyTrendsFilter, $currentFilters: PolicyTrendsFilter) {\n  current: PolicyTrends(\n    where: $currentFilters\n    groupby: {fields: [\&quot;securityArea\&quot;]}\n  ) {\n    items {\n      failing: count\n      securityArea\n      __typename\n    }\n    __typename\n  }\n  past: PolicyTrends(where: $pastFilters, groupby: {fields: [\&quot;securityArea\&quot;]}) {\n    items {\n      failing: count\n      securityArea\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d2edd4468ccbb6c680b5c8448c9c674d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2254-4cc9-826f-b8a563bb886a/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b03217277b5d4c8c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d2edd4468ccbb6c680b5c8448c9c674d-b03217277b5d4c8c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_issues_by_security_area</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T02_compliance_risk_trend" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_risk_trend&quot;,&quot;variables&quot;:{&quot;key&quot;:&quot;standardControlSrn&quot;,&quot;filters&quot;:{&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-27T12:49:17.666Z&quot;,&quot;2023-05-05T12:49:17.666Z&quot;]}}},&quot;query&quot;:&quot;query compliance_risk_trend($filters: PolicyTrendsFilter, $key: String) {\n  PolicyTrends(where: $filters, groupby: {fields: [$key, \&quot;dateTime\&quot;]}) {\n    items {\n      standardSrn\n      dateTime\n      riskScore\n      standardControlSrn\n      standardFamilySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">fd0f63f76c5a27ba08ef6e4bba6be933</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9b58-4eff-aa31-64e0f5bd62ae/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7f3f9bd8d9172b65</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">fd0f63f76c5a27ba08ef6e4bba6be933-7f3f9bd8d9172b65-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_risk_trend</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T03_policy_compliance_donut" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;policy_compliance_donut&quot;,&quot;variables&quot;:{&quot;failedFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:49:17.666Z&quot;}},&quot;totalFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:49:17.666Z&quot;}}},&quot;query&quot;:&quot;query policy_compliance_donut($failedFilters: PolicyTrendsFilter, $totalFilters: PolicyTrendsFilter) {\n  failed: PolicyTrends(where: $failedFilters, groupby: {fields: [\&quot;policySrn\&quot;]}) {\n    count\n    __typename\n  }\n  total: PolicyTrends(where: $totalFilters, groupby: {fields: [\&quot;id\&quot;]}) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">25e42c83d50a1f3a98df6914bdc1a4b8</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:86c3-412c-bc27-0460fffc9262/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a6e414ed91eff34d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">25e42c83d50a1f3a98df6914bdc1a4b8-a6e414ed91eff34d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">policy_compliance_donut</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T04_riskCountsV2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;riskCountsV2&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;offset&quot;:0,&quot;sort&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}],&quot;filter&quot;:{&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;}},&quot;includeRollup&quot;:{&quot;status&quot;:true,&quot;standardSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;environment&quot;:true}},&quot;query&quot;:&quot;query riskCountsV2($filter: TicketRollupFilter!, $includeRollup: TicketRollupIncludeRollup!, $limit: Long = 100, $offset: Long = 0, $sort: [TicketRollupOrder] = [{riskScore: {order: ASC}}]) {\n  TicketRollups(where: $filter, includeRollup: $includeRollup) {\n    items(limit: $limit, offset: $offset, orderBy: $sort) {\n      count\n      severityCategory\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b5b4de2ae3ccd0e4aecfc4e7aa297902</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8840-4f7a-8963-32eee894f517/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5caa504d07ce8184</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b5b4de2ae3ccd0e4aecfc4e7aa297902-5caa504d07ce8184-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">riskCountsV2</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T05_compliance_coverage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_coverage&quot;,&quot;variables&quot;:{&quot;key&quot;:&quot;standardControlSrn&quot;,&quot;filters&quot;:{&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-05-05T12:49:17.666Z&quot;}}},&quot;query&quot;:&quot;query compliance_coverage($filters: PolicyTrendsFilter, $key: String) {\n  compliance_coverage: PolicyTrends(\n    where: $filters\n    groupby: {fields: [$key, \&quot;id\&quot;]}\n  ) {\n    items {\n      standardSrn\n      riskLevel\n      riskScore\n      standardControlSrn\n      standardFamilySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f452572f97acdf7ecb991d17a11bc6d5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:12ce-4e24-8aa9-137365069e32/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">4ce7107067c69736</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f452572f97acdf7ecb991d17a11bc6d5-4ce7107067c69736-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_coverage</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T06_fetchControlPoliciesOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchControlPoliciesOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchControlPoliciesOptions {\n  ControlPolicies {\n    items(limit: -1) {\n      srn\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:74f3-4bae-9ab9-5891b5b60a6f/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">659800030be9d6c9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52-659800030be9d6c9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchControlPoliciesOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T07_fetchCrmTicketKeyOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchCrmTicketKeyOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchCrmTicketKeyOptions {\n  identityOptions: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n  dataOptions: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0126-4513-ba40-bf2bb62cd9f2/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a7d42738ee822b14</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52-a7d42738ee822b14-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchCrmTicketKeyOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T08_groupedTicketGraphQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;groupedTicketsGraphQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;orderBy&quot;:[{&quot;count&quot;:{&quot;order&quot;:&quot;DESC&quot;}}],&quot;controlFrameworkSrn&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;controlFrameworkSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlFrameworkTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlFrameworkEnabled&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:true},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;maturityArea&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;objectiveSrn&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;objectiveSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;objectiveName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;ticketKey&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;resourceSRN&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;resourceType&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;severityCategory&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;swimlaneSrns&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;controlFrameworkSrn_includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true},&quot;maturityArea_includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true},&quot;objectiveSrn_includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true},&quot;ticketKey_includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true},&quot;resourceSRN_includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true},&quot;resourceType_includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true},&quot;severityCategory_includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true},&quot;swimlaneSrns_includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true}},&quot;query&quot;:&quot;query groupedTicketsGraphQuery($limit: Long = 100, $orderBy: [TicketRollupOrder] = [{count: {order: DESC}}], $controlFrameworkSrn: TicketRollupFilter!, $maturityArea: TicketRollupFilter!, $objectiveSrn: TicketRollupFilter!, $resourceType: TicketRollupFilter!, $resourceSRN: TicketRollupFilter!, $severityCategory: TicketRollupFilter!, $ticketKey: TicketRollupFilter!, $swimlaneSrns: TicketRollupFilter!, $controlFrameworkSrn_includeRollup: TicketRollupIncludeRollup!, $maturityArea_includeRollup: TicketRollupIncludeRollup!, $objectiveSrn_includeRollup: TicketRollupIncludeRollup!, $resourceType_includeRollup: TicketRollupIncludeRollup!, $resourceSRN_includeRollup: TicketRollupIncludeRollup!, $severityCategory_includeRollup: TicketRollupIncludeRollup!, $ticketKey_includeRollup: TicketRollupIncludeRollup!, $swimlaneSrns_includeRollup: TicketRollupIncludeRollup!) {\n  controlFrameworkSrn: TicketRollups(\n    where: $controlFrameworkSrn\n    includeRollup: $controlFrameworkSrn_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  maturityArea: TicketRollups(\n    where: $maturityArea\n    includeRollup: $maturityArea_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  objectiveSrn: TicketRollups(\n    where: $objectiveSrn\n    includeRollup: $objectiveSrn_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  resourceType: TicketRollups(\n    where: $resourceType\n    includeRollup: $resourceType_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  resourceSRN: TicketRollups(\n    where: $resourceSRN\n    includeRollup: $resourceSRN_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  severityCategory: TicketRollups(\n    where: $severityCategory\n    includeRollup: $severityCategory_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  ticketKey: TicketRollups(\n    where: $ticketKey\n    includeRollup: $ticketKey_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  swimlaneSrns: TicketRollups(\n    where: $swimlaneSrns\n    includeRollup: $swimlaneSrns_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n}\n\nfragment ticketRollupFields on TicketRollups {\n  items(limit: $limit, orderBy: $orderBy) {\n    count\n    controlFrameworkSrn\n    maturityArea\n    objectiveSrn\n    ticketKey\n    resourceType\n    resourceSRN\n    severityCategory\n    swimlaneSrn\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:33cd-46f6-a960-fbcb5cb250eb/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">eef0cbc106d8fddd</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52-eef0cbc106d8fddd-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">groupedTicketsGraphQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T09_topRiskPoliciesTicketRollups" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topRiskPoliciesTicketRollups&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;offset&quot;:0,&quot;sort&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}],&quot;filter&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;includeRollup&quot;:{&quot;environment&quot;:true,&quot;standardControlSrn&quot;:true,&quot;standardFamilySrn&quot;:true,&quot;standardSrn&quot;:true,&quot;status&quot;:true}},&quot;query&quot;:&quot;query topRiskPoliciesTicketRollups($filter: TicketRollupFilter!, $includeRollup: TicketRollupIncludeRollup!, $limit: Long = 100, $offset: Long = 0, $sort: [TicketRollupOrder] = [{riskScore: {order: ASC}}]) {\n  TicketRollups(where: $filter, includeRollup: $includeRollup) {\n    items(limit: $limit, offset: $offset, orderBy: $sort) {\n      count\n      riskScore\n      riskScoreNumeric\n      riskScoreDescription\n      ticketKey\n      controlPolicyType\n      controlPolicyTitle\n      controlFrameworkSrn\n      controlFrameworkTitle\n      maturityArea\n      objectiveSrn\n      resourceSRN\n      resourceType\n      severityCategory\n      swimlaneSrn\n      swimlaneTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:852f-4d0d-a61b-43df247bedfd/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">28088a72cd308be9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52-28088a72cd308be9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topRiskPoliciesTicketRollups</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T10_load_content_ticketRollupTitleControlPolicy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;load_content_ticketRollupTitleControlPolicy&quot;,&quot;variables&quot;:{&quot;ids&quot;:[&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/e04e9c3c-c23d-41fe-8d0f-563dd281c197/0ca9b9d0-4602-471a-b77c-5e9cee6aa8a3&quot;,&quot;srn:supersonrai::ControlPolicy/89ee1ac9-0dd3-405b-b10e-db7e93c68090/a4bd3be7-2ddc-495d-ae9c-870b48eaecb9&quot;,&quot;srn:supersonrai::ControlPolicy/3bce1e61-ffd0-4d00-a3da-132965f16183&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/f716364f-a82d-4b67-9c24-774a7728cd90&quot;,&quot;srn:supersonrai::ControlPolicy/026763a2-712b-45c5-8048-9f4cc76351e1&quot;,&quot;srn:supersonrai::ControlPolicy/e04e9c3c-c23d-41fe-8d0f-563dd281c197/5736a997-2f59-4849-af8c-17f2b05b57fa&quot;,&quot;srn:supersonrai::ControlPolicy/00d04910-1449-464b-96fa-81f31ba9af4b/e8d99cc2-8e3b-4c69-876b-bb47a84ef7cc&quot;,&quot;srn:supersonrai::ControlPolicy/d62b338a-078f-4735-838b-47a04c4c6886&quot;,&quot;srn:supersonrai::ControlPolicy/f716364f-a82d-4b67-9c24-774a7728cd90/3edc9ed7-17be-45fc-9d49-fa985ae52939&quot;,&quot;srn:supersonrai::ControlPolicy/89ee1ac9-0dd3-405b-b10e-db7e93c68090/2cfab2c7-64bc-46d2-827b-79edc04a5625&quot;,&quot;srn:supersonrai::ControlPolicy/901f88fa-e44f-46dc-a4f2-e0b48623ac0b&quot;,&quot;srn:supersonrai::ControlPolicy/488f8ddb-93aa-471c-bf2e-c9ccef129c33/63307f4a-5556-49f6-83d1-88e0b3ddb39c&quot;,&quot;srn:supersonrai::ControlPolicy/eccacb7a-22f3-44f7-b227-e935e2545fd7/ea0824f8-0bc2-470c-9f66-069305ffdfb6&quot;,&quot;srn:supersonrai::ControlPolicy/eccacb7a-22f3-44f7-b227-e935e2545fd7/da35efa9-0801-4141-93ae-bd7affd2ea82&quot;,&quot;srn:supersonrai::ControlPolicy/e276ab67-c549-4a95-a3da-b7f3ca6355c5&quot;]},&quot;query&quot;:&quot;query load_content_ticketRollupTitleControlPolicy($ids: [String]) {\n  ControlPolicies(where: {srn: {op: IN_LIST, values: $ids}}) {\n    items {\n      ...ticketRollupTitleControlPolicy\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ticketRollupTitleControlPolicy on Controlpolicy {\n  srn\n  title\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5244-4106-831f-3497e3eeb88b/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5769f5e1ef3181af</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c4d4c80cebd12fb1e043a55aab733a52-5769f5e1ef3181af-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">load_content_ticketRollupTitleControlPolicy</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_ComplianceStandard_SelectRecordFromFamily_T11_fetchResourceForMaturityIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchResourcesForMaturityIssues&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-05f4ca60f44b813dc&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-af07a0ec&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-ad69b093&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-802834cf&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-530de519&quot;,&quot;srn:aws:ec2::080189833334/NetworkPolicy/sg-75b2e406&quot;,&quot;srn:aws:ec2::380873608913/NetworkPolicy/sg-073c4eaf951f5020d&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-d30697bc&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-c9dd9bfb&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-5506061f&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-d3c9d29a&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-4662884d&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-93e03ec7&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-e03493a3&quot;,&quot;srn:aws:ec2::380873608913/NetworkPolicy/sg-34e02359&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-059ba0a2ad891d3f4&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-67409a22&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-c2b14ec9&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-58ede63c&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-b5d3b3c2&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-06ff06be545370053&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-498f020e&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-bc7005d0&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-c953bb83&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-1b323362&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-400b7e2c&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-5f3ed32e&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-79ed1107&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-b190c9cc&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-df184ac1&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-08f547fc43a6fb68b&quot;,&quot;srn:aws:ec2::380873608913/NetworkPolicy/sg-0b335294e42911fe3&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-0024f206bb0510313&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-051ec8f62947a11b8&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-19641858&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-4f850d04&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-93d60de8&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-c15faee8&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-37cc6557&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-37e1547f&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-97faf2da&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-b5bf5fc4&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-e1ae1a8c&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-f552a8d4&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-1478921f&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-4222233b&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-a903eed8&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-b14b19af&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-c008d694&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-18cf8f57&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-9a351be7&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-d94886ae&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-238fea45&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-2f3ff158&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-9cf33299&quot;,&quot;srn:aws:ec2::080189833334/NetworkPolicy/sg-c538499f&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-1b32fa6c&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-77cad13e&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-a72270d4&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-a60909ec&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-bc203cf3&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-c1fc7186&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-01a02072&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-26707d78&quot;,&quot;srn:aws:ec2::080189833334/NetworkPolicy/sg-084d6554ffde24fc1&quot;,&quot;srn:aws:ec2::380873608913/NetworkPolicy/sg-073cfb94f9e96f6b8&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-b0e656d7&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-01eb5bee4b1b693b5&quot;,&quot;srn:aws:ec2::080189833334/NetworkPolicy/sg-088848816c8c03e35&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-01652570&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-b6f2e4d3&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-0a4529d25f832e981&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-2fec986c&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-43a1923a&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-d18816bc&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-6efa6722&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-9df4fad7&quot;,&quot;srn:aws:ec2::437154727976/NetworkPolicy/sg-aa8cdbda&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-f278e2b9&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-1e753e62&quot;,&quot;srn:aws:ec2::380873608913/NetworkPolicy/sg-023d619192581cf43&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-4e01aa39&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-f677648e&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-5e7de328&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-a679f2df&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-a73b22c1&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-8bef25f6&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-df05c486&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-a6e519d8&quot;,&quot;srn:aws:ec2::474484658459/NetworkPolicy/sg-fc397b9f&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-09d32ced4c4ea05f4&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-0f9534078efad4eb7&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-19bbde7f&quot;,&quot;srn:aws:ec2::577945324761/NetworkPolicy/sg-37bde44a&quot;,&quot;srn:aws:ec2::380873608913/NetworkPolicy/sg-05ad60e60eb28eb6c&quot;,&quot;srn:aws:ec2::080189833334/NetworkPolicy/sg-582d673e&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-939e9ed9&quot;,&quot;srn:aws:ec2::212901178159/NetworkPolicy/sg-0cf4afb7647bbc38a&quot;,&quot;srn:aws:ec2::212901178159/NetworkPolicy/sg-019d46a29693ae162&quot;,&quot;srn:aws:ec2::080189833334/NetworkPolicy/sg-07a46e670da9f1678&quot;]},&quot;query&quot;:&quot;query fetchResourcesForMaturityIssues($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items(limit: -1) {\n      srn\n      name\n      friendlyName\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c32175c59ff3440cc3bdd1223ab02856</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7a30-4dc8-a821-531c9898a22c/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">58e3b89f99a0e22c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c32175c59ff3440cc3bdd1223ab02856-58e3b89f99a0e22c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchResourcesForMaturityIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_ComplianceStandard_Control_T01_loadSingleTicketForMaturityLink" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;loadSingleTicketForMaturityLink&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardControl/24a1a15a-e51e-0bd4-f640-e0f5fc4b8324&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/a3a8a9c3-fe1f-3dcf-3035-7c73cdc51f8e&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/faa491ab-cb2e-491b-8aed-985185d4fdca&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;ticketKey&quot;:{&quot;value&quot;:&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;},&quot;controlPolicyTitle&quot;:{&quot;value&quot;:&quot;Restrict Administrative Permissions of AWS Compute Instances with inbound access from the internet (Sonrai-299)&quot;}}},&quot;query&quot;:&quot;query loadSingleTicketForMaturityLink($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items {\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">244eeddab418eddb8472bf4b3be93841</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:11d1-4e91-a28b-0af23678eef0/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">bccc5bd31fcc3197</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">244eeddab418eddb8472bf4b3be93841-bccc5bd31fcc3197-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">loadSingleTicketForMaturityLink</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_ComplianceStandard_Control_T02_fetchTicketDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketDetails&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/5071c598-fe8e-4fa1-bb0c-71aa71d54690&quot;,&quot;includeRisk&quot;:false},&quot;query&quot;:&quot;query fetchTicketDetails($srn: String!, $includeRisk: Boolean!) {\n  Tickets(where: {srn: {value: $srn}}) {\n    items(limit: 1, includeRisk: $includeRisk) {\n      ...TicketDetails\n      account\n      actionClassification\n      description\n      flag\n      isSnoozed\n      orgName\n      resourceId\n      resourceLabel\n      snoozedUntil\n      transitionDate\n      transitionedBy\n      templateSRN\n      templatedDescription\n      templatedTitle\n      customFields {\n        name\n        type\n        value\n        isMulti\n        __typename\n      }\n      evidence {\n        ...TicketEvidence\n        __typename\n      }\n      actionClassification\n      resource {\n        ...TicketResource\n        __typename\n      }\n      resourceSetFull {\n        srn\n        name\n        friendlyName\n        label\n        __typename\n      }\n      policy {\n        securityAreas\n        srn\n        title\n        description\n        alertingLevelNumeric\n        containedByControlFramework {\n          items {\n            srn\n            __typename\n          }\n          __typename\n        }\n        contains {\n          items {\n            srn\n            name\n            sid\n            ... on Search {\n              query\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketDetails on Ticket {\n  srn\n  title\n  assignedTo\n  createdBy\n  createdDate\n  firstSeen\n  lastSeen\n  lastModified\n  status\n  severityNumeric\n  severityCategory\n  resourceType\n  resourceSRN\n  swimlaneSRNs\n  swimlanes {\n    srn\n    title\n    __typename\n  }\n  ticketKey\n  ticketKeyName\n  ticketType\n  isOperationalized\n  __typename\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n\nfragment TicketEvidence on Evidence {\n  policyEvidence\n  count\n  conditions\n  fieldType\n  boolValue\n  intValue\n  longValue\n  value\n  prevBoolValue\n  prevIntValue\n  prevLongValue\n  prevValue\n  resourceSet\n  path\n  regionSet\n  userAgentSet\n  baseline\n  baselineFull {\n    srn\n    name\n    friendlyName\n    label\n    __typename\n  }\n  pathFull {\n    srn\n    label\n    ... on Resource {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1842b9998176d9bdb264264099912b86</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4236-464c-bffe-ab3a95bee6b7/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1a8c3b55d79fe951</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1842b9998176d9bdb264264099912b86-1a8c3b55d79fe951-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_ComplianceStandard_Control_T03_fetchNextEscalation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchNextEscalation&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::Ticket/5071c598-fe8e-4fa1-bb0c-71aa71d54690&quot;},&quot;query&quot;:&quot;query fetchNextEscalation($srn: String!) {\n  GetNextEscalation(input: {ticktSrn: $srn}) {\n    escalationTime\n    rule {\n      actionType\n      triggerAfterDate\n      assignUser {\n        userSrn\n        __typename\n      }\n      assignRole {\n        ActionRoleType\n        __typename\n      }\n      escalateToBot {\n        botSrn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1b13fb14f231e0fb52cf37523d72064a</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6411-46bd-8fb4-9ebd5dc3206f/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e192d1957f1cfb6c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1b13fb14f231e0fb52cf37523d72064a-e192d1957f1cfb6c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchNextEscalation</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_ComplianceStandard_Control_T04_fetchComments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchComments&quot;,&quot;variables&quot;:{&quot;ticketSrn&quot;:&quot;srn:stage11733927::Ticket/5071c598-fe8e-4fa1-bb0c-71aa71d54690&quot;},&quot;query&quot;:&quot;query fetchComments($ticketSrn: String!) {\n  TicketComments(where: {ticketSrn: {value: $ticketSrn}}) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      body\n      createdDate\n      createdBy\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b08aefd7d80499c37c7a3407b354fc39</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:542e-47a0-9ffd-a4a68cf237b3/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e672b937e15b3b6c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b08aefd7d80499c37c7a3407b354fc39-e672b937e15b3b6c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchComments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_ComplianceStandard_Control_T05_resourceSummary" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourceSummary&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:ec2::613056517323/Compute/EC2/i-0e4da8fb0ad72057a&quot;},&quot;query&quot;:&quot;query resourceSummary($resourceSRN: String) {\n  Entities(where: {srn: {value: $resourceSRN}}) {\n    items {\n      srn\n      label\n      __typename\n      ... on Resource {\n        name\n        friendlyName\n        resourceId\n        swimlaneSRNs\n        importance\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a0c816f9c44322a380cb409e8f84133b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4802-480e-b8f7-aca53168a6de/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b2b9815de036dc32</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a0c816f9c44322a380cb409e8f84133b-b2b9815de036dc32-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourceSummary</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_ComplianceStandard_Control_T06_resourcelookup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcelookup&quot;,&quot;variables&quot;:{&quot;resourceSrns&quot;:[],&quot;limit&quot;:0},&quot;query&quot;:&quot;query resourcelookup($resourceSrns: [String]!, $limit: Int!) {\n  Resources(where: {srn: {op: IN_LIST, values: $resourceSrns}}) {\n    items(limit: $limit) {\n      ...TicketResource\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TicketResource on Resource {\n  account\n  active\n  cloudType\n  country\n  createdDate\n  friendlyName\n  importance\n  label\n  name\n  ... on User {\n    userName\n    __typename\n  }\n  region\n  resourceId\n  srn\n  swimlaneSRNs\n  swimlane {\n    items {\n      srn\n      title\n      createdBy\n      preventionEnabled\n      defaultImportance\n      __typename\n    }\n    __typename\n  }\n  tagSet\n  metadata\n  resourceType: __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">ef544a5915be9026b6bc4a07f5fddbcb</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1550-4048-99d2-963738bfa66d/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">950317c82988d971</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">ef544a5915be9026b6bc4a07f5fddbcb-950317c82988d971-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcelookup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_ComplianceStandard_Control_T07_fetchRelatedTicketAndFindings" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchRelatedTicketAndFindings&quot;,&quot;variables&quot;:{&quot;resourceSRN&quot;:&quot;srn:aws:ec2::613056517323/Compute/EC2/i-0e4da8fb0ad72057a&quot;,&quot;findingsFilter&quot;:{&quot;or&quot;:[{&quot;resourceSrn&quot;:{&quot;value&quot;:&quot;srn:aws:ec2::613056517323/Compute/EC2/i-0e4da8fb0ad72057a&quot;}}]}},&quot;query&quot;:&quot;query fetchRelatedTicketAndFindings($resourceSRN: String!, $findingsFilter: SecurityFindingFilter!) {\n  identity: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Credentials\&quot;, \&quot;Least Privilege\&quot;, \&quot;Privilege Escalation\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  data: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Data Protection\&quot;, \&quot;Encryption\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  network: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Network\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  config: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Audit\&quot;, \&quot;Base Config\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  tvm: Tickets(\n    where: {resourceSRN: {value: $resourceSRN}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;RISK_ACCEPTED\&quot;, \&quot;SNOOZED\&quot;]}, securityArea: {op: IN_LIST, values: [\&quot;Threat &amp; Vuln. Management\&quot;]}}\n  ) {\n    items(limit: 5, orderBy: {severityNumeric: {order: DESC}}) {\n      ...RelatedTicketItem\n      __typename\n    }\n    __typename\n  }\n  findings: SecurityFindings(\n    where: $findingsFilter\n    orderBy: {field: findingSeverity, order: DESC}\n    groupBy: [findingId]\n  ) {\n    items(limit: 5) {\n      findingId\n      findingCategory\n      findingDescription\n      findingScore\n      findingSeverity\n      findingPublishedDate\n      findingType\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment RelatedTicketItem on Ticket {\n  srn\n  title\n  templatedTitle\n  status\n  severityNumeric\n  severityCategory\n  lastModified\n  lastSeen\n  firstSeen\n  createdBy\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">5da58fdc024504e113502461bd7ff76e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a711-45e6-bf26-d74e1640fc92/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f61aa18242e8b346</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">5da58fdc024504e113502461bd7ff76e-f61aa18242e8b346-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchRelatedTicketAndFindings</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_ComplianceStandard_Control_T08_getTicketEvidenceResourceDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketEvidenceResourceDetails&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:aws:ec2::613056517323/Compute/EC2/i-0e4da8fb0ad72057a&quot;,&quot;srn:aws:iam::613056517323/Policy/instanceProfile/FullS3IAM&quot;,&quot;srn:aws:iam::613056517323/Policy/TrustRelationship/role/FullS3IAM/assumed-role&quot;,&quot;srn:aws:iam::613056517323/Role/FullS3IAM&quot;,&quot;srn:aws:iam::613056517323/Policy/ManagedPolicy/IAMFullAccess&quot;,&quot;srn:aws:ec2::613056517323/NetworkInterface/eni-0dafd2a980f2bdd02&quot;,&quot;srn:aws:ec2::613056517323/NetworkPolicy/sg-0685055a172f268c5&quot;,&quot;srn:aws:ec2::613056517323/NetworkPermission/sgr-04aad9542b431bb82&quot;,&quot;srn:sonrai::Protocol/tcp&quot;,&quot;srn:aws:ec2::613056517323/CIDR/131.202.1.3/32&quot;,&quot;srn:sonrai::PortRange/22&quot;,&quot;srn:aws:ec2::613056517323/NetworkSubnet/subnet-b015e4fc&quot;,&quot;srn:aws:ec2::613056517323/Network/vpc-ba3e43c7&quot;,&quot;srn:aws:ec2::613056517323/NetworkComponent/igw-3710b14d&quot;]},&quot;query&quot;:&quot;query getTicketEvidenceResourceDetails($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items {\n      friendlyName\n      name\n      srn\n      friendlyTypeName\n      label\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">4301333ec71bb387a7217adbd6db1730</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:be26-43e0-85af-1aae946a0f4e/t:424e7f2f/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1d85cee99548d4a5</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">4301333ec71bb387a7217adbd6db1730-1d85cee99548d4a5-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketEvidenceResourceDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T01_fetchControlPoliciesOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchControlPoliciesOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchControlPoliciesOptions {\n  ControlPolicies {\n    items(limit: -1) {\n      srn\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5f7a-4eae-a50c-97b50c4e7ba6/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">24266a395fed2580</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-24266a395fed2580-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchControlPoliciesOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T02_getObjectives" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getObjectives&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getObjectives {\n  SonraiObjectives {\n    items {\n      srn\n      resourceId\n      name\n      description\n      createdBy\n      definedControlFrameworks {\n        controlFrameworkSrn\n        controlFrameworkOrder\n        __typename\n      }\n      appliedControlFrameworks {\n        items {\n          srn\n          swimlaneSRNs\n          contains {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="cache-control" elementType="Header">
                <stringProp name="Header.name">cache-control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">da34e6517834503d</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bde3-481c-957a-a29f7b05d771/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-da34e6517834503d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getObjectives</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T03_fetchStandards" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchStandards&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchStandards {\n  Standards {\n    items(limit: -1) {\n      ...fields\n      contains {\n        items(limit: -1) {\n          ...fields\n          containedBy {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          contains {\n            items(limit: -1) {\n              ...fields\n              containedBy {\n                items {\n                  srn\n                  __typename\n                }\n                __typename\n              }\n              ... on Standardcontrol {\n                mapsTo {\n                  items(limit: -1) {\n                    srn\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment fields on Standardinterface {\n  name\n  description\n  srn\n  orgID\n  resourceId\n  __typename\n  ... on Standard {\n    color\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:60c1-41aa-b058-dff08e10d49c/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">02af6e532c1a09a3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-02af6e532c1a09a3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchStandards</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T04_fetchCrmTicketKeyOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchCrmTicketKeyOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchCrmTicketKeyOptions {\n  identityOptions: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n  dataOptions: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bb1e-4477-9640-220de96756d5/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6e806acd90faa0f4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-6e806acd90faa0f4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchCrmTicketKeyOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T05_counPanelAssetInventory" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;counPanelAssetInventory&quot;,&quot;variables&quot;:{&quot;includeAws&quot;:true,&quot;includeAzure&quot;:true,&quot;includeGcp&quot;:true,&quot;includeOci&quot;:true,&quot;swimlaneFilter&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/c87de86d-6448-4312-8141-c67f10ffbc66&quot;,&quot;srn:stage11733927::Swimlane/54346aae-f962-4303-8775-558e376772da&quot;,&quot;srn:stage11733927::Swimlane/632c1e2a-0cf7-4432-b593-4b0c45c082d5&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/5861c490-03f2-4ca8-a060-f822e88dd658&quot;,&quot;srn:stage11733927::Swimlane/846176cf-47c2-4d8f-b094-43e1d5f161fc&quot;,&quot;srn:stage11733927::Swimlane/635c2880-ca1d-4434-92a4-c7feaf74ae53&quot;,&quot;srn:stage11733927::Swimlane/4f7e22fa-6c07-41bc-943d-23ad332ddf18&quot;,&quot;srn:stage11733927::Swimlane/c177456e-edcf-4bad-aeac-2e7834afd322&quot;,&quot;srn:stage11733927::Swimlane/be0a8d40-d422-4eb4-a940-d95da8486981&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/9057a678-a9c9-4088-ac95-f42d99e20d45&quot;,&quot;srn:stage11733927::Swimlane/8ffcd427-b034-4080-9feb-74abe4a2bc1a&quot;,&quot;srn:stage11733927::Swimlane/17dce178-87b1-4b25-be32-ce58a03cffd7&quot;,&quot;srn:stage11733927::Swimlane/60b72733-a220-4260-8ed1-66671f59597e&quot;,&quot;srn:stage11733927::Swimlane/798d6f98-48ac-4a71-b704-3765e39d5938&quot;,&quot;srn:stage11733927::Swimlane/7bc365e5-b897-4b58-8753-be85e03573f6&quot;,&quot;srn:stage11733927::Swimlane/7e986fc7-7db9-475c-898b-c666b1c7411a&quot;,&quot;srn:stage11733927::Swimlane/d8db091e-0147-40fe-bef0-08f2f5d172cf&quot;,&quot;srn:stage11733927::Swimlane/a459fece-58ef-49e2-9779-357f876e15e9&quot;,&quot;srn:stage11733927::Swimlane/a6736f91-4891-4e61-b96d-7ca3d9ff25f7&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/2c9894ff-d4de-4d83-9557-630d70634d8a&quot;,&quot;srn:stage11733927::Swimlane/0fccef66-2e58-4164-ae72-cf6528270022&quot;,&quot;srn:stage11733927::Swimlane/082a0e22-5dad-41ee-b7ab-15e567119797&quot;,&quot;srn:stage11733927::Swimlane/882f219e-e3aa-453e-b997-91e8e0b5516e&quot;,&quot;srn:stage11733927::Swimlane/f47a8e25-188a-4c9d-91d6-1a54883e9fa2&quot;,&quot;srn:stage11733927::Swimlane/a766f0c1-f619-4fba-94a9-498aeb81624c&quot;,&quot;srn:stage11733927::Swimlane/edb2917d-81a3-4b74-9e22-1af5f507a2fe&quot;,&quot;srn:stage11733927::Swimlane/d84a67d6-760c-4a6a-924b-c8f46c9d5360&quot;,&quot;srn:stage11733927::Swimlane/57cdd790-cb15-4213-a618-d7306ae5e595&quot;,&quot;srn:stage11733927::Swimlane/454d1176-305e-40c3-ab66-c6fdac382a1d&quot;,&quot;srn:stage11733927::Swimlane/00b2a8b9-345b-40eb-abe4-0d74832b3cfb&quot;,&quot;srn:stage11733927::Swimlane/525ec320-5276-4bbc-b8bc-89feeeb14328&quot;,&quot;srn:stage11733927::Swimlane/f5c522fa-e7f4-4be4-8f0e-469e4f603f36&quot;,&quot;srn:stage11733927::Swimlane/94eab80b-4b32-46c2-9ee2-20c7e898eeb3&quot;,&quot;srn:stage11733927::Swimlane/3fc23896-66b4-4bbd-925d-a977ab832acc&quot;,&quot;srn:stage11733927::Swimlane/7c2896dc-7604-4f5b-bc4e-0a0034d061d2&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;,&quot;srn:stage11733927::Swimlane/2a6bd270-2f19-4535-8244-014b2e43be49&quot;,&quot;srn:stage11733927::Swimlane/6720e478-06db-444d-a19f-42b61ba08d6b&quot;,&quot;srn:stage11733927::Swimlane/52d5c2a5-9132-44d9-8eb8-1386b5bb8dc4&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/5c8ebc78-17e2-49cb-acc7-fb200922d32a&quot;,&quot;srn:stage11733927::Swimlane/876ed902-5674-475d-9f94-8466a06c5625&quot;,&quot;srn:stage11733927::Swimlane/054e6112-5c09-4a64-806f-fdc03d4887da&quot;,&quot;srn:stage11733927::Swimlane/ba3b5b6e-9c31-4053-b37a-03d2dd0d558a&quot;,&quot;srn:stage11733927::Swimlane/e058b72f-904d-428d-9225-ea92e9166a9d&quot;,&quot;srn:stage11733927::Swimlane/d622d287-90d2-49d1-add1-22fdbb5cc4d0&quot;,&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;,&quot;srn:stage11733927::Swimlane/81a239ab-ac92-4b0d-899d-74c35e600b2a&quot;,&quot;srn:stage11733927::Swimlane/6579051f-fc8a-46e7-882a-0cde2219f9ef&quot;,&quot;srn:stage11733927::Swimlane/24f4367c-8a0e-4905-8811-0726d4d112bd&quot;,&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/6024d0eb-d1bb-4d48-9fd3-f96fff0e1d2e&quot;,&quot;srn:stage11733927::Swimlane/e55fb989-dbe7-46f7-8fa4-957c7e4acb52&quot;,&quot;srn:stage11733927::Swimlane/05fe70d3-183b-4452-b0f5-2e8f2aeb5996&quot;,&quot;srn:stage11733927::Swimlane/186b2a2d-4b46-4639-a942-bd396c53bd67&quot;,&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/a9443082-562d-4269-a53d-fba35565b4ce&quot;,&quot;srn:stage11733927::Swimlane/5e06ca2b-15b9-4654-99c0-2f2731b55e96&quot;,&quot;srn:stage11733927::Swimlane/55773a02-470e-4cf8-95de-2845ef4408d2&quot;,&quot;srn:stage11733927::Swimlane/ac7784fd-bd3d-4966-9bac-610c39053e99&quot;,&quot;srn:stage11733927::Swimlane/ff34414f-e6d4-4b25-a45c-05c3d603dec9&quot;,&quot;srn:stage11733927::Swimlane/538951ca-f147-4685-90f1-083473ebba0e&quot;,&quot;srn:stage11733927::Swimlane/3ace1654-4a66-45da-9b3d-78d7b24583d2&quot;,&quot;srn:stage11733927::Swimlane/4dfead77-670a-4c66-b1da-81ed07092089&quot;,&quot;srn:stage11733927::Swimlane/d470e390-13f2-4859-97d6-2b2bb4fc3cba&quot;,&quot;srn:stage11733927::Swimlane/f8e036fd-4c39-4abf-b142-24a7c13adf91&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;]}},&quot;query&quot;:&quot;query counPanelAssetInventory($includeAws: Boolean = false, $includeAzure: Boolean = false, $includeGcp: Boolean = false, $includeOci: Boolean = false, $swimlaneFilter: StringOperator) {\n  publicClouds: Accounts(\n    where: {and: [{active: {value: true}}, {type: {op: NEQ, value: OCICompartment}}]}\n  ) {\n    items(limit: -1) {\n      cloudType\n      name\n      srn\n      __typename\n    }\n    __typename\n  }\n  ... on Query @include(if: $includeAws) {\n    aws_Identity_User: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: User}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Identity_Group: Groups(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: Group}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Identity_AWSAccessKey: AccessKeys(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: AWSAccessKey}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Identity_SAMLProvider: IdentityProviders(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: SAMLProvider}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_Bucket: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: Bucket}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_Table: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: Table}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_Database: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: Database}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_ReplicationGroup: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: ReplicationGroup}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_EBS: DataStores(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: EBS}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_VPC: Network(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: VPC}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_EC2: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: EC2}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_AWSLambda: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: AWSLambda}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_AWSKubernetesCluster: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: AWSKubernetesCluster}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_CloudFrontDistribution: NetworkComponents(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: CloudFrontDistribution}}]}\n    ) {\n      count\n      __typename\n    }\n    __typename\n  }\n  ... on Query @include(if: $includeAzure) {\n    azure_Identity_AzureTenant: Accounts(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureTenant}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Identity_ServicePrincipal: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: ServicePrincipal}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Identity_ActiveDirectoryUser: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: ActiveDirectoryUser}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Identity_AzureManagedIdentity: IdentityProviders(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureManagedIdentity}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Identity_AzureManagementGroup: OrganizationalUnits(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureManagementGroup}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Data_StorageAccount: DataStores(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: StorageAccount}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Data_FileShare: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: FileShare}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Data_SQLServer: DataStores(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: SQLServer}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Data_MySQL: DataStores(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: MySQL}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_VNET: Network(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: VNET}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_VirtualMachine: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: VirtualMachine}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_AzureSubnet: NetworkSubnet(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureSubnet}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_NetworkLoadBalancer: NetworkComponents(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: NetworkLoadBalancer}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_AzureAppGateway: NetworkComponents(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: AzureAppGateway}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_AzureFunctionTrigger: Triggers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureFunctionTrigger}}]}\n    ) {\n      count\n      __typename\n    }\n    __typename\n  }\n  ... on Query @include(if: $includeGcp) {\n    gcp_Identity_GCPServiceAccount: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GCPServiceAccount}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Identity_GCPService: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GCPService}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Data_GCPStorageBucket: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GCPStorageBucket}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Data_GcpDisk: BlockStorage(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GcpDisk}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Infrastructure_VPC: Network(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: VPC}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Infrastructure_VirtualMachine: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: VirtualMachine}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Infrastructure_GCPSubnetwork: NetworkSubnet(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GCPSubnetwork}}]}\n    ) {\n      count\n      __typename\n    }\n    __typename\n  }\n  ... on Query @include(if: $includeOci) {\n    oci_Identity_OCIUser: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIUser}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Identity_OCIGroup: Groups(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIGroup}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Identity_OCIDynamicGroup: IdentityReferences(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIDynamicGroup}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Data_OCIBucket: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIBucket}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Infrastructure_OCIVCN: Network(\n      where: {and: [{active: {value: true}}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIVCN}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Infrastructure_OCILoadBalancer: NetworkComponents(\n      where: {and: [{active: {value: true}}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCILoadBalancer}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Infrastructure_OCISubnet: NetworkSubnet(\n      where: {and: [{active: {value: true}}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCISubnet}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Infrastructure_OCICompute: Compute(\n      where: {and: [{active: {value: true}}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {op: IN_LIST, values: [OCIInstance, OCIDedicatedVmHost]}}]}\n    ) {\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:41a0-4517-97c8-5df92c2f9460/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">20346f965663bca7</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-20346f965663bca7-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">counPanelAssetInventory</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T06_fetchSummaryPanelData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchSummaryPanelData&quot;,&quot;variables&quot;:{&quot;totalsFilter&quot;:{&quot;swimlaneSrn&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyMetaType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]}},&quot;platformFilter&quot;:{&quot;controlPolicyMetaType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;PLATFORM&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKeyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;identityFilter&quot;:{&quot;controlPolicyMetaType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;IDENTITY&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKeyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;dataFilter&quot;:{&quot;controlPolicyMetaType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;DATA&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKeyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}}},&quot;query&quot;:&quot;query fetchSummaryPanelData($totalsFilter: TicketRollupFilter!, $platformFilter: TicketRollupFilter!, $identityFilter: TicketRollupFilter!, $dataFilter: TicketRollupFilter!) {\n  totals: TicketRollups(where: $totalsFilter, includeRollup: {environment: true}) {\n    items {\n      count\n      riskScore\n      riskScoreDescription\n      riskScoreNumeric\n      controlPolicyMetaType\n      __typename\n    }\n    __typename\n  }\n  platform: TicketRollups(\n    where: $platformFilter\n    includeRollup: {environment: true}\n  ) {\n    items(orderBy: {riskScore: {order: ASC}}, limit: 4) {\n      ...all_the_fields\n      __typename\n    }\n    __typename\n  }\n  identity: TicketRollups(\n    where: $identityFilter\n    includeRollup: {environment: true}\n  ) {\n    items(orderBy: {riskScore: {order: ASC}}, limit: 4) {\n      ...all_the_fields\n      __typename\n    }\n    __typename\n  }\n  data: TicketRollups(where: $dataFilter, includeRollup: {environment: true}) {\n    items(orderBy: {riskScore: {order: ASC}}, limit: 4) {\n      ...all_the_fields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment all_the_fields on TicketRollup {\n  riskScore\n  riskScoreDescription\n  riskScoreNumeric\n  ticketKey\n  ticketKeyName\n  maturityArea\n  count\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:89a8-4caf-a7d7-0c825fb6ad91/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">cd18b5a9d7745025</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-cd18b5a9d7745025-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchSummaryPanelData</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T07_resoucesRiskPanelData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcesRisksPanelData&quot;,&quot;variables&quot;:{&quot;limit&quot;:6,&quot;filter&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceLabel&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;CRITICAL&quot;]}},&quot;orderBy&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}]},&quot;query&quot;:&quot;query resourcesRisksPanelData($filter: TicketRollupFilter!, $orderBy: [TicketRollupOrder], $limit: Long = 6, $preaggregationLimit: Long = 1000) {\n  TicketRollups(where: $filter, includeRollup: {environment: true}) {\n    items(\n      orderBy: $orderBy\n      limit: $limit\n      preaggregationLimit: $preaggregationLimit\n    ) {\n      resourceSRN\n      resourceName\n      resourceType\n      resourceLabel\n      count\n      riskScoreNumeric\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6c64-4c6d-a187-a4ed6af85144/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">562abeb47a8546d9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-562abeb47a8546d9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcesRisksPanelData</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T08_risk_levels_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;risk_levels_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-04T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;PLATFORM&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query risk_levels_by_metatype($metaType: String!, $to: DateTime!, $from: DateTime!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}, status: {op: EQ, value: \&quot;NEW\&quot;}}\n    type: {type: RISK_LEVELS}\n  ) {\n    items {\n      dateTime\n      riskLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3f64-4190-9728-75ec2975ee9f/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">27ecbcef2ecb3f18</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-27ecbcef2ecb3f18-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">risk_levels_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T09_risk_levels_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;risk_levels_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-04T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;IDENTITY&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query risk_levels_by_metatype($metaType: String!, $to: DateTime!, $from: DateTime!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}, status: {op: EQ, value: \&quot;NEW\&quot;}}\n    type: {type: RISK_LEVELS}\n  ) {\n    items {\n      dateTime\n      riskLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b156-4c48-bf82-087d6a3b1d15/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">4c1630e8f82dad6a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-4c1630e8f82dad6a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">risk_levels_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T10_risk_levels_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;risk_levels_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-04T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;DATA&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query risk_levels_by_metatype($metaType: String!, $to: DateTime!, $from: DateTime!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}, status: {op: EQ, value: \&quot;NEW\&quot;}}\n    type: {type: RISK_LEVELS}\n  ) {\n    items {\n      dateTime\n      riskLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5c18-4979-928f-ab88f16fa99b/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">4fbd3cd834a65343</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-4fbd3cd834a65343-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">risk_levels_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Summary_T11_resourceRisksPanelData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcesRisksPanelData&quot;,&quot;variables&quot;:{&quot;limit&quot;:6,&quot;filter&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:azure:ActiveDirectory::1bd233b2-c77b-4210-8821-6d698724bb61/User/1908b5da-b8a4-4dae-ab86-208d5526ed5b&quot;,&quot;srn:azure:ActiveDirectory::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/User/ecbfe352-e633-4a30-8b21-080cef9f7bb6&quot;,&quot;srn:azure:ActiveDirectory::e9f18dc9-c8f5-4b52-9e8f-e30204f0ca2d/User/2a37791a-13c7-4f8b-97e5-350433057b42&quot;,&quot;srn:azure:ActiveDirectory::1bd233b2-c77b-4210-8821-6d698724bb61/User/ae395579-e368-4e31-b2bd-b15268e531f0&quot;,&quot;srn:azure:Microsoft.Storage::1bd233b2-c77b-4210-8821-6d698724bb61/DataContainer//subscriptions/2da0ee37-38e3-4200-a248-95666e13b90e/resourcegroups/controlpolicytest/providers/microsoft.storage/storageaccounts/controlpolicytest31/storagecontainers/control-policy-test-insights-activity-logs&quot;,&quot;srn:aws:iam::474484658459/User/User/adam.leclerc&quot;]}}},&quot;query&quot;:&quot;query resourcesRisksPanelData($filter: TicketRollupFilter!, $orderBy: [TicketRollupOrder], $limit: Long = 6, $preaggregationLimit: Long = 1000) {\n  TicketRollups(where: $filter, includeRollup: {environment: true}) {\n    items(\n      orderBy: $orderBy\n      limit: $limit\n      preaggregationLimit: $preaggregationLimit\n    ) {\n      resourceSRN\n      resourceName\n      resourceType\n      resourceLabel\n      count\n      riskScoreNumeric\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2fb2-4756-be76-61e712fa0754/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8c3f90cba8ee2f4b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b21a12af3c99cfb252e58e3a57e288b4-8c3f90cba8ee2f4b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcesRisksPanelData</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Summary_TicketTrend_T01_ticket_trends_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ticket_trends_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-04T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;PLATFORM&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query ticket_trends_by_metatype($to: DateTime!, $from: DateTime!, $metaType: String!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}}\n    type: {type: DAILY_RATES}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a176c8ce550694f58713e90122428030</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d17b-4ef0-b9f2-48e93bab3447/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ea9d9a8364349c04</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a176c8ce550694f58713e90122428030-ea9d9a8364349c04-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">ticket_trends_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Summary_TicketTrend_T02_ticket_trends_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ticket_trends_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-04T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;IDENTITY&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query ticket_trends_by_metatype($to: DateTime!, $from: DateTime!, $metaType: String!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}}\n    type: {type: DAILY_RATES}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9e28e0b71b90bb1d0dbb916065849cf1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8831-4f90-831f-38d6ef65ec14/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0b85861a6a226d8f</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9e28e0b71b90bb1d0dbb916065849cf1-0b85861a6a226d8f-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">ticket_trends_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Summary_TicketTrend_T03_ticket_trends_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ticket_trends_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-04T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;DATA&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query ticket_trends_by_metatype($to: DateTime!, $from: DateTime!, $metaType: String!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}}\n    type: {type: DAILY_RATES}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c9c8912ca192328c1b0d38c24471b9d6</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:14f9-496a-82f8-95d87b0c7bc2/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">656e6e29f967f7c3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c9c8912ca192328c1b0d38c24471b9d6-656e6e29f967f7c3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">ticket_trends_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Summary_TicketTrend_OpenTicket_T01_open_tickets_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;open_tickets_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-05T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;PLATFORM&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query open_tickets_by_metatype($to: DateTime!, $from: DateTime!, $metaType: String!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}}\n    type: {type: DAILY_TOTALS}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">bcedc4c9eace5dcd6e8d743eb4ad94c4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:cbc3-45fa-9a0d-20e88a93741a/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c3d6d0fbb8421f9b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">bcedc4c9eace5dcd6e8d743eb4ad94c4-c3d6d0fbb8421f9b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">open_tickets_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Summary_TicketTrend_OpenTicket_T02_open_tickets_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;open_tickets_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-05T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;IDENTITY&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query open_tickets_by_metatype($to: DateTime!, $from: DateTime!, $metaType: String!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}}\n    type: {type: DAILY_TOTALS}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">cfc0611def5f1fb3f5f9f225cfd159b8</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c693-41b7-815b-b2768ac55381/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ddec75209f52a03f</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">cfc0611def5f1fb3f5f9f225cfd159b8-ddec75209f52a03f-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">open_tickets_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Summary_TicketTrend_OpenTicket_T03_open_tickets_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;open_tickets_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-04-05T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-05-05T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;DATA&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query open_tickets_by_metatype($to: DateTime!, $from: DateTime!, $metaType: String!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}}\n    type: {type: DAILY_TOTALS}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">378a4e60de4054fe38dc62984fca3486</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3b3a-40a7-a418-952a66577623/t:ae58fab9/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">093e3fba4feab3f6</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">378a4e60de4054fe38dc62984fca3486-093e3fba4feab3f6-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">open_tickets_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Maturity_T01_fetchControlPoliciesOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchControlPoliciesOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchControlPoliciesOptions {\n  ControlPolicies {\n    items(limit: -1) {\n      srn\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1df3-44cc-85db-b36647024123/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5314d1200c2172a9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-5314d1200c2172a9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchControlPoliciesOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Maturity_T02_getObjectives" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getObjectives&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getObjectives {\n  SonraiObjectives {\n    items {\n      srn\n      resourceId\n      name\n      description\n      createdBy\n      definedControlFrameworks {\n        controlFrameworkSrn\n        controlFrameworkOrder\n        __typename\n      }\n      appliedControlFrameworks {\n        items {\n          srn\n          swimlaneSRNs\n          contains {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="cache-control" elementType="Header">
                <stringProp name="Header.name">cache-control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fe831f90e58cde3d</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a425-49ce-b418-d99aa4411341/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-fe831f90e58cde3d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getObjectives</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Maturity_T03_fetchStandards" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchStandards&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchStandards {\n  Standards {\n    items(limit: -1) {\n      ...fields\n      contains {\n        items(limit: -1) {\n          ...fields\n          containedBy {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          contains {\n            items(limit: -1) {\n              ...fields\n              containedBy {\n                items {\n                  srn\n                  __typename\n                }\n                __typename\n              }\n              ... on Standardcontrol {\n                mapsTo {\n                  items(limit: -1) {\n                    srn\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment fields on Standardinterface {\n  name\n  description\n  srn\n  orgID\n  resourceId\n  __typename\n  ... on Standard {\n    color\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e34e-45c4-8e02-1751f8ba16b9/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">90150d3b5dd3d0b4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-90150d3b5dd3d0b4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchStandards</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Maturity_T04_fetchCrmTicketkeyOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchCrmTicketKeyOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchCrmTicketKeyOptions {\n  identityOptions: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n  dataOptions: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0c33-47a9-b90a-20f41b7e99b0/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c5eecf166c757040</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-c5eecf166c757040-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchCrmTicketKeyOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Maturity_T05_fetchMaturitySwimlanes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchMaturitySwimlanes&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchMaturitySwimlanes {\n  Swimlanes {\n    items(limit: -1) {\n      srn\n      title\n      targetMaturityLevel\n      environments\n      accounts\n      resourceIds\n      tags\n      __typename\n    }\n    __typename\n  }\n  Environments {\n    items {\n      name\n      friendlyName\n      targetMaturityLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7cbe-4d6a-bf00-006165fe7f43/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">71a1c9fe508dde06</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-71a1c9fe508dde06-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchMaturitySwimlanes</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Maturity_T06_fetchMaturitySwimlanesPassing" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchMaturitySwimlanesPassing&quot;,&quot;variables&quot;:{&quot;m1Swimlanes&quot;:[&quot;srn:stage11733927::Swimlane/42112df8-6dae-46a1-8b93-2987c1c0793c&quot;,&quot;srn:stage11733927::Swimlane/b3c77842-5f65-424d-acd9-f15dd023b5fd&quot;,&quot;srn:stage11733927::Swimlane/8da13aac-7408-4a0b-b8b9-504f47270e13&quot;,&quot;srn:stage11733927::Swimlane/66b7c16f-8dd0-4224-b6a7-4e4d2404c889&quot;,&quot;srn:stage11733927::Swimlane/1bffc47f-80b9-4bd5-a373-4ca2aae7dd62&quot;,&quot;srn:stage11733927::Swimlane/16fdd1e2-7336-4995-9463-1de3694184d1&quot;,&quot;srn:stage11733927::Swimlane/616ad5d7-5b7e-49ed-8e1b-5306a6ca4b1b&quot;,&quot;srn:stage11733927::Swimlane/efe84463-3c2c-47af-b606-c868a6a74485&quot;,&quot;srn:stage11733927::Swimlane/81701b38-3609-4467-baeb-e741b59138d5&quot;,&quot;srn:stage11733927::Swimlane/415689ae-cd0b-4eef-bb63-73b5e1d3067a&quot;,&quot;srn:stage11733927::Swimlane/df28688e-458f-42ca-acc4-b0a04c01b617&quot;,&quot;srn:stage11733927::Swimlane/8dc9294c-bf80-4e3f-8b29-1f94e3b435e5&quot;,&quot;srn:stage11733927::Swimlane/01360e59-f63b-4b8f-8007-07941051e722&quot;,&quot;srn:stage11733927::Swimlane/efce2d9d-56a5-45b0-8457-197891171142&quot;,&quot;srn:stage11733927::Swimlane/3ea0ed41-9f3b-4724-b501-a634d495c302&quot;,&quot;srn:stage11733927::Swimlane/39d18340-4efd-4867-bd1d-d099a70554ae&quot;],&quot;m1Include&quot;:true,&quot;m2Swimlanes&quot;:[],&quot;m2Include&quot;:false,&quot;m3Swimlanes&quot;:[&quot;srn:stage11733927::Swimlane/b70ebaca-a1c0-46a0-9054-aa3c912e431b&quot;,&quot;srn:stage11733927::Swimlane/0e16e877-4789-4f05-9630-ac8359053b8e&quot;,&quot;srn:stage11733927::Swimlane/ec8b4243-8b66-4339-ab40-077decf7e399&quot;,&quot;srn:stage11733927::Swimlane/632f9001-a7ee-4a36-a9b4-34e548b474a2&quot;,&quot;srn:stage11733927::Swimlane/4f91c051-9646-4117-a465-b266a67223a0&quot;,&quot;srn:stage11733927::Swimlane/0fe6ec5a-c7e5-4f57-a1b4-7e09b16af9c9&quot;,&quot;srn:stage11733927::Swimlane/73e293f8-0271-4e1e-8f97-a7df6b4ab709&quot;,&quot;srn:stage11733927::Swimlane/4b91f1c7-f50b-4f4e-8954-ee90f8c05eb7&quot;,&quot;srn:stage11733927::Swimlane/67eddbc8-3996-4bf4-81ca-1174d322eec5&quot;,&quot;srn:stage11733927::Swimlane/ff2fc0a3-9bcf-4df9-8b2d-ea98c75880a6&quot;,&quot;srn:stage11733927::Swimlane/dd7c19de-f32b-431f-b78c-6b1909c6d40e&quot;,&quot;srn:stage11733927::Swimlane/8039a691-b59e-4c73-bd94-defcc3e8c434&quot;,&quot;srn:stage11733927::Swimlane/55b93279-0eb0-4973-977a-81153e5b4be4&quot;,&quot;srn:stage11733927::Swimlane/ced52d2a-c358-4dbb-8734-7b70f782e23d&quot;,&quot;srn:stage11733927::Swimlane/1806fd9d-b37c-45fc-a3fe-6f88c79b6551&quot;,&quot;srn:stage11733927::Swimlane/85a3b536-b744-4c4f-9b9b-369e1f6b5724&quot;,&quot;srn:stage11733927::Swimlane/3304300b-49c8-4372-8847-110905c9dbdb&quot;,&quot;srn:stage11733927::Swimlane/9cd7adcc-c7d7-4cd2-95d2-b8df5b40bb13&quot;,&quot;srn:stage11733927::Swimlane/b452d257-cb44-411d-9cac-0179e666deff&quot;,&quot;srn:stage11733927::Swimlane/d10808ce-ebfa-4f83-925c-22a6016d2da4&quot;,&quot;srn:stage11733927::Swimlane/238581e0-c08c-42cb-a459-4a3334b33cae&quot;,&quot;srn:stage11733927::Swimlane/9bfc9225-4af4-47a4-bcf1-8523c4d00519&quot;,&quot;srn:stage11733927::Swimlane/ed1c7fda-84a9-48a9-8ac0-3d16411eb410&quot;,&quot;srn:stage11733927::Swimlane/c4ff1c5f-1a6b-440f-955e-6cdb8a0e8df9&quot;,&quot;srn:stage11733927::Swimlane/8d3d9ee2-eeb9-4145-85dc-cc2986c31ae7&quot;,&quot;srn:stage11733927::Swimlane/eb046ec8-f31c-481a-8577-a9d088bcd7e8&quot;,&quot;srn:stage11733927::Swimlane/6f2dbab1-6521-4a0e-bbf1-86abf42fe1a5&quot;,&quot;srn:stage11733927::Swimlane/778b31a3-9154-4c25-afbc-429fe32751f5&quot;,&quot;srn:stage11733927::Swimlane/1f7913de-78f4-4ba6-a705-86a3e38e53c6&quot;],&quot;m3Include&quot;:true,&quot;m4Swimlanes&quot;:[&quot;srn:stage11733927::Swimlane/161f59a8-4987-4cc8-9b0c-d6371b639f32&quot;,&quot;srn:stage11733927::Swimlane/d4174dce-a7f5-4b27-af9d-5a3a9cb89d27&quot;,&quot;srn:stage11733927::Swimlane/1e40e15c-2c3c-4a40-9f2d-52c7b7937055&quot;,&quot;srn:stage11733927::Swimlane/b4757e68-85c1-439b-a52f-deb9e3cfad55&quot;,&quot;srn:stage11733927::Swimlane/ffa2e8e3-ec98-410d-9b9d-fcbd70ec6082&quot;,&quot;srn:stage11733927::Swimlane/8c6bf995-7f4d-40b9-8134-428b0ce03c7a&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/cedbfdda-269f-4d8e-b4f0-87cce12a567b&quot;,&quot;srn:stage11733927::Swimlane/bed7bd36-ee29-4544-99e5-94e3130c8574&quot;,&quot;srn:stage11733927::Swimlane/e058b72f-904d-428d-9225-ea92e9166a9d&quot;,&quot;srn:stage11733927::Swimlane/f8e036fd-4c39-4abf-b142-24a7c13adf91&quot;,&quot;srn:stage11733927::Swimlane/c87de86d-6448-4312-8141-c67f10ffbc66&quot;,&quot;srn:stage11733927::Swimlane/566164c6-e529-4b9a-a065-6677cda5a586&quot;,&quot;srn:stage11733927::Swimlane/0a87b60e-6349-4858-810b-f846762d3d55&quot;,&quot;srn:stage11733927::Swimlane/9057a678-a9c9-4088-ac95-f42d99e20d45&quot;,&quot;srn:stage11733927::Swimlane/5a349d39-d2c2-4d77-a003-7d8437bcf400&quot;,&quot;srn:stage11733927::Swimlane/566aa3d1-efd5-4e5b-b7a9-09aea0ffef7a&quot;,&quot;srn:stage11733927::Swimlane/1656eeac-9fae-4bb8-946f-2d27008eb42b&quot;,&quot;srn:stage11733927::Swimlane/55773a02-470e-4cf8-95de-2845ef4408d2&quot;,&quot;srn:stage11733927::Swimlane/ade3b043-f5af-4aca-a484-ef3a03a1171a&quot;,&quot;srn:stage11733927::Swimlane/882f219e-e3aa-453e-b997-91e8e0b5516e&quot;,&quot;srn:stage11733927::Swimlane/9595b561-19d8-46e1-a5f0-65ea43f79e0f&quot;,&quot;srn:stage11733927::Swimlane/ce09ecf0-90c6-410e-98f3-d48e6b24c015&quot;,&quot;srn:stage11733927::Swimlane/958d066a-05be-45be-be73-eaa8109adafe&quot;,&quot;srn:stage11733927::Swimlane/d622d287-90d2-49d1-add1-22fdbb5cc4d0&quot;,&quot;srn:stage11733927::Swimlane/47d24b2a-5aa2-47f8-95db-22c74ea30b6c&quot;,&quot;srn:stage11733927::Swimlane/edb2917d-81a3-4b74-9e22-1af5f507a2fe&quot;,&quot;srn:stage11733927::Swimlane/4dfead77-670a-4c66-b1da-81ed07092089&quot;,&quot;srn:stage11733927::Swimlane/632c1e2a-0cf7-4432-b593-4b0c45c082d5&quot;,&quot;srn:stage11733927::Swimlane/322b22c8-3cc3-416d-b64d-843c3e935420&quot;,&quot;srn:stage11733927::Swimlane/99355681-05db-455a-b5dd-6660ffa4277e&quot;,&quot;srn:stage11733927::Swimlane/7bc365e5-b897-4b58-8753-be85e03573f6&quot;,&quot;srn:stage11733927::Swimlane/3e9dd7ed-8bd9-48cc-92ab-dc224c2c06f2&quot;,&quot;srn:stage11733927::Swimlane/635c2880-ca1d-4434-92a4-c7feaf74ae53&quot;,&quot;srn:stage11733927::Swimlane/b833ee33-f51b-4bbd-bbec-35f57c1c753c&quot;,&quot;srn:stage11733927::Swimlane/752c3b38-0ba4-444c-aa93-361f9aea5176&quot;,&quot;srn:stage11733927::Swimlane/c177456e-edcf-4bad-aeac-2e7834afd322&quot;,&quot;srn:stage11733927::Swimlane/876ed902-5674-475d-9f94-8466a06c5625&quot;,&quot;srn:stage11733927::Swimlane/c5df50aa-58b9-4ae4-ae56-763db2f55b35&quot;,&quot;srn:stage11733927::Swimlane/2e8048c2-4979-42d1-a59d-74400e22e022&quot;,&quot;srn:stage11733927::Swimlane/cc8b09fb-3e9d-4dff-a9a8-37e0becea109&quot;,&quot;srn:stage11733927::Swimlane/41f8b832-a2e9-4102-ac47-e35418e9ee9a&quot;,&quot;srn:stage11733927::Swimlane/ffd99cfa-b27a-4bed-99ae-7e845f793029&quot;,&quot;srn:stage11733927::Swimlane/538951ca-f147-4685-90f1-083473ebba0e&quot;,&quot;srn:stage11733927::Swimlane/fcaf570e-bc5b-47e4-ad51-2356ccbd897c&quot;,&quot;srn:stage11733927::Swimlane/0fccef66-2e58-4164-ae72-cf6528270022&quot;,&quot;srn:stage11733927::Swimlane/e55fb989-dbe7-46f7-8fa4-957c7e4acb52&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/ec764d89-24da-4d64-8ffb-fe164546567a&quot;,&quot;srn:stage11733927::Swimlane/576c2e2d-7ff3-4aa7-8e5b-2311d4be8203&quot;,&quot;srn:stage11733927::Swimlane/6720e478-06db-444d-a19f-42b61ba08d6b&quot;,&quot;srn:stage11733927::Swimlane/00b2a8b9-345b-40eb-abe4-0d74832b3cfb&quot;,&quot;srn:stage11733927::Swimlane/303c03f6-6aba-4a6a-9b6c-563e1a4c8b6d&quot;,&quot;srn:stage11733927::Swimlane/77f65632-4298-4485-b9e4-d7033db11d17&quot;,&quot;srn:stage11733927::Swimlane/52004ffa-055b-47b0-a2f5-30a3aa3a5dad&quot;,&quot;srn:stage11733927::Swimlane/6d741085-866d-48b9-a359-63a9c3525e40&quot;,&quot;srn:stage11733927::Swimlane/78604109-6fd2-4d31-9571-edf180fdfac3&quot;,&quot;srn:stage11733927::Swimlane/0c7518ff-a8b2-45e6-b8e7-a9609ee56b7e&quot;,&quot;srn:stage11733927::Swimlane/05fe70d3-183b-4452-b0f5-2e8f2aeb5996&quot;,&quot;srn:stage11733927::Swimlane/54346aae-f962-4303-8775-558e376772da&quot;,&quot;srn:stage11733927::Swimlane/371411c2-f9fd-4657-84a5-d32196e0606d&quot;,&quot;srn:stage11733927::Swimlane/1f04ce21-d745-4fd3-b55a-d2c6274833dc&quot;,&quot;srn:stage11733927::Swimlane/475521a5-73c6-47c2-962e-8e4417b10238&quot;,&quot;srn:stage11733927::Swimlane/2c9894ff-d4de-4d83-9557-630d70634d8a&quot;,&quot;srn:stage11733927::Swimlane/19f18796-4505-4ee8-a43e-1997b9473603&quot;,&quot;srn:stage11733927::Swimlane/5861c490-03f2-4ca8-a060-f822e88dd658&quot;,&quot;srn:stage11733927::Swimlane/aee2108a-c622-4653-a182-5e8bf1526110&quot;,&quot;srn:stage11733927::Swimlane/d470e390-13f2-4859-97d6-2b2bb4fc3cba&quot;,&quot;srn:stage11733927::Swimlane/c3c35f59-341d-4a94-b384-a7617f804656&quot;,&quot;srn:stage11733927::Swimlane/3f7910dc-d53b-42e2-b5b2-bfdb6d471ab2&quot;,&quot;srn:stage11733927::Swimlane/7e986fc7-7db9-475c-898b-c666b1c7411a&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/821bb9a3-2a11-4146-9bcd-50ef77c8be04&quot;,&quot;srn:stage11733927::Swimlane/864585b9-d9ad-4fc0-9cd7-51a7a9a06fcf&quot;,&quot;srn:stage11733927::Swimlane/71ba4ed3-4d0f-4074-91a9-efd3d80c1190&quot;,&quot;srn:stage11733927::Swimlane/846176cf-47c2-4d8f-b094-43e1d5f161fc&quot;,&quot;srn:stage11733927::Swimlane/b2970a8f-3e08-44d8-8819-b12f8d0b1036&quot;,&quot;srn:stage11733927::Swimlane/0dff53c9-9aed-450e-97b6-f9c7c7269bb6&quot;,&quot;srn:stage11733927::Swimlane/3da8ae25-926a-40df-97a3-64c64435fa15&quot;,&quot;srn:stage11733927::Swimlane/5bcb750f-6910-4b0b-830a-6c39a76474ba&quot;,&quot;srn:stage11733927::Swimlane/798d6f98-48ac-4a71-b704-3765e39d5938&quot;,&quot;srn:stage11733927::Swimlane/8b5d40ad-f3fe-4dc5-88ca-87b85cd27af8&quot;,&quot;srn:stage11733927::Swimlane/2a6bd270-2f19-4535-8244-014b2e43be49&quot;,&quot;srn:stage11733927::Swimlane/5c8ebc78-17e2-49cb-acc7-fb200922d32a&quot;,&quot;srn:stage11733927::Swimlane/525ec320-5276-4bbc-b8bc-89feeeb14328&quot;,&quot;srn:stage11733927::Swimlane/ff34414f-e6d4-4b25-a45c-05c3d603dec9&quot;,&quot;srn:stage11733927::Swimlane/273cdc1b-236d-4eff-9500-ce2e79f76131&quot;,&quot;srn:stage11733927::Swimlane/b3a26fc0-1e27-4bf6-8172-1a16309514ce&quot;,&quot;srn:stage11733927::Swimlane/94eab80b-4b32-46c2-9ee2-20c7e898eeb3&quot;,&quot;srn:stage11733927::Swimlane/17dce178-87b1-4b25-be32-ce58a03cffd7&quot;,&quot;srn:stage11733927::Swimlane/81a239ab-ac92-4b0d-899d-74c35e600b2a&quot;,&quot;srn:stage11733927::Swimlane/52d5c2a5-9132-44d9-8eb8-1386b5bb8dc4&quot;,&quot;srn:stage11733927::Swimlane/734f44e5-b824-424b-8a24-f6e33d9a4257&quot;,&quot;srn:stage11733927::Swimlane/ba3b5b6e-9c31-4053-b37a-03d2dd0d558a&quot;,&quot;srn:stage11733927::Swimlane/cebf6739-57ff-475b-92c8-0f5a3907c376&quot;,&quot;srn:stage11733927::Swimlane/aa440663-576c-4ec3-9f08-72e2c1a408e5&quot;,&quot;srn:stage11733927::Swimlane/070a6bfb-eb62-4308-83a6-c4962d7f7734&quot;,&quot;srn:stage11733927::Swimlane/b56e2f0a-d79b-4699-ad9f-eba704dfbd6d&quot;,&quot;srn:stage11733927::Swimlane/60b72733-a220-4260-8ed1-66671f59597e&quot;,&quot;srn:stage11733927::Swimlane/f9f5b2e8-f46d-4442-980f-d393e2701b1f&quot;,&quot;srn:stage11733927::Swimlane/2f4e024b-3303-4820-b1b5-f9096cde2e43&quot;,&quot;srn:stage11733927::Swimlane/ea565634-a002-4a81-91c0-bac8694e4cd6&quot;,&quot;srn:stage11733927::Swimlane/50362c1d-387c-4832-9da1-83ac4f93ebc5&quot;,&quot;srn:stage11733927::Swimlane/f4128920-8191-4aa7-ba9d-0655b1a05ddf&quot;,&quot;srn:stage11733927::Swimlane/efb0f4d5-1904-4b33-9523-c99c298c722f&quot;,&quot;srn:stage11733927::Swimlane/6c02eb55-3815-4f0b-a56b-2a747b8fa715&quot;],&quot;m4Include&quot;:true,&quot;m5Swimlanes&quot;:[&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/5e06ca2b-15b9-4654-99c0-2f2731b55e96&quot;,&quot;srn:stage11733927::Swimlane/57cdd790-cb15-4213-a618-d7306ae5e595&quot;,&quot;srn:stage11733927::Swimlane/8ffcd427-b034-4080-9feb-74abe4a2bc1a&quot;,&quot;srn:stage11733927::Swimlane/a9443082-562d-4269-a53d-fba35565b4ce&quot;,&quot;srn:stage11733927::Swimlane/f47a8e25-188a-4c9d-91d6-1a54883e9fa2&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;,&quot;srn:stage11733927::Swimlane/ac7784fd-bd3d-4966-9bac-610c39053e99&quot;,&quot;srn:stage11733927::Swimlane/054e6112-5c09-4a64-806f-fdc03d4887da&quot;,&quot;srn:stage11733927::Swimlane/a6736f91-4891-4e61-b96d-7ca3d9ff25f7&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/24f4367c-8a0e-4905-8811-0726d4d112bd&quot;,&quot;srn:stage11733927::Swimlane/454d1176-305e-40c3-ab66-c6fdac382a1d&quot;,&quot;srn:stage11733927::Swimlane/7c2896dc-7604-4f5b-bc4e-0a0034d061d2&quot;,&quot;srn:stage11733927::Swimlane/6024d0eb-d1bb-4d48-9fd3-f96fff0e1d2e&quot;,&quot;srn:stage11733927::Swimlane/186b2a2d-4b46-4639-a942-bd396c53bd67&quot;,&quot;srn:stage11733927::Swimlane/be0a8d40-d422-4eb4-a940-d95da8486981&quot;,&quot;srn:stage11733927::Swimlane/6579051f-fc8a-46e7-882a-0cde2219f9ef&quot;,&quot;srn:stage11733927::Swimlane/a766f0c1-f619-4fba-94a9-498aeb81624c&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/d84a67d6-760c-4a6a-924b-c8f46c9d5360&quot;,&quot;srn:stage11733927::Swimlane/d8db091e-0147-40fe-bef0-08f2f5d172cf&quot;,&quot;srn:stage11733927::Swimlane/a459fece-58ef-49e2-9779-357f876e15e9&quot;,&quot;srn:stage11733927::Swimlane/082a0e22-5dad-41ee-b7ab-15e567119797&quot;,&quot;srn:stage11733927::Swimlane/4f7e22fa-6c07-41bc-943d-23ad332ddf18&quot;,&quot;srn:stage11733927::Swimlane/3fc23896-66b4-4bbd-925d-a977ab832acc&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;,&quot;srn:stage11733927::Swimlane/f5c522fa-e7f4-4be4-8f0e-469e4f603f36&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;,&quot;srn:stage11733927::Swimlane/3ace1654-4a66-45da-9b3d-78d7b24583d2&quot;],&quot;m5Include&quot;:true},&quot;query&quot;:&quot;query fetchMaturitySwimlanesPassing($m5Swimlanes: [String], $m5Include: Boolean!, $m4Swimlanes: [String], $m4Include: Boolean!, $m3Swimlanes: [String], $m3Include: Boolean!, $m2Swimlanes: [String], $m2Include: Boolean!, $m1Swimlanes: [String], $m1Include: Boolean!) {\n  m5: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m5Swimlanes, maturityLevel: 5}\n  ) @include(if: $m5Include) {\n    ...fields\n    __typename\n  }\n  m4: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m4Swimlanes, maturityLevel: 4}\n  ) @include(if: $m4Include) {\n    ...fields\n    __typename\n  }\n  m3: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m3Swimlanes, maturityLevel: 3}\n  ) @include(if: $m3Include) {\n    ...fields\n    __typename\n  }\n  m2: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m2Swimlanes, maturityLevel: 2}\n  ) @include(if: $m2Include) {\n    ...fields\n    __typename\n  }\n  m1: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m1Swimlanes, maturityLevel: 1}\n  ) @include(if: $m1Include) {\n    ...fields\n    __typename\n  }\n}\n\nfragment fields on TicketToPopulationRatios {\n  items {\n    ratioM1\n    ratioM2\n    ratioM3\n    ratioM4\n    ratioM5\n    swimlaneSrn\n    maturityLevel\n    maturityLevelNumeric\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2213-4b35-9aac-ec178d4a7cf4/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8c1d2f2ad0965909</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-8c1d2f2ad0965909-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchMaturitySwimlanesPassing</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Maturity_T07_fetchMaturitySwimlanesRadarChartData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchMaturitySwimlanesRadarChartData&quot;,&quot;variables&quot;:{&quot;includeOverall&quot;:false,&quot;includeForSwimlanes&quot;:true,&quot;input&quot;:[{&quot;swimlanesrn&quot;:&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;targetMarturityLevel&quot;:5}]},&quot;query&quot;:&quot;query fetchMaturitySwimlanesRadarChartData($input: [MaturityLevelMap], $includeOverall: Boolean!, $includeForSwimlanes: Boolean!) {\n  overall: MaturityScores @include(if: $includeOverall) {\n    items {\n      swimlaneSrn\n      securityArea\n      maturityScore\n      maturityScore\n      maturityLevel\n      __typename\n    }\n    __typename\n  }\n  by_swimlane: MaturityScores(where: {input: $input}) @include(if: $includeForSwimlanes) {\n    items {\n      swimlaneSrn\n      securityArea\n      maturityScore\n      maturityScore\n      maturityLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7616-4943-bc17-b0f2c5c3ca38/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9a0d0396aa0d9cba</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-9a0d0396aa0d9cba-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchMaturitySwimlanesRadarChartData</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Maturity_TicketTrend_T01_ticket_status_trends" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ticket_status_trends&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-05T00:00:00.000Z&quot;,&quot;2023-05-04T23:59:59.999Z&quot;]}},&quot;granularity&quot;:&quot;DAY&quot;},&quot;query&quot;:&quot;query ticket_status_trends($filters: TicketTrendsFilter!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: $filters\n    type: {type: DAILY_RATES}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0e23-446f-9146-13d640f541d6/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c82b81a74313a1a4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-c82b81a74313a1a4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">ticket_status_trends</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Maturity_TicketTrend_OpenTicket_T01_open_ticket_trends" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;open_ticket_trends&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-04-05T00:00:00.000Z&quot;,&quot;2023-05-04T23:59:59.999Z&quot;]}},&quot;granularity&quot;:&quot;DAY&quot;},&quot;query&quot;:&quot;query open_ticket_trends($filters: TicketTrendsFilter!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: $filters\n    type: {type: DAILY_TOTALS}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8493-4791-9a8a-0dbbfe4282db/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ed754200cb709c97</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c29a5529fb81faf145e6abf3ad72e4f1-ed754200cb709c97-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">open_ticket_trends</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Maturity_TicketTrend_OpenTicket_Swimlane_T01_groupedTicketsGraphQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;groupedTicketsGraphQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;orderBy&quot;:[{&quot;count&quot;:{&quot;order&quot;:&quot;DESC&quot;}}],&quot;controlFrameworkSrn&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;controlFrameworkSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlFrameworkTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlFrameworkEnabled&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:true},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;maturityArea&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;objectiveSrn&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;objectiveSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;objectiveName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;ticketKey&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;resourceSRN&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;resourceType&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;severityCategory&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;swimlaneSrns&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;swimlaneTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;controlFrameworkSrn_includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true},&quot;maturityArea_includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true},&quot;objectiveSrn_includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true},&quot;ticketKey_includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true},&quot;resourceSRN_includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true},&quot;resourceType_includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true},&quot;severityCategory_includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true},&quot;swimlaneSrns_includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true}},&quot;query&quot;:&quot;query groupedTicketsGraphQuery($limit: Long = 100, $orderBy: [TicketRollupOrder] = [{count: {order: DESC}}], $controlFrameworkSrn: TicketRollupFilter!, $maturityArea: TicketRollupFilter!, $objectiveSrn: TicketRollupFilter!, $resourceType: TicketRollupFilter!, $resourceSRN: TicketRollupFilter!, $severityCategory: TicketRollupFilter!, $ticketKey: TicketRollupFilter!, $swimlaneSrns: TicketRollupFilter!, $controlFrameworkSrn_includeRollup: TicketRollupIncludeRollup!, $maturityArea_includeRollup: TicketRollupIncludeRollup!, $objectiveSrn_includeRollup: TicketRollupIncludeRollup!, $resourceType_includeRollup: TicketRollupIncludeRollup!, $resourceSRN_includeRollup: TicketRollupIncludeRollup!, $severityCategory_includeRollup: TicketRollupIncludeRollup!, $ticketKey_includeRollup: TicketRollupIncludeRollup!, $swimlaneSrns_includeRollup: TicketRollupIncludeRollup!) {\n  controlFrameworkSrn: TicketRollups(\n    where: $controlFrameworkSrn\n    includeRollup: $controlFrameworkSrn_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  maturityArea: TicketRollups(\n    where: $maturityArea\n    includeRollup: $maturityArea_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  objectiveSrn: TicketRollups(\n    where: $objectiveSrn\n    includeRollup: $objectiveSrn_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  resourceType: TicketRollups(\n    where: $resourceType\n    includeRollup: $resourceType_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  resourceSRN: TicketRollups(\n    where: $resourceSRN\n    includeRollup: $resourceSRN_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  severityCategory: TicketRollups(\n    where: $severityCategory\n    includeRollup: $severityCategory_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  ticketKey: TicketRollups(\n    where: $ticketKey\n    includeRollup: $ticketKey_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  swimlaneSrns: TicketRollups(\n    where: $swimlaneSrns\n    includeRollup: $swimlaneSrns_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n}\n\nfragment ticketRollupFields on TicketRollups {\n  items(limit: $limit, orderBy: $orderBy) {\n    count\n    controlFrameworkSrn\n    maturityArea\n    objectiveSrn\n    ticketKey\n    resourceType\n    resourceSRN\n    severityCategory\n    swimlaneSrn\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c513d70119857312f16fb44b6bb479ec</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d1cf-41e9-b73a-1681f3fa36d1/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">05ea4078f3ee826a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c513d70119857312f16fb44b6bb479ec-05ea4078f3ee826a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">groupedTicketsGraphQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Maturity_TicketTrend_OpenTicket_Swimlane_T02_topRiskPoliciesTicektRollups" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topRiskPoliciesTicketRollups&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;offset&quot;:0,&quot;sort&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}],&quot;filter&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;includeRollup&quot;:{&quot;maturityLevel&quot;:true,&quot;status&quot;:true}},&quot;query&quot;:&quot;query topRiskPoliciesTicketRollups($filter: TicketRollupFilter!, $includeRollup: TicketRollupIncludeRollup!, $limit: Long = 100, $offset: Long = 0, $sort: [TicketRollupOrder] = [{riskScore: {order: ASC}}]) {\n  TicketRollups(where: $filter, includeRollup: $includeRollup) {\n    items(limit: $limit, offset: $offset, orderBy: $sort) {\n      count\n      riskScore\n      riskScoreNumeric\n      riskScoreDescription\n      ticketKey\n      controlPolicyType\n      controlPolicyTitle\n      controlFrameworkSrn\n      controlFrameworkTitle\n      maturityArea\n      objectiveSrn\n      resourceSRN\n      resourceType\n      severityCategory\n      swimlaneSrn\n      swimlaneTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c513d70119857312f16fb44b6bb479ec</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7bfd-4f5a-a01a-64d9d1748973/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9d4dabedd1d8b160</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c513d70119857312f16fb44b6bb479ec-9d4dabedd1d8b160-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topRiskPoliciesTicketRollups</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Maturity_TicketTrend_OpenTicket_Swimlane_T03_load_content_ticketRollupTitleControlPolicy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;load_content_ticketRollupTitleControlPolicy&quot;,&quot;variables&quot;:{&quot;ids&quot;:[&quot;srn:supersonrai::ControlPolicy/09b382ab-4140-4d08-90cb-48ecae8fdf65&quot;,&quot;srn:supersonrai::ControlPolicy/2b0f0cf6-bf2a-493f-be31-e74a409513b7&quot;,&quot;srn:supersonrai::ControlPolicy/b4cd79ae-4b15-4d8e-beeb-545736ea492e&quot;,&quot;srn:supersonrai::ControlPolicy/83ee7d6d-6456-45f4-8309-957f4ce3ef6b&quot;,&quot;srn:supersonrai::ControlPolicy/a7dd5fe1-5397-4760-ae45-ece1196e2789&quot;]},&quot;query&quot;:&quot;query load_content_ticketRollupTitleControlPolicy($ids: [String]) {\n  ControlPolicies(where: {srn: {op: IN_LIST, values: $ids}}) {\n    items {\n      ...ticketRollupTitleControlPolicy\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ticketRollupTitleControlPolicy on Controlpolicy {\n  srn\n  title\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c513d70119857312f16fb44b6bb479ec</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:edc3-454c-b508-3c6779b9a239/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1a56ec2e23203c7b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c513d70119857312f16fb44b6bb479ec-1a56ec2e23203c7b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">load_content_ticketRollupTitleControlPolicy</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Maturity_TicketTrend_OpenTicket_Swimlane_T04_fetchResourcesForMaturityIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchResourcesForMaturityIssues&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:aws:iam::017586138278/User/User/cameron.dahr&quot;,&quot;srn:aws:iam::017586138278/User/User/nayajutest&quot;,&quot;srn:aws:iam::017586138278/Role/OrganizationAccountAccessRole&quot;,&quot;srn:aws:iam::017586138278/Role/new_admin_role&quot;,&quot;srn:aws:iam::017586138278/Role/AWS_ROLE_UNUSED_ADMIN_TEST&quot;,&quot;srn:aws:iam::017586138278/User/User/user-with-delete-bucket&quot;,&quot;srn:aws:iam::017586138278/Role/sonrai-BOT-ROLE-stg-ent-integration&quot;,&quot;srn:aws:iam::017586138278/Role/EMR_EC2_DefaultRole&quot;,&quot;srn:aws:iam::017586138278/User/User/AWS_USER_UNUSED_PERMISSIONS&quot;,&quot;srn:aws:iam::017586138278/User/User/user-with-boundary-deny-list-buckets&quot;,&quot;srn:aws:s3::017586138278/DataContainer/aws-logs-017586138278-us-east-1&quot;,&quot;srn:aws:iam::017586138278/Role/AWSReservedSSO_AdministratorAccess_7b2e1e1ec8ec231d&quot;,&quot;srn:aws:s3::017586138278/DataContainer/do-not-delete-me&quot;,&quot;srn:aws:s3::017586138278/DataContainer/shareholders-acl-test&quot;,&quot;srn:aws:s3::017586138278/DataContainer/config-bucket-soph-017586138278&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForOrganizations&quot;,&quot;srn:aws:s3::017586138278/DataContainer/nayajuaccessbucket&quot;,&quot;srn:aws:iam::017586138278/Role/sonrai-saas-shareholders-squad-dev-readonly&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForSupport&quot;,&quot;srn:aws:iam::017586138278/Role/test-diablo-activity-backfil&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForSSO&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForAmazonEventBridgeApiDestinations&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForConfigMultiAccountSetup&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForElasticLoadBalancing&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForEMRCleanup&quot;,&quot;srn:aws:s3::017586138278/DataContainer/new-bucket-pathfinder-test&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForAccessAnalyzer&quot;,&quot;srn:aws:iam::017586138278/Role/AWSReservedSSO_ViewOnlyAccess_29cbbcfdf81fccef&quot;,&quot;srn:aws:iam::017586138278/Role/AWS_role_that_should_have_mfa&quot;,&quot;srn:aws:iam::017586138278/Role/AWS_ROLE_UNUSED_SERVICE_TEST&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForECS&quot;,&quot;srn:aws:s3::017586138278/DataContainer/aws-agni-tf-state&quot;,&quot;srn:aws:iam::017586138278/Role/EMR_DefaultRole&quot;,&quot;srn:aws:iam::017586138278/Role/ec2-effective-permissions-role&quot;,&quot;srn:aws:iam::017586138278/Role/sonrai-collector-bodsquad&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForAmazonOpenSearchService&quot;,&quot;srn:aws:iam::017586138278/AccessKey/AKIAQIGBXFSTK54DNF5G&quot;,&quot;srn:aws:iam::017586138278/Role/AWS_ROLE_UNUSED_PERMISSION&quot;,&quot;srn:aws:iam::017586138278/Role/sonrai-saas-shareholders-squad-dev-cwpp&quot;,&quot;srn:aws:iam::017586138278/Role/nayaju-collector-role&quot;,&quot;srn:aws:iam::017586138278/AccessKey/AKIAQIGBXFSTNJDQBPWI&quot;,&quot;srn:aws:s3::017586138278/DataContainer/nayajubucket&quot;,&quot;srn:aws:iam::017586138278/AccessKey/AKIAQIGBXFSTJZH5XZUW&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-06143f7e&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-065aa360&quot;,&quot;srn:aws:sqs::017586138278/DataContainer/AWSSQSQueue/us-east-1/cameron-local-ticket-modification-tf&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-0a446962&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-1a44c873&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-1a48b97c&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-1ff17f62&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-4239b729&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-4d548c2b&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-7639af1d&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-7c506014&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-94f685fd&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-c408a8bd&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-cfd933a9&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-ead14280&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-ed17d68b&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-f178bf99&quot;,&quot;srn:aws:iam::017586138278/Group/test-group&quot;,&quot;srn:aws:iam::017586138278/User/User/test&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForAmazonInspector2&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-1b32fa6c&quot;,&quot;srn:aws:sqs::017586138278/DataContainer/AWSSQSQueue/us-east-1/cameron-local-ticket-entry-tf&quot;,&quot;srn:aws:iam::017586138278/Role/AWSReservedSSO_ReadOnlyAccess_f6ab5259e5622516&quot;,&quot;srn:aws:iam::017586138278/Role/sonrai-saas-shareholders-squad-dev-bots&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForTrustedAdvisor&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-05d62050fef6b13cb&quot;,&quot;srn:aws:ec2::017586138278/Compute/EC2/i-0a89a010d6911d425&quot;,&quot;srn:aws:ec2::017586138278/Image/ami-0c293f3f676ec4f90&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-01eb5bee4b1b693b5&quot;,&quot;srn:aws:account::017586138278/Account/017586138278&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-0a0dbccf720e51c8a&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-18cf8f57&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-26707d78&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-2fec986c&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-4e01aa39&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-8bef25f6&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-939e9ed9&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-9a351be7&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-9cf33299&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-a72270d4&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-ad69b093&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-b0e656d7&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-b6f2e4d3&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-d18816bc&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-f278e2b9&quot;,&quot;srn:aws:ec2::017586138278/NetworkPolicy/sg-f677648e&quot;,&quot;srn:aws:ec2::017586138278/Network/vpc-091d7ffad10791065&quot;,&quot;srn:aws:iam::017586138278/AccessKey/AKIAQIGBXFSTJEYKBXNT&quot;,&quot;srn:aws:iam::017586138278/AccessKey/AKIAQIGBXFSTNV4GQCPF&quot;,&quot;srn:aws:iam::017586138278/AccessKey/AKIAQIGBXFSTPX6HXC5K&quot;,&quot;srn:aws:iam::017586138278/Role/allow-list-buckets&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForConfig&quot;,&quot;srn:aws:iam::017586138278/Role/AWSServiceRoleForSecurityHub&quot;,&quot;srn:aws:iam::017586138278/Role/sonrai-apidestination&quot;,&quot;srn:aws:iam::017586138278/User/Root/Root&quot;,&quot;srn:aws:s3::017586138278/Policy/BucketPolicy/bucket/shareholders-acl-test/policy&quot;]},&quot;query&quot;:&quot;query fetchResourcesForMaturityIssues($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items(limit: -1) {\n      srn\n      name\n      friendlyName\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c513d70119857312f16fb44b6bb479ec</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0277-40dc-b07b-26cd46ec40fa/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0a3be8d4e7a38d95</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c513d70119857312f16fb44b6bb479ec-0a3be8d4e7a38d95-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchResourcesForMaturityIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_Maturity_TicketTrend_OpenTicket_Swimlane_SltTicket_T01_fetchTicketCount" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketCount&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::ControlPolicy/4286906e-286c-40dd-aa6c-d189873e691a&quot;]}}},&quot;query&quot;:&quot;query fetchTicketCount($filters: TicketsFilter) {\n  Tickets(where: $filters) {\n    globalCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1ed88001d4c48031aa16122689f8eb11</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8ecc-48a0-9c89-d51813accf52/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">07051d4d7a992281</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1ed88001d4c48031aa16122689f8eb11-07051d4d7a992281-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketCount</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_Maturity_TicketTrend_OpenTicket_Swimlane_SltTicket_T02_getEscalations" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEscalations&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getEscalations {\n  EscalationSchemes {\n    items {\n      srn\n      title\n      description\n      createdBy\n      createdDate\n      resourceId\n      assignments {\n        srn\n        swimlaneSRN\n        allSwimlanes\n        resourceId\n        __typename\n      }\n      filters {\n        srn\n        createdDate\n        createdBy\n        ticketType\n        ticketKey\n        allKeys\n        allTypes\n        controlFrameworkSrn\n        severity\n        onlyCreatedAfterDate\n        __typename\n      }\n      rules {\n        srn\n        triggerAfter\n        triggerAfterDate\n        actionType\n        assignUser {\n          userSrn\n          __typename\n        }\n        assignRole {\n          roleType: ActionRoleType\n          __typename\n        }\n        escalateToBot {\n          botSrn\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1ed88001d4c48031aa16122689f8eb11</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:23a8-4bf7-975f-521e09878fed/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">488c1706c68fcb7d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1ed88001d4c48031aa16122689f8eb11-488c1706c68fcb7d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getEscalations</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_Maturity_TicketTrend_OpenTicket_Swimlane_SltTicket_T03_fetchTicketTemplates" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketTemplates&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchTicketTemplates {\n  TicketTemplates {\n    items(limit: 1000, orderBy: [{title: {order: ASC}}]) {\n      srn\n      title\n      description\n      fields {\n        name\n        required\n        type\n        multi\n        description\n        select {\n          search\n          searchFieldMap {\n            items {\n              value\n              key\n              __typename\n            }\n            __typename\n          }\n          path\n          valueField\n          labelFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1ed88001d4c48031aa16122689f8eb11</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5688-46a0-a00d-8f8cbb338124/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b578e2f84bc2c2d1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1ed88001d4c48031aa16122689f8eb11-b578e2f84bc2c2d1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketTemplates</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_Maturity_TicketTrend_OpenTicket_Swimlane_SltTicket_T04_fetchTicketList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketList&quot;,&quot;variables&quot;:{&quot;limit&quot;:25,&quot;offset&quot;:0,&quot;filters&quot;:{&quot;maturityLevel&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;]},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::ControlPolicy/4286906e-286c-40dd-aa6c-d189873e691a&quot;]}},&quot;orderBy&quot;:[{&quot;severityNumeric&quot;:{&quot;order&quot;:&quot;DESC&quot;}}]},&quot;query&quot;:&quot;query fetchTicketList($filters: TicketsFilter, $limit: Long = 25, $offset: Long, $orderBy: [TicketOrder]) {\n  Tickets(where: $filters) {\n    items(orderBy: $orderBy, limit: $limit, offset: $offset) {\n      title\n      templatedTitle\n      status\n      assignedTo\n      severityNumeric\n      swimlaneSRNs\n      createdDate\n      transitionDate\n      transitionedBy\n      lastModified\n      firstSeen\n      lastSeen\n      createdBy\n      ticketKey\n      ticketType\n      resourceType\n      resourceLabel\n      actionClassification\n      account\n      srn\n      resourceSRN\n      resourceName\n      resourceId\n      policy {\n        srn\n        alertingLevelNumeric\n        controlPolicyMetaTypes\n        __typename\n      }\n      swimlanes {\n        environments\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1ed88001d4c48031aa16122689f8eb11</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b2c7-4289-b794-b3eadc02fb7e/t:705a74ec/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">40d831a339cdacb4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1ed88001d4c48031aa16122689f8eb11-40d831a339cdacb4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketList</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_SwimlaneCheckup_T01_getObjectives" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getObjectives&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getObjectives {\n  SonraiObjectives {\n    items {\n      srn\n      resourceId\n      name\n      description\n      createdBy\n      definedControlFrameworks {\n        controlFrameworkSrn\n        controlFrameworkOrder\n        __typename\n      }\n      appliedControlFrameworks {\n        items {\n          srn\n          swimlaneSRNs\n          contains {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3a588a26df71ed792ed7cd9a00fb6a3d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="cache-control" elementType="Header">
                <stringProp name="Header.name">cache-control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a4ec61fa1529b2e5</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ec84-443f-a67f-5f14ba957c5b/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3a588a26df71ed792ed7cd9a00fb6a3d-a4ec61fa1529b2e5-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getObjectives</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_SwimlaneCheckup_T02_getStatsBySwimlane" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStatsBySwimlane&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStatsBySwimlane {\n  GroupedQuery(where: {keys: [Swimlane, Label]}) {\n    key\n    items {\n      value\n      hasGroupedResult {\n        items {\n          value\n          count\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3a588a26df71ed792ed7cd9a00fb6a3d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ad8e-406d-874e-ea50cd09aa94/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d5581959f59e3670</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3a588a26df71ed792ed7cd9a00fb6a3d-d5581959f59e3670-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStatsBySwimlane</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_SwimlaneCheckup_T03_fetchLatestCPEvalLogs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchLatestCPEvalLogs&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;,&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;,&quot;srn:supersonrai::ControlPolicy/ecf685ff-eb31-4f24-97d5-0f1db4738a68&quot;,&quot;srn:supersonrai::ControlPolicy/4007d909-ae91-4e1b-9e6c-a58f42647162&quot;,&quot;srn:supersonrai::ControlPolicy/dcab6cb9-cfa6-4954-8ff2-8274c1f2f180&quot;,&quot;srn:supersonrai::ControlPolicy/18ae02b6-1496-4b44-b2cd-7a7adefcb82a&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/ffd99cfa-b27a-4bed-99ae-7e845f793029&quot;,&quot;srn:stage11733927::Swimlane/3304300b-49c8-4372-8847-110905c9dbdb&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/aee2108a-c622-4653-a182-5e8bf1526110&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;,&quot;srn:stage11733927::Swimlane/b452d257-cb44-411d-9cac-0179e666deff&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/40fd992a-4d38-47e5-8857-6ba6cc792338&quot;]},&quot;query&quot;:&quot;query fetchLatestCPEvalLogs($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  ControlPolicyEvalLogsLatest(\n    where: {policySrns: $policySrns, swimlaneSrns: $swimlaneSrns}\n  ) {\n    items {\n      swimlaneSrn\n      policySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1c7f4991c576e3c6e610befb0d22a4c7</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9ddd-4b3a-b14b-216d172bec3a/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7d4084ca7957c799</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1c7f4991c576e3c6e610befb0d22a4c7-7d4084ca7957c799-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchLatestCPEvalLogs</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_SwimlaneCheckup_T04_fetchTicketCountsForPolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketCountsForPolicies&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;,&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;,&quot;srn:supersonrai::ControlPolicy/ecf685ff-eb31-4f24-97d5-0f1db4738a68&quot;,&quot;srn:supersonrai::ControlPolicy/4007d909-ae91-4e1b-9e6c-a58f42647162&quot;,&quot;srn:supersonrai::ControlPolicy/dcab6cb9-cfa6-4954-8ff2-8274c1f2f180&quot;,&quot;srn:supersonrai::ControlPolicy/18ae02b6-1496-4b44-b2cd-7a7adefcb82a&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/ffd99cfa-b27a-4bed-99ae-7e845f793029&quot;,&quot;srn:stage11733927::Swimlane/3304300b-49c8-4372-8847-110905c9dbdb&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/aee2108a-c622-4653-a182-5e8bf1526110&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;,&quot;srn:stage11733927::Swimlane/b452d257-cb44-411d-9cac-0179e666deff&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/40fd992a-4d38-47e5-8857-6ba6cc792338&quot;]},&quot;query&quot;:&quot;query fetchTicketCountsForPolicies($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  TicketRollups(\n    where: {swimlaneSrn: {op: IN_LIST, values: $swimlaneSrns}, ticketKey: {op: IN_LIST, values: $policySrns}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}}\n  ) {\n    items {\n      count\n      policySrn: ticketKey\n      swimlaneSrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">95359ce97123a427c8a7bd1860417879</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c373-42fc-93dc-fa402baff7b0/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">65cf5b16ae25c7b4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">95359ce97123a427c8a7bd1860417879-65cf5b16ae25c7b4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketCountsForPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_SwimlaneCheckup_SelectFirstSwimlane_T01_getTicketsForObjectivePolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketsForObjectivesPolicies&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/dcab6cb9-cfa6-4954-8ff2-8274c1f2f180&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/18ae02b6-1496-4b44-b2cd-7a7adefcb82a&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/ecf685ff-eb31-4f24-97d5-0f1db4738a68&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/4007d909-ae91-4e1b-9e6c-a58f42647162&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;],&quot;swimlaneSrn&quot;:&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;},&quot;query&quot;:&quot;query getTicketsForObjectivesPolicies($policySrns: [String!]!, $swimlaneSrn: String!) {\n  rollups: TicketRollups(\n    where: {resourceSRN: {value: \&quot;ALL\&quot;}, resourceType: {value: \&quot;ALL\&quot;}, resourceLabel: {value: \&quot;ALL\&quot;}, actionClassification: {value: \&quot;ALL\&quot;}, severityCategory: {value: \&quot;ALL\&quot;}, ticketKey: {op: IN_LIST, values: $policySrns}, ticketType: {value: \&quot;Policy\&quot;}, orgName: {value: \&quot;ALL\&quot;}, account: {value: \&quot;ALL\&quot;}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}, swimlaneSrns: {op: EQ, value: $swimlaneSrn}}\n  ) {\n    items {\n      ticketKey\n      count\n      swimlaneSrns\n      severityCategory\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">89d3b4bc1db93ae02a8a8345113d67f3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0ccc-4372-8502-73244ad68be7/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c79a1938fe52bc8a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">89d3b4bc1db93ae02a8a8345113d67f3-c79a1938fe52bc8a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketsForObjectivesPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_SwimlaneCheckup_SelectFirstSwimlane_T02_getStatsBySwimlane" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStatsBySwimlane&quot;,&quot;variables&quot;:{&quot;swimlaneSrn&quot;:&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;},&quot;query&quot;:&quot;query getStatsBySwimlane($swimlaneSrn: String) {\n  GroupedQuery(where: {swimlanes: [$swimlaneSrn], keys: [Label]}) {\n    key\n    items {\n      value\n      count\n      hasGroupedResult {\n        items {\n          value\n          count\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e9af623261965676da48c7ddab6fb511</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6560-4888-b78e-c5c1b3768d29/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c236e9a0012dc2b0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e9af623261965676da48c7ddab6fb511-c236e9a0012dc2b0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStatsBySwimlane</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_SwimlaneCheckup_SelectFirstSwimlane_T03_getAllPoliciesForSwimlaneCheckupDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAllPoliciesForSwimlaneCheckupDetails&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAllPoliciesForSwimlaneCheckupDetails {\n  ControlPolicies {\n    items(limit: -1) {\n      srn\n      title\n      alertingLevelNumeric\n      description\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c90ebd0dbae92bbc2c2af2c684fb948e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b68e-4bba-8115-9088af2a2ffc/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">451445a235c99aca</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c90ebd0dbae92bbc2c2af2c684fb948e-451445a235c99aca-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAllPoliciesForSwimlaneCheckupDetails</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_SwimlaneCheckup_SelectFirstSwimlane_SwimlaneCheckup_T01_fetchLatestCPEvalLogs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchLatestCPEvalLogs&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;,&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/eb046ec8-f31c-481a-8577-a9d088bcd7e8&quot;,&quot;srn:stage11733927::Swimlane/b3c77842-5f65-424d-acd9-f15dd023b5fd&quot;]},&quot;query&quot;:&quot;query fetchLatestCPEvalLogs($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  ControlPolicyEvalLogsLatest(\n    where: {policySrns: $policySrns, swimlaneSrns: $swimlaneSrns}\n  ) {\n    items {\n      swimlaneSrn\n      policySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">63020c75ec9f6208a6337cef7f8b7b0d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c610-4fd0-9ebb-599cdc0a9281/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">25c04dade1265122</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">63020c75ec9f6208a6337cef7f8b7b0d-25c04dade1265122-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchLatestCPEvalLogs</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_SwimlaneCheckup_SelectFirstSwimlane_SwimlaneCheckup_T02_fetchTicketCountsForPolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketCountsForPolicies&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;,&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/eb046ec8-f31c-481a-8577-a9d088bcd7e8&quot;,&quot;srn:stage11733927::Swimlane/b3c77842-5f65-424d-acd9-f15dd023b5fd&quot;]},&quot;query&quot;:&quot;query fetchTicketCountsForPolicies($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  TicketRollups(\n    where: {swimlaneSrn: {op: IN_LIST, values: $swimlaneSrns}, ticketKey: {op: IN_LIST, values: $policySrns}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}}\n  ) {\n    items {\n      count\n      policySrn: ticketKey\n      swimlaneSrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1d4fe39438c971c425bebbeb5ec12daa</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a4f0-4949-9bd5-e505c3b89e5a/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">65c0c4667d7e2108</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1d4fe39438c971c425bebbeb5ec12daa-65c0c4667d7e2108-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketCountsForPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_SwimlaneCheckup_SelectFirstSwimlane_SwimlaneCheckup_T03_fetchLatestestCPEvalLogs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchLatestCPEvalLogs&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;,&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;,&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;,&quot;srn:stage11733927::Swimlane/24f4367c-8a0e-4905-8811-0726d4d112bd&quot;]},&quot;query&quot;:&quot;query fetchLatestCPEvalLogs($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  ControlPolicyEvalLogsLatest(\n    where: {policySrns: $policySrns, swimlaneSrns: $swimlaneSrns}\n  ) {\n    items {\n      swimlaneSrn\n      policySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">56c4c81485587974c12ed169cb8d81b6</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bb74-44b7-bda1-e6d1424ce7c9/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0bc6b55df79aae30</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">56c4c81485587974c12ed169cb8d81b6-0bc6b55df79aae30-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchLatestCPEvalLogs</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_SwimlaneCheckup_SelectFirstSwimlane_SwimlaneCheckup_T04_fetchTicketCountsForPolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketCountsForPolicies&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;,&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;,&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;,&quot;srn:stage11733927::Swimlane/24f4367c-8a0e-4905-8811-0726d4d112bd&quot;]},&quot;query&quot;:&quot;query fetchTicketCountsForPolicies($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  TicketRollups(\n    where: {swimlaneSrn: {op: IN_LIST, values: $swimlaneSrns}, ticketKey: {op: IN_LIST, values: $policySrns}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}}\n  ) {\n    items {\n      count\n      policySrn: ticketKey\n      swimlaneSrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">be27003976c5574003c7a91b9d30d687</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8dbd-44b0-9134-644122b37fe5/t:f3c03efb/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c8eeea06cce88fa8</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">be27003976c5574003c7a91b9d30d687-c8eeea06cce88fa8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketCountsForPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_MonitoredResource_T01_getTags" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTags&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getTags {\n  Tags {\n    count\n    group {\n      key {\n        key\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">470c1458e2b9a0bfde51e99d236755e0</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:731e-4676-ab70-a8cfc85d75d2/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">761ba6139224c54b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">470c1458e2b9a0bfde51e99d236755e0-761ba6139224c54b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTags</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_MonitoredResource_T02_getAllMonitoredResources" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAllMonitoredResources&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAllMonitoredResources {\n  Resources(where: {and: [{sonraiConfig: {value: CHANGEDETECTION}}]}) {\n    items {\n      name\n      account\n      cloudType\n      lastAlertDate\n      importance\n      region\n      label\n      friendlyName\n      country\n      highestAlertSeverity\n      srn\n      active\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">bedc4f4ab4939ce028edbff76eabcf1c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bc3d-4ac8-93f1-57e243d43229/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1a21d5af24a7629d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">bedc4f4ab4939ce028edbff76eabcf1c-1a21d5af24a7629d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAllMonitoredResources</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T01_getTicketCountForResource" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketCountForResource&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query getTicketCountForResource($srn: String!) {\n  TicketRollups(\n    where: {resourceSRN: {op: EQ, value: $srn}, ticketType: {op: NEQ, value: \&quot;Property\&quot;}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}, swimlaneSrn: {value: \&quot;ALL\&quot;}}\n  ) {\n    items {\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">20b5eb886a3c38df6cfc5a989b3b7770</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:77fa-417a-bf9a-7560c98aeb7a/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b89feac358b9689a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">20b5eb886a3c38df6cfc5a989b3b7770-b89feac358b9689a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketCountForResource</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T02_getCRMTicketsForResource" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCRMTicketsForResource&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getCRMTicketsForResource {\n  Tickets(\n    where: {resourceSRN: {op: EQ, value: \&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring\&quot;}, ticketType: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Activity\&quot;, \&quot;Property\&quot;]}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}}\n  ) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      createdDate\n      createdBy\n      orgName\n      assignedTo\n      transitionedBy\n      transitionDate\n      isSnoozed\n      snoozedUntil\n      ticketType\n      ticketKey\n      description\n      title\n      status\n      account\n      firstSeen\n      lastSeen\n      lastModified\n      flag\n      evidence {\n        conditions\n        path\n        count\n        fieldType\n        boolValue\n        intValue\n        longValue\n        value\n        prevBoolValue\n        prevIntValue\n        prevLongValue\n        prevValue\n        resourceSet\n        conditions\n        path\n        regionSet\n        userAgentSet\n        __typename\n      }\n      resourceSRN\n      severityNumeric\n      severityCategory\n      swimlaneSRNs\n      actionClassification\n      resourceLabel\n      resourceType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">533fdda960aaf0d8be624b92c78dce23</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:dd6b-4c69-b6cd-7bfc0b7ebfeb/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e6036edc97f3bb46</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">533fdda960aaf0d8be624b92c78dce23-e6036edc97f3bb46-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getCRMTicketsForResource</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T03_genericSearch" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;genericSearch&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query genericSearch($srn: String) {\n  Resources: SecretStores(where: {srn: {value: $srn}}) {\n    items {\n      srn\n      sonraiConfig\n      type\n      accountDetails\n      isPublic\n      encryptionEnabled\n      versioningEnabled\n      publicRead\n      websiteEnabled\n      writeOnce\n      publicWrite\n      active\n      importance\n      auditEnabled\n      friendlyName\n      aliasSet\n      cloudType\n      account\n      lastAlertDate\n      country\n      availabilityZone\n      createdDate\n      highestAlertSeverity\n      modifiedDate\n      swimlaneCount\n      resourceId\n      region\n      sonraiConfig\n      name\n      serviceType\n      sid\n      swimlaneSRNs\n      associatedSrns\n      friendlyTypeName\n      dateLastActioned\n      createdByIdentity\n      label\n      timestamp\n      metadata\n      tagCount\n      srn\n      tagSet\n      isPopulated\n      msToPopulation\n      isResource\n      isOwnedBy {\n        items {\n          name\n          srn\n          __typename\n        }\n        __typename\n      }\n      hasTag {\n        items {\n          srn\n          key\n          value\n          __typename\n        }\n        __typename\n      }\n      isIn(where: {label: {value: \&quot;Service\&quot;}}) {\n        items {\n          isIn(where: {label: {value: \&quot;Account\&quot;}}) {\n            items {\n              name\n              friendlyName\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      resourceGroup: isIn(where: {label: {value: \&quot;ResourceGroup\&quot;}}) {\n        items {\n          srn\n          friendlyName\n          name\n          label\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c85195056d9442a68d3d8d69caa0fe73</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ec30-40a7-bba0-a921c41c4001/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e4a098af204c20b1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c85195056d9442a68d3d8d69caa0fe73-e4a098af204c20b1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">genericSearch</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T04_Query" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;variables&quot;:{},&quot;query&quot;:&quot;{\n  CDConfigs(\n    where: {resourceSrn: {value: \&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring\&quot;}, active: {value: true}}\n  ) {\n    items {\n      keyType\n      keyName\n      alertLevel\n      actionClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a632e34b06a4d5cbf7bbc3dc635cd09b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:152c-44dd-9c26-855b7695d6c8/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">911fee58274e39dc</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a632e34b06a4d5cbf7bbc3dc635cd09b-911fee58274e39dc-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T05_getOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getOptions {\n  getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    actionClassification\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f19d1ab8c7c42141ea97957ab91892f5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:046c-4d75-9a42-1bd5c06df35a/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1ae2d841a061dad4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f19d1ab8c7c42141ea97957ab91892f5-1ae2d841a061dad4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T06_secretStoreNodeViewQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;secretStoreNodeViewQuery&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query secretStoreNodeViewQuery($srn: String!) {\n  SecretStores(where: {srn: {value: $srn}}) {\n    items {\n      contains(\n        where: {label: {op: EQ, value: \&quot;Secret\&quot;}, active: {op: EQ, value: true}}\n      ) {\n        count\n        items {\n          srn\n          name\n          friendlyName\n          ... on Secret {\n            metadata\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">6c534b8a3732b9ea236e4e4a81b95b4d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6fd0-4329-8c18-5889f5fea601/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0b30765a09bc2aa1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">6c534b8a3732b9ea236e4e4a81b95b4d-0b30765a09bc2aa1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">secretStoreNodeViewQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T07_genericSearch" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;genericSearch&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;,&quot;type&quot;:&quot;Data&quot;},&quot;query&quot;:&quot;query genericSearch($srn: String, $type: ResourceType) {\n  Resources: SecretStores(where: {srn: {value: $srn}}) {\n    items {\n      srn\n      sonraiConfig\n      type\n      accountDetails\n      isPublic\n      encryptionEnabled\n      versioningEnabled\n      publicRead\n      websiteEnabled\n      writeOnce\n      publicWrite\n      active\n      importance\n      auditEnabled\n      friendlyName\n      aliasSet\n      cloudType\n      account\n      lastAlertDate\n      country\n      availabilityZone\n      createdDate\n      highestAlertSeverity\n      modifiedDate\n      swimlaneCount\n      resourceId\n      region\n      sonraiConfig\n      name\n      serviceType\n      sid\n      swimlaneSRNs\n      associatedSrns\n      friendlyTypeName\n      dateLastActioned\n      createdByIdentity\n      label\n      timestamp\n      metadata\n      tagCount\n      srn\n      tagSet\n      isPopulated\n      msToPopulation\n      isResource\n      isOwnedBy {\n        items {\n          name\n          srn\n          __typename\n        }\n        __typename\n      }\n      hasTag {\n        items {\n          srn\n          key\n          value\n          __typename\n        }\n        __typename\n      }\n      isIn(where: {label: {value: \&quot;Service\&quot;}}) {\n        items {\n          isIn(where: {label: {value: \&quot;Account\&quot;}}) {\n            items {\n              name\n              friendlyName\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      resourceGroup: isIn(where: {label: {value: \&quot;ResourceGroup\&quot;}}) {\n        items {\n          srn\n          friendlyName\n          name\n          label\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  CDConfigs(where: {resourceSrn: {value: $srn}, active: {value: true}}) {\n    items {\n      keyType\n      keyName\n      alertLevel\n      actionClassification\n      __typename\n    }\n    __typename\n  }\n  getChangeDetectionOptions(resourceType: $type) {\n    keyType\n    keyName\n    actionClassification\n    __typename\n  }\n  resource_swimlane: Resources(where: {srn: {value: $srn}}) {\n    items(limit: 1) {\n      swimlane {\n        items {\n          description\n          label\n          title\n          srn\n          defaultImportance\n          createdBy\n          sid\n          lastModified\n          createdDate\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">806ed1a95caf12458590ee048b4d3696</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d657-4463-9061-2c97398e682c/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a9ae61d919a494e4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">806ed1a95caf12458590ee048b4d3696-a9ae61d919a494e4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">genericSearch</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T08_getResourceGroupForNode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getResourceGroupForNode&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query getResourceGroupForNode($srn: String!) {\n  Resources(where: {isIn: {}, srn: {value: $srn}}) {\n    items {\n      srn\n      label\n      isIn(where: {active: {value: true}}) {\n        items {\n          friendlyName\n          name\n          srn\n          label\n          isIn(where: {label: {value: \&quot;ResourceGroup\&quot;}, active: {value: true}}) {\n            items {\n              friendlyName\n              name\n              srn\n              label\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">cd914e6f40a35a67fafb9ef804f2d7a4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a510-42f0-813d-9b9432aa3d18/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">dc411bba43f9194d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">cd914e6f40a35a67fafb9ef804f2d7a4-dc411bba43f9194d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getResourceGroupForNode</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T09_getEscalations" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEscalations&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getEscalations {\n  EscalationSchemes {\n    items {\n      srn\n      title\n      description\n      createdBy\n      createdDate\n      resourceId\n      assignments {\n        srn\n        swimlaneSRN\n        allSwimlanes\n        resourceId\n        __typename\n      }\n      filters {\n        srn\n        createdDate\n        createdBy\n        ticketType\n        ticketKey\n        allKeys\n        allTypes\n        controlFrameworkSrn\n        severity\n        onlyCreatedAfterDate\n        __typename\n      }\n      rules {\n        srn\n        triggerAfter\n        triggerAfterDate\n        actionType\n        assignUser {\n          userSrn\n          __typename\n        }\n        assignRole {\n          roleType: ActionRoleType\n          __typename\n        }\n        escalateToBot {\n          botSrn\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e512415034741f462b2d4460d36a5343</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a735-4b64-8ec0-46ea19f46c93/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9809cff710d41d4a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e512415034741f462b2d4460d36a5343-9809cff710d41d4a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getEscalations</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_MonitoredResource_SlectFirstRecord_T10_fetchTicketTemplates" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketTemplates&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchTicketTemplates {\n  TicketTemplates {\n    items(limit: 1000, orderBy: [{title: {order: ASC}}]) {\n      srn\n      title\n      description\n      fields {\n        name\n        required\n        type\n        multi\n        description\n        select {\n          search\n          searchFieldMap {\n            items {\n              value\n              key\n              __typename\n            }\n            __typename\n          }\n          path\n          valueField\n          labelFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f16e3a03657679ff40555a9aa64c9053</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6d39-42c2-b7d1-127ff15743f7/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">287f53144b607ffc</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f16e3a03657679ff40555a9aa64c9053-287f53144b607ffc-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketTemplates</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T01_getTicketCountForResource" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTicketCountForResource&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query getTicketCountForResource($srn: String!) {\n  TicketRollups(\n    where: {resourceSRN: {op: EQ, value: $srn}, ticketType: {op: NEQ, value: \&quot;Property\&quot;}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}, swimlaneSrn: {value: \&quot;ALL\&quot;}}\n  ) {\n    items {\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91e070f76444b4fa0d72323be03cd01c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9f5e-4ae1-8e51-780c99adc5f5/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">4aa90fc830987e9b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91e070f76444b4fa0d72323be03cd01c-4aa90fc830987e9b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTicketCountForResource</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T02_getCRMTicketForResource" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCRMTicketsForResource&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getCRMTicketsForResource {\n  Tickets(\n    where: {resourceSRN: {op: EQ, value: \&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring\&quot;}, ticketType: {op: IN_LIST, values: [\&quot;Access\&quot;, \&quot;Activity\&quot;, \&quot;Property\&quot;]}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}}\n  ) {\n    items(limit: 1000) {\n      srn\n      resourceId\n      createdDate\n      createdBy\n      orgName\n      assignedTo\n      transitionedBy\n      transitionDate\n      isSnoozed\n      snoozedUntil\n      ticketType\n      ticketKey\n      description\n      title\n      status\n      account\n      firstSeen\n      lastSeen\n      lastModified\n      flag\n      evidence {\n        conditions\n        path\n        count\n        fieldType\n        boolValue\n        intValue\n        longValue\n        value\n        prevBoolValue\n        prevIntValue\n        prevLongValue\n        prevValue\n        resourceSet\n        conditions\n        path\n        regionSet\n        userAgentSet\n        __typename\n      }\n      resourceSRN\n      severityNumeric\n      severityCategory\n      swimlaneSRNs\n      actionClassification\n      resourceLabel\n      resourceType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">052a5baff5757dec5b3b2b2f51857484</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2c59-4f83-94f4-a6fbf30a8fbb/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d841fc2ad0ecb680</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">052a5baff5757dec5b3b2b2f51857484-d841fc2ad0ecb680-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getCRMTicketsForResource</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T03_genericSearch" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;genericSearch&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query genericSearch($srn: String) {\n  Resources: SecretStores(where: {srn: {value: $srn}}) {\n    items {\n      srn\n      sonraiConfig\n      type\n      accountDetails\n      isPublic\n      encryptionEnabled\n      versioningEnabled\n      publicRead\n      websiteEnabled\n      writeOnce\n      publicWrite\n      active\n      importance\n      auditEnabled\n      friendlyName\n      aliasSet\n      cloudType\n      account\n      lastAlertDate\n      country\n      availabilityZone\n      createdDate\n      highestAlertSeverity\n      modifiedDate\n      swimlaneCount\n      resourceId\n      region\n      sonraiConfig\n      name\n      serviceType\n      sid\n      swimlaneSRNs\n      associatedSrns\n      friendlyTypeName\n      dateLastActioned\n      createdByIdentity\n      label\n      timestamp\n      metadata\n      tagCount\n      srn\n      tagSet\n      isPopulated\n      msToPopulation\n      isResource\n      isOwnedBy {\n        items {\n          name\n          srn\n          __typename\n        }\n        __typename\n      }\n      hasTag {\n        items {\n          srn\n          key\n          value\n          __typename\n        }\n        __typename\n      }\n      isIn(where: {label: {value: \&quot;Service\&quot;}}) {\n        items {\n          isIn(where: {label: {value: \&quot;Account\&quot;}}) {\n            items {\n              name\n              friendlyName\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      resourceGroup: isIn(where: {label: {value: \&quot;ResourceGroup\&quot;}}) {\n        items {\n          srn\n          friendlyName\n          name\n          label\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">aac57d9953f7a2073891da534ea39d11</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8708-47cd-8076-5125f0c85f11/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">59b0733bfb3090b0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">aac57d9953f7a2073891da534ea39d11-59b0733bfb3090b0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">genericSearch</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T04_secretStoreNodeViewQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;secretStoreNodeViewQuery&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query secretStoreNodeViewQuery($srn: String!) {\n  SecretStores(where: {srn: {value: $srn}}) {\n    items {\n      contains(\n        where: {label: {op: EQ, value: \&quot;Secret\&quot;}, active: {op: EQ, value: true}}\n      ) {\n        count\n        items {\n          srn\n          name\n          friendlyName\n          ... on Secret {\n            metadata\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">0e5f196dce7e32eeb6ae7b0e0f072470</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5a4e-4269-ac12-e2987a73ac61/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f6b1ef86fac78e80</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">0e5f196dce7e32eeb6ae7b0e0f072470-f6b1ef86fac78e80-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">secretStoreNodeViewQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T06_genericSearch" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;genericSearch&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;,&quot;type&quot;:&quot;Data&quot;},&quot;query&quot;:&quot;query genericSearch($srn: String, $type: ResourceType) {\n  Resources: SecretStores(where: {srn: {value: $srn}}) {\n    items {\n      srn\n      sonraiConfig\n      type\n      accountDetails\n      isPublic\n      encryptionEnabled\n      versioningEnabled\n      publicRead\n      websiteEnabled\n      writeOnce\n      publicWrite\n      active\n      importance\n      auditEnabled\n      friendlyName\n      aliasSet\n      cloudType\n      account\n      lastAlertDate\n      country\n      availabilityZone\n      createdDate\n      highestAlertSeverity\n      modifiedDate\n      swimlaneCount\n      resourceId\n      region\n      sonraiConfig\n      name\n      serviceType\n      sid\n      swimlaneSRNs\n      associatedSrns\n      friendlyTypeName\n      dateLastActioned\n      createdByIdentity\n      label\n      timestamp\n      metadata\n      tagCount\n      srn\n      tagSet\n      isPopulated\n      msToPopulation\n      isResource\n      isOwnedBy {\n        items {\n          name\n          srn\n          __typename\n        }\n        __typename\n      }\n      hasTag {\n        items {\n          srn\n          key\n          value\n          __typename\n        }\n        __typename\n      }\n      isIn(where: {label: {value: \&quot;Service\&quot;}}) {\n        items {\n          isIn(where: {label: {value: \&quot;Account\&quot;}}) {\n            items {\n              name\n              friendlyName\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      resourceGroup: isIn(where: {label: {value: \&quot;ResourceGroup\&quot;}}) {\n        items {\n          srn\n          friendlyName\n          name\n          label\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  CDConfigs(where: {resourceSrn: {value: $srn}, active: {value: true}}) {\n    items {\n      keyType\n      keyName\n      alertLevel\n      actionClassification\n      __typename\n    }\n    __typename\n  }\n  getChangeDetectionOptions(resourceType: $type) {\n    keyType\n    keyName\n    actionClassification\n    __typename\n  }\n  resource_swimlane: Resources(where: {srn: {value: $srn}}) {\n    items(limit: 1) {\n      swimlane {\n        items {\n          description\n          label\n          title\n          srn\n          defaultImportance\n          createdBy\n          sid\n          lastModified\n          createdDate\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">79930156b7a5cdbcae96eaab040c7326</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:806b-4e56-819b-26f8fb8bdc0d/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b4bab5f6c3cc6b80</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">79930156b7a5cdbcae96eaab040c7326-b4bab5f6c3cc6b80-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">genericSearch</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T07_getResourceGroupForNode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getResourceGroupForNode&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query getResourceGroupForNode($srn: String!) {\n  Resources(where: {isIn: {}, srn: {value: $srn}}) {\n    items {\n      srn\n      label\n      isIn(where: {active: {value: true}}) {\n        items {\n          friendlyName\n          name\n          srn\n          label\n          isIn(where: {label: {value: \&quot;ResourceGroup\&quot;}, active: {value: true}}) {\n            items {\n              friendlyName\n              name\n              srn\n              label\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c2abac0945202e238aa3f6a0aa541761</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:542a-4974-bd96-311def1108b5/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">76414bd022730295</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c2abac0945202e238aa3f6a0aa541761-76414bd022730295-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getResourceGroupForNode</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T08_fetchTicketTemplate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketTemplates&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchTicketTemplates {\n  TicketTemplates {\n    items(limit: 1000, orderBy: [{title: {order: ASC}}]) {\n      srn\n      title\n      description\n      fields {\n        name\n        required\n        type\n        multi\n        description\n        select {\n          search\n          searchFieldMap {\n            items {\n              value\n              key\n              __typename\n            }\n            __typename\n          }\n          path\n          valueField\n          labelFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b9f595c34c0e1419096f413ca37aed0d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a58a-4248-be40-ada41dee5e65/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8780aa3f0f2897fe</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b9f595c34c0e1419096f413ca37aed0d-8780aa3f0f2897fe-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketTemplates</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T09_query" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;variables&quot;:{},&quot;query&quot;:&quot;{\n  CDConfigs(\n    where: {resourceSrn: {value: \&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring\&quot;}, active: {value: true}}\n  ) {\n    items {\n      keyType\n      keyName\n      alertLevel\n      actionClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">01d60d30fdade33ff9fefc14c8ccd62f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8528-41c1-939b-a752b413e1b4/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fb2cd9b0c469fbb6</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">01d60d30fdade33ff9fefc14c8ccd62f-fb2cd9b0c469fbb6-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T10_secretStoreNodeViewQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;secretStoreNodeViewQuery&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query secretStoreNodeViewQuery($srn: String!) {\n  SecretStores(where: {srn: {value: $srn}}) {\n    items {\n      contains(\n        where: {label: {op: EQ, value: \&quot;Secret\&quot;}, active: {op: EQ, value: true}}\n      ) {\n        count\n        items {\n          srn\n          name\n          friendlyName\n          ... on Secret {\n            metadata\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a8aa4bc0eb155c6c7e21e80e5a4a0729</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5993-4ab6-9748-fe1fd4dbe823/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ebde73229f2c17a7</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a8aa4bc0eb155c6c7e21e80e5a4a0729-ebde73229f2c17a7-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">secretStoreNodeViewQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T11_getResourceGroupForNode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getResourceGroupForNode&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query getResourceGroupForNode($srn: String!) {\n  Resources(where: {isIn: {}, srn: {value: $srn}}) {\n    items {\n      srn\n      label\n      isIn(where: {active: {value: true}}) {\n        items {\n          friendlyName\n          name\n          srn\n          label\n          isIn(where: {label: {value: \&quot;ResourceGroup\&quot;}, active: {value: true}}) {\n            items {\n              friendlyName\n              name\n              srn\n              label\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">20cfc3227dd1fca8e0819b8353999b09</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:51e8-4304-b197-a6235e3b112d/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8ce404184745a58b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">20cfc3227dd1fca8e0819b8353999b09-8ce404184745a58b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getResourceGroupForNode</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T12_fetchTicketTemplate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketTemplates&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchTicketTemplates {\n  TicketTemplates {\n    items(limit: 1000, orderBy: [{title: {order: ASC}}]) {\n      srn\n      title\n      description\n      fields {\n        name\n        required\n        type\n        multi\n        description\n        select {\n          search\n          searchFieldMap {\n            items {\n              value\n              key\n              __typename\n            }\n            __typename\n          }\n          path\n          valueField\n          labelFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d7da9e4272dfc47f84d03a82be8e8a0f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5ceb-410b-ab01-abe98dd0895d/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">80e103d910d5606c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d7da9e4272dfc47f84d03a82be8e8a0f-80e103d910d5606c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketTemplates</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T13_getDirectAttachedPolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDirectAttachedPolicies&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query getDirectAttachedPolicies($srn: String!) {\n  Resources(where: {srn: {value: $srn}}) {\n    items {\n      srn\n      hasPermissionMask {\n        items {\n          srn\n          account\n          cloudType\n          type\n          name\n          label\n          metadata\n          __typename\n        }\n        __typename\n      }\n      hasAttached(where: {active: {value: true}}) {\n        items {\n          srn\n          account\n          cloudType\n          type\n          resourceId\n          name\n          label\n          metadata\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">734373230ea7bca5a90e3e987cba6b3c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:56ef-43a6-baec-9d132e078c58/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2bb336652d5be28c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">734373230ea7bca5a90e3e987cba6b3c-2bb336652d5be28c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDirectAttachedPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T14_getUser" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;get_user&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;},&quot;query&quot;:&quot;query get_user($srn: String) {\n  Resources(where: {srn: {value: $srn}}) {\n    items @skip(if: false) {\n      srn\n      name\n      account\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">52a095349093c72cd01d4efec0c380e3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f797-4c86-8e55-3da6e5318214/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">4e7721cb1df70e06</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">52a095349093c72cd01d4efec0c380e3-4e7721cb1df70e06-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">get_user</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T15_showPathModalNames" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;showPathModalNames&quot;,&quot;variables&quot;:{&quot;srns&quot;:[&quot;srn:gcp:cloudkms::GCPProject|testomg/SecretStore/GcpKMSKeyRing/locations/global/keyRings/example-key-ring&quot;]},&quot;query&quot;:&quot;query showPathModalNames($srns: [String]) {\n  Resources(where: {srn: {op: IN_LIST, values: $srns}}) {\n    items {\n      friendlyName\n      name\n      srn\n      friendlyTypeName\n      label\n      cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">4aa0de004011720bcb0c6a9c2943b948</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:68f1-41a7-99f9-fc8dd0f8de05/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c81b9d5735836e43</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">4aa0de004011720bcb0c6a9c2943b948-c81b9d5735836e43-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">showPathModalNames</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T16_getCanAccessFromEPDefaultGCP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCanAccessFromEPDefaultGCP&quot;,&quot;variables&quot;:{&quot;limit&quot;:10000,&quot;epFilter&quot;:{&quot;permissionActionClassifications&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;dataread&quot;,&quot;caseSensitive&quot;:false},&quot;permissionServiceType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;cloudkms&quot;,&quot;caseSensitive&quot;:false},&quot;gcpResource&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;//cloudkms.googleapis.com/projects/testomg/locations/global/keyRings/example-key-ring&quot;,&quot;caseSensitive&quot;:false}}},&quot;query&quot;:&quot;query getCanAccessFromEPDefaultGCP($epFilter: EffectivePermissionFilterType!, $limit: Int = 10000) {\n  Actors(\n    where: {and: [{and: [{active: {op: EQ, value: true}}]}, {}, {}], hasEffectivePermissions: {includes: [$epFilter]}}\n  ) {\n    items {\n      hasEffectivePermissions(\n        limit: $limit\n        distinct: [permissionActionClassifications]\n        where: {includes: [$epFilter]}\n      ) {\n        items {\n          permissionActionClassifications\n          __typename\n        }\n        __typename\n      }\n      Who: name\n      srn: srn\n      __typename\n      ... on User {\n        type\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">16f5120ae9d28e180a88089ffda5b34a</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d275-453c-831b-51eecd1f2b54/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6634262748f89698</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">16f5120ae9d28e180a88089ffda5b34a-6634262748f89698-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getCanAccessFromEPDefaultGCP</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T17_getOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getOptions {\n  getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    actionClassification\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">259028ea9726efa7f1a30a1967ad8da1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c3c3-481b-bc74-0605e015a646/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">cc93bacf02e0b960</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">259028ea9726efa7f1a30a1967ad8da1-cc93bacf02e0b960-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_MonitoredResource_SlectFirstRecord_GotoFullNodeView_T18_get_account_scps" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;get_account_scps&quot;,&quot;variables&quot;:{&quot;account&quot;:&quot;GCPProject|testomg&quot;,&quot;accountSrn&quot;:&quot;srn:gcp:account::GCPProject|testomg/Account/GCPProject|testomg&quot;},&quot;query&quot;:&quot;fragment directAttachedPoliciesFields on Resource {\n  srn\n  name\n  label\n  hasAttached(where: {active: {value: true}}) {\n    items {\n      srn\n      cloudType\n      account\n      name\n      metadata\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nquery get_account_scps($account: String, $accountSrn: String) {\n  Accounts(where: {srn: {value: $accountSrn}}) {\n    items {\n      ...directAttachedPoliciesFields\n      organizedBy {\n        items {\n          ...directAttachedPoliciesFields\n          organizedBy {\n            items {\n              ...directAttachedPoliciesFields\n              organizedBy {\n                items {\n                  ...directAttachedPoliciesFields\n                  organizedBy {\n                    items {\n                      ...directAttachedPoliciesFields\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  Users(\n    where: {srn: {and: [{op: CONTAINS, value: \&quot;Root\&quot;}, {op: CONTAINS, value: $account}]}}\n  ) {\n    items {\n      ...directAttachedPoliciesFields\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9ad4129698bd8118920416d71e9bb813</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d782-460a-9f5f-af8553476c86/t:81bc71d4/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ff4b364da25e8fdb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9ad4129698bd8118920416d71e9bb813-ff4b364da25e8fdb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">get_account_scps</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Managed_Save_Search_T01_getNodeTypeCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNodeTypeCounts&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getNodeTypeCounts {\n  GroupedQuery(where: {keys: [Label]}) {\n    key\n    items {\n      value\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3136aab225d9338360a7d81845ce82de</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a6be-4894-9cb3-96ea2322932a/t:a57a7569/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">cd5a58e2325e8303</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3136aab225d9338360a7d81845ce82de-cd5a58e2325e8303-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getNodeTypeCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T00_Graphql" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;variables&quot;:{},&quot;query&quot;:&quot;\n        {\n          __schema {\n            types {\n              kind\n              name\n              possibleTypes {\n                name\n              }\n            }\n          }\n        }\n      &quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9b341da3511995a0aec9b709672a568e</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d4f58eb02b5045eb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9b341da3511995a0aec9b709672a568e-d4f58eb02b5045eb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T01_currentUser" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;currentUser&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query currentUser {\n  SonraiCurrentUsers {\n    items {\n      profile\n      srn\n      roleAssignments {\n        items {\n          scope\n          role {\n            items {\n              expandedPermissions\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9b9a836fb54f095e1d9bf1e8a83ac088</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1ffa-4501-bb2a-165e9ee63c2e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">586dd695c626c132</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9b9a836fb54f095e1d9bf1e8a83ac088-586dd695c626c132-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">currentUser</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T02_currentUser" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;currentUser&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query currentUser {\n  SonraiCurrentUsers {\n    items {\n      profile\n      srn\n      eulaAcceptances {\n        items {\n          eulaUrl\n          acceptDate\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c0eb0c80c08607c3cf4fb665c40d08ce</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:62ac-4c44-9b35-470339a0dbc1/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7bd7a30dc253abfd</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c0eb0c80c08607c3cf4fb665c40d08ce-7bd7a30dc253abfd-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">currentUser</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T03_getSonraiUsers" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSonraiUsers&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSonraiUsers {\n  SonraiUsers {\n    items {\n      srn\n      email\n      name\n      isActive\n      lastLogin\n      resourceId\n      roleAssignments {\n        items {\n          srn\n          scope\n          resourceId\n          role {\n            items {\n              srn\n              resourceId\n              name\n              description\n              permissions\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      orgs\n      avatarUrl\n      lastLogin\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2ccc28776bf766a0c942df4e807b3c75</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7a9c-46eb-9db1-8a9de8159086/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">3bb35f9911d4b5b0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2ccc28776bf766a0c942df4e807b3c75-3bb35f9911d4b5b0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSonraiUsers</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T04_getSonraiUIConfig" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSonraiUIConfig&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSonraiUIConfig {\n  SonraiUiConfigs {\n    items {\n      config\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">6ac8d0235dca83a9bee8d7df95386ba4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9684-49d2-aca2-1a1223e7040c/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">86985751a7df497c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">6ac8d0235dca83a9bee8d7df95386ba4-86985751a7df497c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSonraiUIConfig</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T05_getAllEnvironments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAllEnvironments&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAllEnvironments {\n  Environments {\n    count\n    items {\n      description\n      label\n      friendlyName\n      targetMaturityLevel\n      name\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">060d232122ea4b68e2f6a9efccd8b49f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:68ef-434d-b03e-7cc6714b40e7/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d4bda71c439793c0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">060d232122ea4b68e2f6a9efccd8b49f-d4bda71c439793c0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAllEnvironments</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T06_getAllSecurityAreas" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAllSecurityAreas&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAllSecurityAreas {\n  SecurityAreas {\n    count\n    items {\n      description\n      label\n      name\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">75745b17aa58e2f78fdd9602195fc1a5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3048-41fc-b49c-ba95d373b711/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c71aeb52fdcab443</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">75745b17aa58e2f78fdd9602195fc1a5-c71aeb52fdcab443-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAllSecurityAreas</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T07_getAllMaturityLevels" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAllMaturityLevels&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAllMaturityLevels {\n  MaturityLevels {\n    count\n    items {\n      description\n      label\n      level\n      name\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">68f1aca811541e14e52247f53fdb2bed</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7226-48d1-be10-47e699187023/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">40f3205835a7ce9c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">68f1aca811541e14e52247f53fdb2bed-40f3205835a7ce9c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAllMaturityLevels</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T08_getCollectorConfigurations" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCollectorConfigurations&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getCollectorConfigurations {\n  CollectorConfigurations {\n    items {\n      id\n      srn\n      targetSrn\n      platformAccountSrn\n      blob\n      enabled\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">08115f66ac791ade03a7ee40dd12436a</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:24d0-4a38-98a6-420311417901/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8d8bc02c988a6ee6</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">08115f66ac791ade03a7ee40dd12436a-8d8bc02c988a6ee6-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getCollectorConfigurations</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T09_getSonraiOrgConfig" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSonraiOrgConfig&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSonraiOrgConfig {\n  SonraiOrgConfig {\n    orgName\n    features\n    configs\n    limits\n    subscriptionType\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">54e3fb7b51622f7e53b6e0ba5b4a2077</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:841f-4e78-a17e-ce8b5464d2b5/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f8b80f403569f922</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">54e3fb7b51622f7e53b6e0ba5b4a2077-f8b80f403569f922-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSonraiOrgConfig</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T10_IntrospectionQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;IntrospectionQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query IntrospectionQuery {\n  Queries(source: DATA)\n  Relations {\n    type\n    label\n    relations {\n      name\n      reverse\n      to\n      from\n      __typename\n    }\n    interfaces {\n      type\n      relations {\n        name\n        reverse\n        to\n        from\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  PivotedIntrospection {\n    types\n    __typename\n  }\n  __type(name: \&quot;Query\&quot;) {\n    fields {\n      name\n      type {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e0535adc7e879ca137aff6d945ae0d07</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7cba-4977-8400-009e551c5240/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">81e6d50a39263d3c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e0535adc7e879ca137aff6d945ae0d07-81e6d50a39263d3c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">pivoted-inspection-query</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T11_get_all_roles" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;get_all_roles&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query get_all_roles {\n  SonraiRoles {\n    items {\n      name\n      srn\n      permissions\n      expandedPermissions\n      description\n      resourceId\n      roleAssignments {\n        items {\n          scope\n          srn\n          user {\n            items {\n              srn\n              name\n              email\n              resourceId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">02a20e083e317a1fa4138673e57b6bb5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3d89-47a7-94f6-f75bb0643a37/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8afdf60471f11c15</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">02a20e083e317a1fa4138673e57b6bb5-8afdf60471f11c15-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">get_all_roles</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T12_getSonraiSeaches" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSonraiSeaches&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSonraiSeaches {\n  SavedQueries {\n    items(limit: -1) {\n      name\n      query\n      variables {\n        items {\n          defaultValue\n          name\n          __typename\n        }\n        __typename\n      }\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e75c2a1f7e75f44f9be54f0617b0a335</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c6f5-43af-b1e5-4080eb609582/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e8bbdab82b220100</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e75c2a1f7e75f44f9be54f0617b0a335-e8bbdab82b220100-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSonraiSeaches</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T13_getSavedSearches" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSavedSearches&quot;,&quot;variables&quot;:{&quot;includeDetails&quot;:false},&quot;query&quot;:&quot;query getSavedSearches($includeDetails: Boolean = true) {\n  Searches {\n    items(limit: -1) {\n      name\n      description\n      query\n      createdDate\n      createdBy\n      sid\n      srn\n      lastModified\n      rootQueryName\n      resourceId\n      containedByWidget @include(if: $includeDetails) {\n        count\n        items(limit: -1) {\n          title\n          type\n          srn\n          containedBy {\n            items {\n              name\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      containedByControlPolicy @include(if: $includeDetails) {\n        count\n        items(limit: -1) {\n          title\n          srn\n          __typename\n        }\n        __typename\n      }\n      ownedByOrganization @include(if: $includeDetails) {\n        items {\n          sid\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7a2ff10f92c78065bf8b65bd5b30b4c6</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:535e-4eb6-9f21-e7f93e9a206a/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2102f28dac683976</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7a2ff10f92c78065bf8b65bd5b30b4c6-2102f28dac683976-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSavedSearches</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T14_fetchSwimlanes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchSwimlanes&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchSwimlanes {\n  Swimlanes {\n    items(limit: -1) {\n      description\n      label\n      title\n      srn\n      defaultImportance\n      createdBy\n      sid\n      preventionEnabled\n      lastModified\n      createdDate\n      name\n      accounts\n      names\n      resourceIds\n      tags\n      resourceId\n      environments\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c8c651858775f519419d1388c432f03d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:75a7-4bad-8a34-b66e2a3c2b39/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">676ce9977a22257a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c8c651858775f519419d1388c432f03d-676ce9977a22257a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchSwimlanes</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T15_getAccounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAccounts&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAccounts {\n  Accounts {\n    items(limit: -1) {\n      name\n      srn\n      friendlyName\n      account\n      cloudType\n      type\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">034be4eee2444b1f8b089d424e6ace48</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5849-4f7f-a039-937a0823c7dc/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a8e33aa8225da371</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">034be4eee2444b1f8b089d424e6ace48-a8e33aa8225da371-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAccounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T16_getSubscriptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSubscriptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSubscriptions {\n  Subscriptions {\n    items(limit: -1) {\n      friendlyName\n      name\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">164a61fbb6428a448dba9e81ca7ba809</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:55e2-47ec-8d2f-6ebc664f169c/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1f9b1f7a0fa7539a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">164a61fbb6428a448dba9e81ca7ba809-1f9b1f7a0fa7539a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSubscriptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T17_getControlFrameworks" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getControlFrameworks&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getControlFrameworks {\n  ControlFrameworks {\n    count\n    items(limit: -1) {\n      enabled\n      lastModified\n      title\n      createdDate\n      createdBy\n      description\n      name\n      srn\n      resourceId\n      shortDescription\n      createdBy\n      swimlaneSRNs\n      lastRunDate\n      lastRunSwimlanes\n      ownedByOrganization {\n        items {\n          sid\n          name\n          __typename\n        }\n        __typename\n      }\n      contains {\n        count\n        items {\n          srn\n          __typename\n        }\n        __typename\n      }\n      cloneOf {\n        count\n        items {\n          srn\n          __typename\n        }\n        __typename\n      }\n      clonedBy {\n        count\n        items {\n          srn\n          ... on Controlframework {\n            swimlaneSRNs\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">fe6d1473f8b2e17ed438f679c9e81e55</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c647-4015-ab21-6cd02e61b2c3/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">4eace98ac32919ab</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">fe6d1473f8b2e17ed438f679c9e81e55-4eace98ac32919ab-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getControlFrameworks</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T18_getResourceLabels" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getResourceLabels&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getResourceLabels {\n  Relations(where: {type: {value: \&quot;Resource\&quot;}}) {\n    label\n    implementingTypes {\n      label\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1c49959ed11c43465f02ce8593f2c996</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2619-4ba4-9afc-29c6ee7d21cd/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2860054303f7b503</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1c49959ed11c43465f02ce8593f2c996-2860054303f7b503-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getResourceLabels</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T19_saveUserProfile" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;saveUserProfile&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation saveUserProfile($profile: Blob) {\n  UpdateSonraiCurrentUsers(input: [{profile: $profile}]) {\n    items {\n      srn\n      profile\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2963a9c07c54e3857401c9b49701376a</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4dfe-42e3-a8bd-b726152bbf02/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">16934ec91e53b10b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2963a9c07c54e3857401c9b49701376a-16934ec91e53b10b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">saveUserProfile</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T20_getSavedSearches" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSavedSearches&quot;,&quot;variables&quot;:{&quot;includeDetails&quot;:true},&quot;query&quot;:&quot;query getSavedSearches($includeDetails: Boolean = true) {\n  Searches {\n    items(limit: -1) {\n      name\n      description\n      query\n      createdDate\n      createdBy\n      sid\n      srn\n      lastModified\n      rootQueryName\n      resourceId\n      containedByWidget @include(if: $includeDetails) {\n        count\n        items(limit: -1) {\n          title\n          type\n          srn\n          containedBy {\n            items {\n              name\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      containedByControlPolicy @include(if: $includeDetails) {\n        count\n        items(limit: -1) {\n          title\n          srn\n          __typename\n        }\n        __typename\n      }\n      ownedByOrganization @include(if: $includeDetails) {\n        items {\n          sid\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">4e37a74a9394a616a9ff71d63ecf3b95</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ebcd-48b4-9f3e-d5b4b4321afe/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8959b0bdf6e95787</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">4e37a74a9394a616a9ff71d63ecf3b95-8959b0bdf6e95787-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSavedSearches</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T21_sonrai_user" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;sonrai_user&quot;,&quot;variables&quot;:{&quot;srn&quot;:&quot;srn:stage11733927::SonraiUser/40e2156d-22d7-4b0b-94ec-1d029f565cb8&quot;},&quot;query&quot;:&quot;query sonrai_user($srn: String) {\n  SonraiUsers(where: {srn: {value: $srn}}) {\n    items {\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">187d651c9c3cfbd71e9b60c512708079</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bac5-433b-87ae-f9eb1929af49/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">3b49d583d38aaa22</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">187d651c9c3cfbd71e9b60c512708079-3b49d583d38aaa22-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">sonrai_user</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T22_getReportPoll" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getReportPoll&quot;,&quot;variables&quot;:{&quot;ids&quot;:[],&quot;userSrn&quot;:null},&quot;query&quot;:&quot;query getReportPoll($userSrn: String!, $ids: [Long!]!) {\n  SonraiReports(\n    where: {id: {op: IN_LIST, values: $ids}, createdBy: {value: $userSrn}}\n  ) {\n    items {\n      name\n      id\n      status\n      createdDate\n      reportConfig {\n        config\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">ffd58d24f2e17e9a666763b8d1b21fad</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4067-4fab-84a3-2d813b144771/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">663ba1850d5f7ddf</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">ffd58d24f2e17e9a666763b8d1b21fad-663ba1850d5f7ddf-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getReportPoll</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T23_getServiceTypes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getServiceTypes&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getServiceTypes {\n  ServiceTypes {\n    items {\n      name\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">0a46189e4f5b3e9001f2fddaf27fbad6</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:faa1-480a-be54-39c3a7b97731/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a5e2862c256eeca2</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">0a46189e4f5b3e9001f2fddaf27fbad6-a5e2862c256eeca2-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getServiceTypes</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T24_getReportPoll" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getReportPoll&quot;,&quot;variables&quot;:{&quot;ids&quot;:[],&quot;userSrn&quot;:&quot;srn:stage11733927::SonraiUser/40e2156d-22d7-4b0b-94ec-1d029f565cb8&quot;},&quot;query&quot;:&quot;query getReportPoll($userSrn: String!, $ids: [Long!]!) {\n  SonraiReports(\n    where: {id: {op: IN_LIST, values: $ids}, createdBy: {value: $userSrn}}\n  ) {\n    items {\n      name\n      id\n      status\n      createdDate\n      reportConfig {\n        config\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7527-4c78-bdd5-808201245d0c/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6d11430c418d0676</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-6d11430c418d0676-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getReportPoll</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T25_getReportsInit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getReportsInit&quot;,&quot;variables&quot;:{&quot;userSrn&quot;:&quot;srn:stage11733927::SonraiUser/40e2156d-22d7-4b0b-94ec-1d029f565cb8&quot;},&quot;query&quot;:&quot;query getReportsInit($userSrn: String!) {\n  SonraiReports(where: {createdBy: {value: $userSrn}}) {\n    items {\n      name\n      id\n      status\n      createdDate\n      reportConfig {\n        config\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0aa9-4bfe-a31d-f7c65147e189/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c18aadef4e318568</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-c18aadef4e318568-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getReportsInit</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T26_licensing" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;licensing&quot;,&quot;variables&quot;:{&quot;ComputeFilters&quot;:{&quot;type&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;EC2&quot;,&quot;GCPVMInstance&quot;,&quot;VirtualMachine&quot;,&quot;OCIInstance&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;AccountFilters&quot;:{&quot;type&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;AWSAccount&quot;,&quot;GCPProject&quot;,&quot;AzureTenant&quot;]},&quot;active&quot;:{&quot;value&quot;:true}},&quot;SubscriptionFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true}},&quot;OCI_dynamicgroups&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;OCIDynamicGroup&quot;},&quot;active&quot;:{&quot;value&quot;:true}},&quot;OCI_Users&quot;:{&quot;type&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;OCIUser&quot;},&quot;active&quot;:{&quot;value&quot;:true}},&quot;AWS_RolesFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true}},&quot;GCP_ServiceAccountsFilters&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;GCPServiceAccount&quot;},&quot;active&quot;:{&quot;value&quot;:true}},&quot;Azure_ServicePrincipalsFilters&quot;:{&quot;type&quot;:{&quot;value&quot;:&quot;ServicePrincipal&quot;},&quot;active&quot;:{&quot;value&quot;:true},&quot;metadata&quot;:{&quot;op&quot;:&quot;NOT_CONTAINS&quot;,&quot;value&quot;:&quot;servicePrincipal.appOwnerOrganizationId:f8cdef31-a31e-4b4a-93e4-5f571e91255a&quot;},&quot;or&quot;:[{&quot;hasAttached&quot;:{&quot;count&quot;:{&quot;op&quot;:&quot;GT&quot;,&quot;value&quot;:0}}},{&quot;isMemberOf&quot;:{&quot;items&quot;:{&quot;hasAttached&quot;:{&quot;count&quot;:{&quot;op&quot;:&quot;GT&quot;,&quot;value&quot;:0}}}}}]}},&quot;query&quot;:&quot;query licensing($Azure_ServicePrincipalsFilters: UserFilter, $GCP_ServiceAccountsFilters: UserFilter, $AWS_RolesFilters: RoleFilter, $OCI_Users: UserFilter, $OCI_dynamicgroups: IdentityreferenceFilter, $AccountFilters: AccountFilter, $ComputeFilters: ComputeFilter, $SubscriptionFilters: SubscriptionFilter) {\n  Azure_ServicePrincipals: Users(where: $Azure_ServicePrincipalsFilters) {\n    count\n    __typename\n  }\n  GCP_ServiceAccounts: Users(where: $GCP_ServiceAccountsFilters) {\n    count\n    __typename\n  }\n  AWS_Roles: Roles(where: $AWS_RolesFilters) {\n    count\n    __typename\n  }\n  OCI_Users: Users(where: $OCI_Users) {\n    count\n    __typename\n  }\n  OCI_dynamicgroups: IdentityReferences(where: $OCI_dynamicgroups) {\n    count\n    __typename\n  }\n  Accounts: Accounts(where: $AccountFilters) {\n    group {\n      key {\n        cloudType\n        __typename\n      }\n      count\n      __typename\n    }\n    total: count\n    __typename\n  }\n  Subscriptions(where: $SubscriptionFilters) {\n    total: count\n    __typename\n  }\n  Compute: Compute(where: $ComputeFilters) {\n    group {\n      key {\n        type\n        cloudType\n        __typename\n      }\n      count\n      __typename\n    }\n    total: count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:60e5-4313-a17f-17ea68805f19/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">28b48c085965319d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-28b48c085965319d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">licensing</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T27_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;,&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;,&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;,&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;,&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;,&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;,&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9e85-4984-86d5-71bb165a5f3b/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5923420cbed5e243</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-5923420cbed5e243-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T28_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;,&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;,&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;]},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;,&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;,&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;,&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d1cd-4c21-bb24-d7920aa808f9/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b271a3473048aefc</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-b271a3473048aefc-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T29_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;,&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;,&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;,&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2f49-4395-8dc1-adb633493937/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e3d0f7e3ac00e04b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-e3d0f7e3ac00e04b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T30_InsightsFindingsTrends" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;InsightsFindingsTrends&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T18:41:06.521Z&quot;,&quot;2023-03-30T17:41:06.520Z&quot;]}},&quot;granularityRates&quot;:&quot;DAY&quot;,&quot;granularityTotals&quot;:&quot;DAY&quot;},&quot;query&quot;:&quot;query InsightsFindingsTrends($filters: TicketTrendsFilter, $granularityRates: TicketTrendGranularity!, $granularityTotals: TicketTrendGranularity!) {\n  Rates: TicketTrends(\n    where: $filters\n    type: {type: DAILY_RATES}\n    granularity: {granularity: $granularityRates}\n  ) {\n    items(includeRisk: true) {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n  Totals: TicketTrendsV2(\n    granularity: {granularity: $granularityTotals}\n    where: $filters\n    type: {type: DAILY_TOTALS}\n  ) {\n    items(includeRisk: true) {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:229b-4660-b6ad-e023f9aeb704/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8aae440b3d39f5bd</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-8aae440b3d39f5bd-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">InsightsFindingsTrends</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T31_fetchClouds" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchClouds&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchClouds {\n  Clouds {\n    items {\n      srn\n      name\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:df44-4aa7-8f71-48740cd9710e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e18debad0b9aaf39</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-e18debad0b9aaf39-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchClouds</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T32_InsightsFindingsTrends" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;InsightsFindingsTrends&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T18:41:06.528Z&quot;,&quot;2023-03-30T17:41:06.520Z&quot;]}},&quot;granularityRates&quot;:&quot;DAY&quot;,&quot;granularityTotals&quot;:&quot;DAY&quot;},&quot;query&quot;:&quot;query InsightsFindingsTrends($filters: TicketTrendsFilter, $granularityRates: TicketTrendGranularity!, $granularityTotals: TicketTrendGranularity!) {\n  Rates: TicketTrends(\n    where: $filters\n    type: {type: DAILY_RATES}\n    granularity: {granularity: $granularityRates}\n  ) {\n    items(includeRisk: true) {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n  Totals: TicketTrendsV2(\n    granularity: {granularity: $granularityTotals}\n    where: $filters\n    type: {type: DAILY_TOTALS}\n  ) {\n    items(includeRisk: true) {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:cb80-4b56-a7c5-6997c87119c5/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fb808beae22b5204</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b87a9f22a9c1781bfc67c47466b2b4b2-fb808beae22b5204-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">InsightsFindingsTrends</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T33_getIdentityInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getIdentityInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getIdentityInsights($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardSrn\n      standardFamilySrn\n      severityCategory\n      standardFamily {\n        name\n        __typename\n      }\n      resourceType\n      ticketKey\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9e927b995ef76e82c1bb6c4f2e56be4c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bf8d-419d-b35a-216792074fe2/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">13bd1cc28d93d051</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9e927b995ef76e82c1bb6c4f2e56be4c-13bd1cc28d93d051-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getIdentityInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T34_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;,&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;,&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;,&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;,&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;,&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;,&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;,&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;,&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;,&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;,&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;,&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;,&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;,&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;,&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;,&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">ec89f19da3e6d94f8a98cbaf910acfbb</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:25f6-477e-b9b8-2ffd97276c8a/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6ecc5fcb65f24fda</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">ec89f19da3e6d94f8a98cbaf910acfbb-6ecc5fcb65f24fda-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T35_getDataProtectionInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDataProtectionInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;,&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;,&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;,&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;]},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getDataProtectionInsights($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardSrn\n      standardFamilySrn\n      standardFamily {\n        name\n        __typename\n      }\n      resourceType\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      ticketKey\n      severityCategory\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">bc821781fe96c83facbefb742cb1c40f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e564-4fec-9bbb-0bc11dd8b07e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fd014845696dd268</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">bc821781fe96c83facbefb742cb1c40f-fd014845696dd268-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDataProtectionInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T36_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;,&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;,&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;,&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;,&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;,&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;,&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;,&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;,&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;,&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a5ffc2dad169e0573061ff34543161d9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6d17-44ec-9aa8-c6b7f1da334e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">07b311b78db71da3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a5ffc2dad169e0573061ff34543161d9-07b311b78db71da3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T37_getNetworkInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNetworkInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getNetworkInsights($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardSrn\n      standardFamilySrn\n      severityCategory\n      standardFamily {\n        name\n        __typename\n      }\n      resourceType\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      ticketKey\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">001ce7134b70a7f7eebdf67bd57269c1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ebac-4791-af04-7820a78f0a18/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">66079b9e8ff986c0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">001ce7134b70a7f7eebdf67bd57269c1-66079b9e8ff986c0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getNetworkInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T38_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;,&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;,&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;,&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;,&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;,&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;,&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;,&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;,&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;,&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;,&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">079acd398d13fb05b3721ea6da640519</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5a5a-4d77-9578-ce69eb2a2a7c/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5d5e42b44267f9f9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">079acd398d13fb05b3721ea6da640519-5d5e42b44267f9f9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T39_getFundamentalInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFundamentalInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getFundamentalInsights($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardSrn\n      standardFamilySrn\n      standardFamily {\n        name\n        __typename\n      }\n      resourceType\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      ticketKey\n      severityCategory\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e2f9270ebbce00c5e80f0c809edfdccd</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:64c1-4d86-b8f8-03ed109eb18e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ece5264b37f305d0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e2f9270ebbce00c5e80f0c809edfdccd-ece5264b37f305d0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFundamentalInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T40_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;,&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;,&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;,&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;,&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;,&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;,&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;,&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;,&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;,&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;,&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;,&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;,&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">fa73ccb4391158311336992df261efd1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:93ba-430f-ad5d-006d74ec9705/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">62143075747eecfa</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">fa73ccb4391158311336992df261efd1-62143075747eecfa-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T41_vulnerabilitiesByPublishedDate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilitiesByPublishedDate&quot;,&quot;variables&quot;:{&quot;filters&quot;:null},&quot;query&quot;:&quot;query vulnerabilitiesByPublishedDate($filters: SecurityFindingFilter) {\n  SecurityFindingsPublished(\n    where: $filters\n    groupBy: [findingPublishedDate]\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{findingPublishedDate: DESC}]) {\n      count\n      findingRiskSeverity\n      findingPublishedDate\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3cdcfcdba4a22aadce03ff7366294080</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:68d6-4279-b1be-e649deb75614/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">4b0c9b70e9366feb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3cdcfcdba4a22aadce03ff7366294080-4b0c9b70e9366feb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilitiesByPublishedDate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T42_vulnerabilities_by_time" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_time&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;observedAt&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-01T00:00:00.000Z&quot;,&quot;2023-03-31T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query vulnerabilities_by_time($filters: SecurityFindingFilter) {\n  SecurityFindings(\n    view: raw\n    groupBy: [observedAt, findingRiskSeverity]\n    where: $filters\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{observedAt: DESC}, {findingRiskSeverity: DESC}]) {\n      count @uniq(field: \&quot;findingId\&quot;)\n      findingRiskSeverity\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">631f00f8314e7187377441280ec60338</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:36ec-42bf-8a9f-78ef3880d9c4/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9f3aeb9c178c0e7a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">631f00f8314e7187377441280ec60338-9f3aeb9c178c0e7a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_time</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T43_top5Vulnerabilities" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;top5Vulnerabilities&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;observedAt&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-01T00:00:00.000Z&quot;,&quot;2023-03-31T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query top5Vulnerabilities($filters: SecurityFindingFilter) {\n  SecurityFindings(where: $filters, groupBy: [findingId]) {\n    items(limit: 5, orderBy: [{findingRiskIndex: DESC}, {findingId: DESC}]) {\n      count\n      findingId\n      resourceSrn\n      riskIndex\n      riskSeverity\n      findingScore\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">53af614e0e59cd3dd59559802a6489b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5c7d-4c24-b02d-6806ac340370/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">3f472c4792e055f2</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">53af614e0e59cd3dd59559802a6489b2-3f472c4792e055f2-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">top5Vulnerabilities</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T44_top5ResourcesAtRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;top5ResourcesAtRisk&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;observedAt&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-01T00:00:00.000Z&quot;,&quot;2023-03-31T00:00:00.000Z&quot;]},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;query&quot;:&quot;query top5ResourcesAtRisk($filters: SecurityFindingFilter) {\n  SecurityFindings(where: $filters, groupBy: resourceSrn) {\n    items(limit: 5, orderBy: [{riskIndex: DESC}, {resourceSrn: DESC}]) {\n      resourceAccount\n      resourceAccountName\n      resourceName\n      resourceSrn\n      resourceCloud\n      riskSeverity\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7b17dea258d93ab0a1fe313df102f4fa</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4549-47d9-9d64-5092398e7a2c/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">3dc1c1b03e8554d2</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7b17dea258d93ab0a1fe313df102f4fa-3dc1c1b03e8554d2-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">top5ResourcesAtRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T45_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/9576a064-65ef-45d6-858e-b0b766ba7099&quot;,&quot;srn:supersonrai::StandardFamily/6da88d66-6fda-44a4-a2ca-e29dbc10ee1b&quot;,&quot;srn:supersonrai::StandardFamily/342ee2b0-6a5f-4aba-9a33-d3d18a16d3cf&quot;,&quot;srn:supersonrai::StandardFamily/76642506-7c0c-4a36-81a2-ffd1697fbd0b&quot;,&quot;srn:supersonrai::StandardFamily/839bad50-b61e-4edc-a903-10db46121553&quot;,&quot;srn:supersonrai::StandardFamily/582927d9-ac98-4477-b1f0-c88e766712fd&quot;,&quot;srn:supersonrai::StandardFamily/784d4859-5373-4e35-a5fa-d54489310417&quot;,&quot;srn:supersonrai::StandardFamily/889cdfd6-c56e-473a-b209-ff51ded92451&quot;,&quot;srn:supersonrai::StandardFamily/2f4b38c8-7411-48f9-8eb1-1a806401bbad&quot;,&quot;srn:supersonrai::StandardFamily/c4440b74-8c34-4e3d-8398-02a091092e59&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/9576a064-65ef-45d6-858e-b0b766ba7099&quot;,&quot;srn:supersonrai::StandardFamily/6da88d66-6fda-44a4-a2ca-e29dbc10ee1b&quot;,&quot;srn:supersonrai::StandardFamily/342ee2b0-6a5f-4aba-9a33-d3d18a16d3cf&quot;,&quot;srn:supersonrai::StandardFamily/76642506-7c0c-4a36-81a2-ffd1697fbd0b&quot;,&quot;srn:supersonrai::StandardFamily/839bad50-b61e-4edc-a903-10db46121553&quot;,&quot;srn:supersonrai::StandardFamily/582927d9-ac98-4477-b1f0-c88e766712fd&quot;,&quot;srn:supersonrai::StandardFamily/784d4859-5373-4e35-a5fa-d54489310417&quot;,&quot;srn:supersonrai::StandardFamily/889cdfd6-c56e-473a-b209-ff51ded92451&quot;,&quot;srn:supersonrai::StandardFamily/2f4b38c8-7411-48f9-8eb1-1a806401bbad&quot;,&quot;srn:supersonrai::StandardFamily/c4440b74-8c34-4e3d-8398-02a091092e59&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::StandardFamily/9576a064-65ef-45d6-858e-b0b766ba7099&quot;,&quot;srn:supersonrai::StandardFamily/6da88d66-6fda-44a4-a2ca-e29dbc10ee1b&quot;,&quot;srn:supersonrai::StandardFamily/342ee2b0-6a5f-4aba-9a33-d3d18a16d3cf&quot;,&quot;srn:supersonrai::StandardFamily/76642506-7c0c-4a36-81a2-ffd1697fbd0b&quot;,&quot;srn:supersonrai::StandardFamily/839bad50-b61e-4edc-a903-10db46121553&quot;,&quot;srn:supersonrai::StandardFamily/582927d9-ac98-4477-b1f0-c88e766712fd&quot;,&quot;srn:supersonrai::StandardFamily/784d4859-5373-4e35-a5fa-d54489310417&quot;,&quot;srn:supersonrai::StandardFamily/889cdfd6-c56e-473a-b209-ff51ded92451&quot;,&quot;srn:supersonrai::StandardFamily/2f4b38c8-7411-48f9-8eb1-1a806401bbad&quot;,&quot;srn:supersonrai::StandardFamily/c4440b74-8c34-4e3d-8398-02a091092e59&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, standardFamilySrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">90027634cba85f2ef93f4df05a5c4a3f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0a9d-4fe7-8abe-032315bd7881/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">42b6898d5c28b9be</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">90027634cba85f2ef93f4df05a5c4a3f-42b6898d5c28b9be-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage_T46_getActiveThreat" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getActiveThreat&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::Standard/40a087c8-319c-4756-bcda-4f9d11d046d3&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getActiveThreat($filters: TicketRollupFilter!) {\n  TicketRollups(where: $filters, includeRollup: {standardSrn: true, status: true}) {\n    count\n    items(includeRisk: true) {\n      count\n      riskScoreNumeric\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1a5b5c4039b0623b4123e887b4686541</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d59e-4153-b95f-885cea26e63e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">675e50ecdb70c546</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1a5b5c4039b0623b4123e887b4686541-675e50ecdb70c546-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getActiveThreat</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T01_getIdentityCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getIdentityCounts&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;active&quot;:{&quot;value&quot;:true}},&quot;awsFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;aws&quot;}},&quot;gcpFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;gcp&quot;}},&quot;serviceaccountFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;type&quot;:{&quot;value&quot;:&quot;GCPServiceAccount&quot;}},&quot;serviceaccountkeysFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;type&quot;:{&quot;value&quot;:&quot;GCPServiceAccountKey&quot;}},&quot;azureFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;azure&quot;}},&quot;ociFilters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:&quot;oci&quot;}},&quot;includeAws&quot;:true,&quot;includeGcp&quot;:true,&quot;includeAzure&quot;:true,&quot;includeOci&quot;:true},&quot;query&quot;:&quot;query getIdentityCounts($filters: IdentityFilter!, $awsFilters: IdentityFilter!, $gcpFilters: IdentityFilter!, $azureFilters: IdentityFilter!, $ociFilters: IdentityFilter!, $serviceaccountFilters: UserFilter!, $serviceaccountkeysFilters: AccesskeyFilter!, $includeAws: Boolean!, $includeGcp: Boolean!, $includeOci: Boolean!, $includeAzure: Boolean!) {\n  total: Identities(where: $filters) {\n    count\n    __typename\n  }\n  aws: Identities(where: $awsFilters) @include(if: $includeAws) {\n    count\n    __typename\n  }\n  gcp: Identities(where: $gcpFilters) @include(if: $includeGcp) {\n    count\n    __typename\n  }\n  serviceaccount: Users(where: $serviceaccountFilters) @include(if: $includeGcp) {\n    count\n    __typename\n  }\n  serviceaccountkeys: AccessKeys(where: $serviceaccountkeysFilters) @include(if: $includeGcp) {\n    count\n    __typename\n  }\n  azure: Identities(where: $azureFilters) @include(if: $includeAzure) {\n    count\n    __typename\n  }\n  oci: Identities(where: $ociFilters) @include(if: $includeOci) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bd46-4828-afab-11a9f87bbf34/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ebbb5c142e14566a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-ebbb5c142e14566a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getIdentityCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a1f8-4cfb-aa15-6c4ae85e0b2a/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1c5cea0e4d675f76</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-1c5cea0e4d675f76-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5789-442c-8357-640ba8a84a16/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">59d0d49e4dbb58b0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-59d0d49e4dbb58b0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/df23cbab-df37-4676-af99-49ed3a9eee29&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:62d8-41e1-a977-b8a737a5a801/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">99b7b7202256b957</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-99b7b7202256b957-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T05_getLateralMovementRollup" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getLateralMovementRollup&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getLateralMovementRollup($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {standardControlSrn: {order: ASC, precedence: 1}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      standardControlSrn\n      standardControl {\n        name\n        __typename\n      }\n      controlPolicyTitle\n      ticketKey\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:40d7-4989-83eb-cc40593fcc39/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9f13ec6b2a3fc21c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-9f13ec6b2a3fc21c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getLateralMovementRollup</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T06_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4181cdc2-0e7d-4e37-837b-2ed1c1cc7331&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:49b1-44e5-adba-13f8cc3e5557/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0473cc26b0445170</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-0473cc26b0445170-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T07_getUnusedIdentity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUnusedIdentity&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getUnusedIdentity($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:94bb-44a4-9561-e74b3c52855f/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c6721db6561ead30</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-c6721db6561ead30-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getUnusedIdentity</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T08_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0278394d-50ce-4fa3-9784-7ec96dd54345&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2231-4dec-aaed-c890443a56b7/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">87e6c8eeaea0e88c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-87e6c8eeaea0e88c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T09_getCrossAccountTrustExposure" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCrossAccountTrustExposure&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getCrossAccountTrustExposure($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {standardControlSrn: {order: ASC, precedence: 1}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:54d6-456c-b708-5aa6b000221e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">59e985216be26049</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-59e985216be26049-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getCrossAccountTrustExposure</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T10_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/03e22038-c363-47b2-ae50-723bc79d9f19&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b04f-4a92-9bf9-f62a4bef1c9b/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">41322c2b5a7752c6</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-41322c2b5a7752c6-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T11_getOverpriviledgedIdentity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOverpriviledgedIdentity&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getOverpriviledgedIdentity($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {resourceType: {order: ASC, precedence: 1}, standardControlSrn: {order: ASC, precedence: 2}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:da84-42e5-b018-c0186921e3c9/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">41113e8536aed7bf</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-41113e8536aed7bf-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOverpriviledgedIdentity</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T12_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/53be9664-e709-477b-b0be-4f9d5266c372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4921-4eb8-978a-74846eea451d/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f953e2f3d54fbc19</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-f953e2f3d54fbc19-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T13_getAccessKeys" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAccessKeys&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getAccessKeys($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      standardControl {\n        name\n        __typename\n      }\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:49a1-4988-b1c2-90c98ab2c4ad/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5b96ac0cbc0084b3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-5b96ac0cbc0084b3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAccessKeys</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T14_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/0372db85-bda8-40bf-8047-14974283c718&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9cc3-4439-bebb-2ee537d85796/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c4cefa62c62289e1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-c4cefa62c62289e1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T15_TopFiveRiskyIdentities" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveRiskyIdentities&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query TopFiveRiskyIdentities($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(limit: 5, orderBy: [{severityNumeric: {order: DESC}}], includeRisk: true) {\n      srn\n      title\n      severityCategory\n      account\n      resourceName\n      ticketKey\n      resourceSRN\n      status\n      cloudType\n      swimlaneSRNs\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9e94-4088-894a-5bbcd28f53fe/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">19643f5488f03ee7</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-19643f5488f03ee7-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveRiskyIdentities</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T16_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4be9e1cf-99da-4fda-91cd-1256cefadf38&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a7f8-44d5-ad01-f1c1ed63a58f/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e95330bdb5340770</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-e95330bdb5340770-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T17_getOtherIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOtherIssues&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getOtherIssues($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      severityCategory\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5607-4ddd-841b-a790a3bb487f/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">73ac7932d24f1d51</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-73ac7932d24f1d51-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOtherIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identity_T18_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/17f7243f-63eb-4b92-afa9-6decbfe93111&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4809-448f-a9de-311fde396567/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7186d0ba34baebd0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d27f012da021c4fa3fe8397b87be46c2-7186d0ba34baebd0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T01_networkCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;networkCounts&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;keys&quot;:[&quot;Cloud&quot;,&quot;Type&quot;],&quot;labels&quot;:[&quot;Network&quot;,&quot;NetworkGroup&quot;,&quot;NetworkListener&quot;,&quot;NetworkInterface&quot;,&quot;NetworkComponent&quot;]}},&quot;query&quot;:&quot;query networkCounts($filters: GroupedQueryFilter!) {\n  GroupedQuery(where: $filters) {\n    items {\n      value\n      count\n      hasGroupedResult {\n        key\n        items {\n          value\n          count\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4b1a-4b58-a607-0c49a4e0662b/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">4610f0c6dd193cbb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-4610f0c6dd193cbb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">networkCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1807-444c-afd6-78923c70b2c1/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ac3a68bc32078bdf</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-ac3a68bc32078bdf-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9b93-4b02-af1f-84c2e472c44a/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2e1bd7b32a8f5976</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-2e1bd7b32a8f5976-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/ba35a1d1-c211-473e-894a-ad16fd8b7b09&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7cbb-43e5-9830-fab0be2dedd5/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1f0b5b3a1e0be75c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-1f0b5b3a1e0be75c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T05_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEncryption&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/c55fe0c4-c888-47b2-b5d0-e949021b1c2a&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getEncryption($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {standardControlSrn: {order: ASC, precedence: 1}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      standardControlSrn\n      standardControl {\n        name\n        __typename\n      }\n      resourceType\n      resourceTypeFriendlyName\n      ticketKey\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4a7f-4095-a947-f7093154f64c/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7b89bebf10514635</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-7b89bebf10514635-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getEncryption</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T06_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/c55fe0c4-c888-47b2-b5d0-e949021b1c2a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/c55fe0c4-c888-47b2-b5d0-e949021b1c2a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/c55fe0c4-c888-47b2-b5d0-e949021b1c2a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:66dc-4fab-a90c-b6eb219dbf0e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">50042d2c76e260c8</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-50042d2c76e260c8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T07_getExposedResources" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getExposedResources&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getExposedResources($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7839-4fa1-8f89-d023f4db0485/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2974bed9f64d6fe1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-2974bed9f64d6fe1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getExposedResources</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T08_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4cf26294-c33f-4cc9-9477-ec8e120dcec6&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:82f7-457b-baa6-4f7dec658032/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8a2b980b06a0d046</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-8a2b980b06a0d046-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T09_getRecentChanges" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getRecentChanges&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;account&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getRecentChanges($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      standardControlSrn\n      controlPolicyTitle\n      severityCategory\n      account\n      resourceName\n      ticketKey\n      resourceSRN\n      status\n      cloudType\n      swimlaneSrn\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4b87-4032-8f2c-a3111727f56e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fc0b8046c5b8999a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-fc0b8046c5b8999a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getRecentChanges</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T10_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/b93ea777-2b97-443f-955d-8887ac5e427e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5032-4fd8-91cf-ee5f0ff8ba60/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">688eaf3d6f264939</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-688eaf3d6f264939-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T11_getUnused" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUnused&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getUnused($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c7a0-4f64-8bf4-0826916e074a/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">cda19b3f79693dfc</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-cda19b3f79693dfc-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getUnused</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T12_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/aa84e56c-0ed0-40f9-9ef2-633d413fdc73&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:971f-471a-b638-e7da5fabb351/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">810ab6b34fd4a8e9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-810ab6b34fd4a8e9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T13_getOtherIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOtherIssues&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getOtherIssues($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      severityCategory\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b9fd-4f36-92a5-db7ab265bb00/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f52be4d129ba0ebc</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-f52be4d129ba0ebc-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOtherIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Network_T14_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/867c56dd-1ce8-441f-b4cb-6c5298439726&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0474-44e8-b846-97ce0112985d/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b651aedd8cda3f7b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">df1ce9b9ba10835b027e54b2e23590d3-b651aedd8cda3f7b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T01_getDataCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDataCounts&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;active&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:true}}},&quot;query&quot;:&quot;query getDataCounts($filters: DataFilter!) {\n  Data(where: $filters) {\n    count\n    group {\n      key {\n        cloudType\n        __typename\n      }\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7c08-4d29-a177-1679c7840b41/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f31a0ff65b542128</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-f31a0ff65b542128-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDataCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7e49-4491-9feb-4eb3c0a0c87f/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f7c2bf6dec20c392</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-f7c2bf6dec20c392-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:990f-49f8-92f7-906ecaff89d3/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">56f98a061850d554</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-56f98a061850d554-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/g67udki0-kd98-3444-kk43-lp01shj38dj7&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3b5f-4fcf-8571-08ceb8bedf89/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">85e4da429644f5a7</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-85e4da429644f5a7-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T05_getDataCountsForCloud" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDataCountsForCloud&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;active&quot;:{&quot;value&quot;:true},&quot;cloudType&quot;:{&quot;value&quot;:null}}},&quot;query&quot;:&quot;query getDataCountsForCloud($filters: DataFilter!) {\n  Data(where: $filters) {\n    group {\n      key {\n        serviceType\n        __typename\n      }\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f3e4-4eb8-8f26-ebc2f88a2b87/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f1b316deb75e6944</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-f1b316deb75e6944-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDataCountsForCloud</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T06_getEncryptionKeys" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEncryptionKeys&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getEncryptionKeys($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4afb-4665-a432-28bcee4b8cb2/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e49666182a21239f</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-e49666182a21239f-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getEncryptionKeys</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T07_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/d97fae03-7c68-4a85-b84a-5296984006fd&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7070-4b55-a4c6-035fd2534607/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f7e9f0e640dba4a9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-f7e9f0e640dba4a9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T08_getClassification" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getClassification&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getClassification($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      serviceType\n      resourceTypeFriendlyName\n      serviceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0fa8-4d55-9fef-c687e14d6234/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7c46430b6794c36b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-7c46430b6794c36b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getClassification</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T09_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/70dcb666-a968-4bc5-ba75-43f02480054e&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a544-41f2-8b98-48dc5eb2902f/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">702836a635a83fcb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-702836a635a83fcb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T10_getAccess" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAccess&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getAccess($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      serviceType\n      serviceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9d70-4248-8765-b6f2001959e8/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">311ccb17492bd457</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-311ccb17492bd457-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAccess</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T11_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/49cc212c-8110-49fa-bfb3-35d3bfd48a5d&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c045-4ac7-9e23-99f374fff2d0/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2ac8151596af71c5</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-2ac8151596af71c5-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T12_getKeyAndCert" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getKeyAndCert&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getKeyAndCert($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d2bd-46f9-8986-cce85a40d3c3/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">63e0ba11599f6027</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-63e0ba11599f6027-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getKeyAndCert</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T13_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/439670ce-e131-4318-a438-e5e28d2af5cc&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1420-4a04-8e30-97281c1429f9/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c4111818f089a6c0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-c4111818f089a6c0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T14_getOtherIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getOtherIssues&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getOtherIssues($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      severityCategory\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:eee0-418b-9e00-5dc180449ffb/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0fa85975109015a7</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-0fa85975109015a7-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getOtherIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DataProtection_T15_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/4847a7fe-5568-443d-bd24-90194d137372&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1524-4a6d-8b08-9084b53171ad/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">6c912d6ac10724ea</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">23471d28374f8d19a3f3a571a169074c-6c912d6ac10724ea-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T01_fundamentalCounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fundamentalCounts&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;keys&quot;:[&quot;Cloud&quot;,&quot;Label&quot;,&quot;Type&quot;],&quot;labels&quot;:[&quot;Account&quot;,&quot;Audit&quot;,&quot;EventStream&quot;,&quot;Compute&quot;]}},&quot;query&quot;:&quot;query fundamentalCounts($filters: GroupedQueryFilter!) {\n  GroupedQuery(where: $filters) {\n    items {\n      value\n      count\n      hasGroupedResult {\n        key\n        items {\n          value\n          count\n          hasGroupedResult {\n            key\n            items {\n              value\n              count\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1e37-4f76-82f7-b33b58ff17a8/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">46cce04f4fd90532</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-46cce04f4fd90532-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fundamentalCounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T02_getStandardRisk" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStandardRisk&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;trendFilters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getStandardRisk($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!) {\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {standardSrn: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      riskScoreNumeric\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketTrendsV2(\n    where: $trendFilters\n    granularity: {granularity: DAY}\n    type: {type: RISK_LEVELS}\n  ) {\n    items(includeRisk: true) {\n      riskLevel\n      dateTime\n      __typename\n    }\n    __typename\n  }\n  trendChange: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    riskChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:45f5-41aa-9a68-36b7c213885e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2f26acf07bc21c61</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-2f26acf07bc21c61-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStandardRisk</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T03_topInsights" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topInsights&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query topInsights($filters: TopInsightsFilter) {\n  TopInsights(where: $filters) {\n    items {\n      insightType\n      topControlsByFamily {\n        family\n        standardFamily {\n          name\n          containedBy {\n            items {\n              name\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        issues_perc\n        family_risk\n        controls {\n          control\n          score_improvement\n          standardControl {\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d3f1-4330-a382-2cf9cb8ef793/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">639392e006d00391</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-639392e006d00391-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topInsights</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T04_TopFiveIssues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TopFiveIssues&quot;,&quot;variables&quot;:{&quot;filter&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:supersonrai::Standard/273387a5-53c1-4a38-8f97-7b200235069f&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query TopFiveIssues($filter: TicketsFilter!) {\n  Tickets(where: $filter) {\n    items(\n      limit: 5\n      orderBy: [{severityNumeric: {order: DESC, precedence: 2}}, {srn: {order: DESC, precedence: 1}}]\n      includeRisk: true\n    ) {\n      srn\n      title\n      templatedTitle\n      severityCategory\n      account\n      resourceName\n      resourceType\n      description\n      ticketKey\n      resourceSRN\n      isOperationalized\n      status\n      swimlaneSRNs\n      createdBy\n      policy {\n        srn\n        description\n        mappedBy {\n          items {\n            containedBy {\n              items {\n                srn\n                name\n                containedBy {\n                  items {\n                    srn\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:067e-44cb-8425-c28e08e29f43/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b7d3fce905afade0</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-b7d3fce905afade0-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TopFiveIssues</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T05_getAuditLoggingQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAuditLoggingQuery&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getAuditLoggingQuery($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {resourceType: {order: ASC, precedence: 1}, standardControlSrn: {order: ASC, precedence: 2}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3af7-4ba6-9bb5-55402944ef07/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">67e6bdf2c65e1c4a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-67e6bdf2c65e1c4a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAuditLoggingQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T06_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3283cb79-f4ce-46f3-a211-17d8da592c58&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ca88-4661-830a-8fd5a42170ef/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">3edb6743c8b7bad8</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-3edb6743c8b7bad8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T07_getRecentChanges" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getRecentChanges&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;account&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getRecentChanges($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      cloudType\n      resourceType\n      standardControlSrn\n      controlPolicyTitle\n      severityCategory\n      account\n      resourceName\n      ticketKey\n      resourceSRN\n      status\n      cloudType\n      swimlaneSrn\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1290-417d-afe1-35fa9d0fa458/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a8014cd01e4d9826</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-a8014cd01e4d9826-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getRecentChanges</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T08_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e93a6872-b584-4cb1-9f47-9bf2048a328a&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6647-4cdd-8550-e2c7a30cf63b/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fa945a53af6a9785</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-fa945a53af6a9785-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T09_getPlatform" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getPlatform&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getPlatform($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {resourceType: {order: ASC, precedence: 1}, standardControlSrn: {order: ASC, precedence: 2}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:666b-4742-bbbc-57a6b8bd33da/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5a135a323bcfdacf</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-5a135a323bcfdacf-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getPlatform</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T10_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/92bc6294-7877-4509-acd0-006a3db9a605&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a0a8-4869-91dd-da7362910063/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c957fdb8be12f7cb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-c957fdb8be12f7cb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T11_getDatabasePosture" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getDatabasePosture&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getDatabasePosture($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {resourceType: {order: ASC, precedence: 1}, standardControlSrn: {order: ASC, precedence: 2}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      resourceType\n      resourceTypeFriendlyName\n      standardControlSrn\n      controlPolicyTitle\n      standardControl {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0bab-4113-a1c9-51fd83da4e7e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f929f38343bf3793</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-f929f38343bf3793-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getDatabasePosture</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T12_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/3fbeee56-97c5-4faf-8665-7b792f474f53&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:854b-492d-86e9-460de43c39df/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8556155cd76fc403</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-8556155cd76fc403-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T13_getIAM" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getIAM&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;standardFamilySrn&quot;:{&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;},&quot;standardControlSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;serviceTypeFriendlyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;cloudType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]}}},&quot;query&quot;:&quot;query getIAM($filters: TicketRollupFilter!) {\n  TicketRollups(\n    where: $filters\n    includeRollup: {swimlaneSrn: true, environment: true, status: true}\n  ) {\n    items(\n      orderBy: {standardControlSrn: {order: ASC, precedence: 1}}\n      includeRisk: true\n    ) {\n      count\n      cloudType\n      standardControlSrn\n      standardControl {\n        name\n        __typename\n      }\n      controlPolicyTitle\n      serviceType\n      serviceTypeFriendlyName\n      ticketKey\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5e3d-408c-bd01-ce030a17a1da/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ee29100c6a9fd9aa</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-ee29100c6a9fd9aa-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getIAM</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fundamental_T14_getFamilyRollupQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFamilyRollupQuery&quot;,&quot;variables&quot;:{&quot;rollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;}},&quot;policyCountRollupFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;firstSeen&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}},&quot;trendFilters&quot;:{&quot;standardFamilySrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;srn:supersonrai::StandardFamily/e58fd5ec-feec-4dae-ad11-1b9414baf3df&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;NOT_IN_LIST&quot;,&quot;values&quot;:[&quot;RISK_ACCEPTED&quot;,&quot;SNOOZED&quot;,&quot;CLOSED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query getFamilyRollupQuery($rollupFilters: TicketRollupFilter!, $trendFilters: TicketTrendsFilter!, $policyCountRollupFilters: TicketRollupFilter!) {\n  policyCount: TicketRollups(\n    where: $policyCountRollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      controlPolicyTitle\n      __typename\n    }\n    __typename\n  }\n  overall: TicketRollups(\n    where: $rollupFilters\n    includeRollup: {environment: true, cloudType: true, swimlaneSrns: true, account: true, status: true}\n  ) {\n    items(includeRisk: true) {\n      count\n      riskScoreDescription\n      __typename\n    }\n    __typename\n  }\n  trend: TicketPercentageIncrease(where: $trendFilters) {\n    isValid\n    countChange\n    percentageChange(includeRisk: true)\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d7bd-4a79-ba89-1362493fe75e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">3aead8fd7065731b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f0d75444d1eee3cc467cb1caddb6a286-3aead8fd7065731b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getFamilyRollupQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WorkloadProtection_T01_vulnerabilities_group_by_vm" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_group_by_vm&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}},&quot;limit&quot;:10,&quot;offset&quot;:0},&quot;query&quot;:&quot;query vulnerabilities_group_by_vm($filters: SecurityFindingFilter, $offset: Int, $limit: Int) {\n  SecurityFindings(where: $filters, groupBy: [resourceSrn]) {\n    items(\n      limit: $limit\n      offset: $offset\n      orderBy: [{riskIndex: DESC}, {resourceSrn: DESC}]\n    ) {\n      resourceSrn\n      observedAt\n      environments\n      riskIndex\n      riskSeverity\n      resourceCloud\n      resourceName\n      resourceAccount\n      resourceAccountName\n      targetScannerTypes\n      containerImage\n      containerImageTag\n      bySeverityCounts: resourceSecurityFindings(\n        by: [resourceSrn]\n        where: {findingCategory: {value: Vulnerability}}\n        groupBy: [findingRiskSeverity]\n      ) {\n        items {\n          findingRiskSeverity\n          count @uniq(field: \&quot;findingId\&quot;)\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b5eb9335524cd273aca2b0e64d385cd9</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:53fa-4b33-90fc-2b74e9ac0a1a/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5405ef14b3f76f8e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b5eb9335524cd273aca2b0e64d385cd9-5405ef14b3f76f8e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_group_by_vm</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WorkloadProtection_T02_vulnerabilities_group_by_vm_count" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_group_by_vm_count&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_group_by_vm_count($filters: SecurityFindingFilter) {\n  SecurityFindings(where: $filters, groupBy: [resourceSrn]) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2a2b731d3e04ac00d3120c2d5373f74d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4426-4205-b091-6b00246cdbd3/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b9728d602d26fe72</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2a2b731d3e04ac00d3120c2d5373f74d-b9728d602d26fe72-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_group_by_vm_count</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WorkloadProtection_T03_vulnerabilities_by_published_date" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_published_date&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_published_date($filters: SecurityFindingFilter) {\n  SecurityFindingsPublished(\n    where: $filters\n    groupBy: [findingPublishedDate, findingRiskSeverity]\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{findingPublishedDate: DESC}]) {\n      count\n      findingPublishedDate\n      findingRiskSeverity\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">04cf4aba150fd7aae97cbf9eb0936aa7</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:30c5-4b76-b6d5-0558bffba673/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ed62e25ec41c58cf</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">04cf4aba150fd7aae97cbf9eb0936aa7-ed62e25ec41c58cf-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_published_date</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WorkloadProtection_T04_vulnerabilities_by_time" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;vulnerabilities_by_time&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;computeType&quot;:{&quot;value&quot;:&quot;VM&quot;},&quot;findingCategory&quot;:{&quot;value&quot;:&quot;Vulnerability&quot;},&quot;observedAt&quot;:{&quot;op&quot;:&quot;GTE&quot;,&quot;value&quot;:&quot;2023-03-16T00:00:00.000Z&quot;}}},&quot;query&quot;:&quot;query vulnerabilities_by_time($filters: SecurityFindingFilter) {\n  SecurityFindings(\n    view: raw\n    groupBy: [observedAt, findingRiskSeverity]\n    where: $filters\n    granularity: DAY\n  ) {\n    items(limit: -1, orderBy: [{observedAt: DESC}, {findingRiskSeverity: DESC}]) {\n      count @uniq(field: \&quot;findingId\&quot;)\n      findingRiskSeverity\n      observedAt\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">fd9ad0c7ea4168fdf5d380afb03b9834</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2403-43bb-8efb-2070f2be9bd9/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">07566c1cdd27e84a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">fd9ad0c7ea4168fdf5d380afb03b9834-07566c1cdd27e84a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">vulnerabilities_by_time</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T01_fetchStandards" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchStandards&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchStandards {\n  Standards {\n    items(limit: -1) {\n      ...fields\n      contains {\n        items(limit: -1) {\n          ...fields\n          containedBy {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          contains {\n            items(limit: -1) {\n              ...fields\n              containedBy {\n                items {\n                  srn\n                  __typename\n                }\n                __typename\n              }\n              ... on Standardcontrol {\n                mapsTo {\n                  items(limit: -1) {\n                    srn\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment fields on Standardinterface {\n  name\n  description\n  srn\n  orgID\n  resourceId\n  __typename\n  ... on Standard {\n    color\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:23e1-400b-87e6-3da587bdf688/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a5c81ceca253b31d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-a5c81ceca253b31d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchStandards</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T02_getObjectives" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getObjectives&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getObjectives {\n  SonraiObjectives {\n    items {\n      srn\n      resourceId\n      name\n      description\n      createdBy\n      definedControlFrameworks {\n        controlFrameworkSrn\n        controlFrameworkOrder\n        __typename\n      }\n      appliedControlFrameworks {\n        items {\n          srn\n          swimlaneSRNs\n          contains {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="cache-control" elementType="Header">
                <stringProp name="Header.name">cache-control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">27d607bddecac48f</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:fd3b-4caf-861a-2f4248331e8d/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-27d607bddecac48f-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getObjectives</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T03_check_if_trends_exist" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;check_if_trends_exist&quot;,&quot;variables&quot;:{&quot;today&quot;:&quot;2023-03-31T00:00&quot;},&quot;query&quot;:&quot;query check_if_trends_exist($today: DateTime) {\n  trendCount: PolicyTrends(\n    where: {dateTime: {op: EQ, value: $today}}\n    groupby: {fields: [\&quot;id\&quot;]}\n  ) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b5f0-472a-8a4f-6bf7d07ea303/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f05697cc4ef884dc</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-f05697cc4ef884dc-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">check_if_trends_exist</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T04_compliance_issues_by_security_area" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_issues_by_security_area&quot;,&quot;variables&quot;:{&quot;pastFilters&quot;:{&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-03-23T17:43:18.010Z&quot;}},&quot;currentFilters&quot;:{&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-03-31T17:43:18.010Z&quot;}}},&quot;query&quot;:&quot;query compliance_issues_by_security_area($pastFilters: PolicyTrendsFilter, $currentFilters: PolicyTrendsFilter) {\n  current: PolicyTrends(\n    where: $currentFilters\n    groupby: {fields: [\&quot;securityArea\&quot;]}\n  ) {\n    items {\n      failing: count\n      securityArea\n      __typename\n    }\n    __typename\n  }\n  past: PolicyTrends(where: $pastFilters, groupby: {fields: [\&quot;securityArea\&quot;]}) {\n    items {\n      failing: count\n      securityArea\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:fc22-4bc7-80a4-1374100aadb6/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">08e6686a853bd4e4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-08e6686a853bd4e4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_issues_by_security_area</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T05_compliance_risk_trend" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_risk_trend&quot;,&quot;variables&quot;:{&quot;key&quot;:&quot;standardSrn&quot;,&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-03-23T17:43:18.010Z&quot;,&quot;2023-03-31T17:43:18.010Z&quot;]}}},&quot;query&quot;:&quot;query compliance_risk_trend($filters: PolicyTrendsFilter, $key: String) {\n  PolicyTrends(where: $filters, groupby: {fields: [$key, \&quot;dateTime\&quot;]}) {\n    items {\n      standardSrn\n      dateTime\n      riskScore\n      standardControlSrn\n      standardFamilySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a975-4f34-b033-0696bb611003/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">485b46a997195442</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-485b46a997195442-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_risk_trend</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T06_resources_total" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resources_total&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;swimlaneSRNs&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/c87de86d-6448-4312-8141-c67f10ffbc66&quot;,&quot;srn:stage11733927::Swimlane/54346aae-f962-4303-8775-558e376772da&quot;,&quot;srn:stage11733927::Swimlane/632c1e2a-0cf7-4432-b593-4b0c45c082d5&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/5861c490-03f2-4ca8-a060-f822e88dd658&quot;,&quot;srn:stage11733927::Swimlane/846176cf-47c2-4d8f-b094-43e1d5f161fc&quot;,&quot;srn:stage11733927::Swimlane/635c2880-ca1d-4434-92a4-c7feaf74ae53&quot;,&quot;srn:stage11733927::Swimlane/4f7e22fa-6c07-41bc-943d-23ad332ddf18&quot;,&quot;srn:stage11733927::Swimlane/c177456e-edcf-4bad-aeac-2e7834afd322&quot;,&quot;srn:stage11733927::Swimlane/be0a8d40-d422-4eb4-a940-d95da8486981&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/9057a678-a9c9-4088-ac95-f42d99e20d45&quot;,&quot;srn:stage11733927::Swimlane/8ffcd427-b034-4080-9feb-74abe4a2bc1a&quot;,&quot;srn:stage11733927::Swimlane/17dce178-87b1-4b25-be32-ce58a03cffd7&quot;,&quot;srn:stage11733927::Swimlane/60b72733-a220-4260-8ed1-66671f59597e&quot;,&quot;srn:stage11733927::Swimlane/798d6f98-48ac-4a71-b704-3765e39d5938&quot;,&quot;srn:stage11733927::Swimlane/7bc365e5-b897-4b58-8753-be85e03573f6&quot;,&quot;srn:stage11733927::Swimlane/7e986fc7-7db9-475c-898b-c666b1c7411a&quot;,&quot;srn:stage11733927::Swimlane/d8db091e-0147-40fe-bef0-08f2f5d172cf&quot;,&quot;srn:stage11733927::Swimlane/a459fece-58ef-49e2-9779-357f876e15e9&quot;,&quot;srn:stage11733927::Swimlane/a6736f91-4891-4e61-b96d-7ca3d9ff25f7&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/2c9894ff-d4de-4d83-9557-630d70634d8a&quot;,&quot;srn:stage11733927::Swimlane/0fccef66-2e58-4164-ae72-cf6528270022&quot;,&quot;srn:stage11733927::Swimlane/082a0e22-5dad-41ee-b7ab-15e567119797&quot;,&quot;srn:stage11733927::Swimlane/882f219e-e3aa-453e-b997-91e8e0b5516e&quot;,&quot;srn:stage11733927::Swimlane/f47a8e25-188a-4c9d-91d6-1a54883e9fa2&quot;,&quot;srn:stage11733927::Swimlane/a766f0c1-f619-4fba-94a9-498aeb81624c&quot;,&quot;srn:stage11733927::Swimlane/edb2917d-81a3-4b74-9e22-1af5f507a2fe&quot;,&quot;srn:stage11733927::Swimlane/d84a67d6-760c-4a6a-924b-c8f46c9d5360&quot;,&quot;srn:stage11733927::Swimlane/57cdd790-cb15-4213-a618-d7306ae5e595&quot;,&quot;srn:stage11733927::Swimlane/454d1176-305e-40c3-ab66-c6fdac382a1d&quot;,&quot;srn:stage11733927::Swimlane/00b2a8b9-345b-40eb-abe4-0d74832b3cfb&quot;,&quot;srn:stage11733927::Swimlane/525ec320-5276-4bbc-b8bc-89feeeb14328&quot;,&quot;srn:stage11733927::Swimlane/f5c522fa-e7f4-4be4-8f0e-469e4f603f36&quot;,&quot;srn:stage11733927::Swimlane/94eab80b-4b32-46c2-9ee2-20c7e898eeb3&quot;,&quot;srn:stage11733927::Swimlane/3fc23896-66b4-4bbd-925d-a977ab832acc&quot;,&quot;srn:stage11733927::Swimlane/7c2896dc-7604-4f5b-bc4e-0a0034d061d2&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;,&quot;srn:stage11733927::Swimlane/2a6bd270-2f19-4535-8244-014b2e43be49&quot;,&quot;srn:stage11733927::Swimlane/6720e478-06db-444d-a19f-42b61ba08d6b&quot;,&quot;srn:stage11733927::Swimlane/52d5c2a5-9132-44d9-8eb8-1386b5bb8dc4&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/5c8ebc78-17e2-49cb-acc7-fb200922d32a&quot;,&quot;srn:stage11733927::Swimlane/876ed902-5674-475d-9f94-8466a06c5625&quot;,&quot;srn:stage11733927::Swimlane/054e6112-5c09-4a64-806f-fdc03d4887da&quot;,&quot;srn:stage11733927::Swimlane/ba3b5b6e-9c31-4053-b37a-03d2dd0d558a&quot;,&quot;srn:stage11733927::Swimlane/e058b72f-904d-428d-9225-ea92e9166a9d&quot;,&quot;srn:stage11733927::Swimlane/d622d287-90d2-49d1-add1-22fdbb5cc4d0&quot;,&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;,&quot;srn:stage11733927::Swimlane/81a239ab-ac92-4b0d-899d-74c35e600b2a&quot;,&quot;srn:stage11733927::Swimlane/6579051f-fc8a-46e7-882a-0cde2219f9ef&quot;,&quot;srn:stage11733927::Swimlane/24f4367c-8a0e-4905-8811-0726d4d112bd&quot;,&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/6024d0eb-d1bb-4d48-9fd3-f96fff0e1d2e&quot;,&quot;srn:stage11733927::Swimlane/e55fb989-dbe7-46f7-8fa4-957c7e4acb52&quot;,&quot;srn:stage11733927::Swimlane/05fe70d3-183b-4452-b0f5-2e8f2aeb5996&quot;,&quot;srn:stage11733927::Swimlane/186b2a2d-4b46-4639-a942-bd396c53bd67&quot;,&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/a9443082-562d-4269-a53d-fba35565b4ce&quot;,&quot;srn:stage11733927::Swimlane/5e06ca2b-15b9-4654-99c0-2f2731b55e96&quot;,&quot;srn:stage11733927::Swimlane/55773a02-470e-4cf8-95de-2845ef4408d2&quot;,&quot;srn:stage11733927::Swimlane/ac7784fd-bd3d-4966-9bac-610c39053e99&quot;,&quot;srn:stage11733927::Swimlane/ff34414f-e6d4-4b25-a45c-05c3d603dec9&quot;,&quot;srn:stage11733927::Swimlane/538951ca-f147-4685-90f1-083473ebba0e&quot;,&quot;srn:stage11733927::Swimlane/3ace1654-4a66-45da-9b3d-78d7b24583d2&quot;,&quot;srn:stage11733927::Swimlane/4dfead77-670a-4c66-b1da-81ed07092089&quot;,&quot;srn:stage11733927::Swimlane/d470e390-13f2-4859-97d6-2b2bb4fc3cba&quot;,&quot;srn:stage11733927::Swimlane/f8e036fd-4c39-4abf-b142-24a7c13adf91&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;]}}},&quot;query&quot;:&quot;query resources_total($filters: ResourceFilter) {\n  Resources(where: $filters) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ddb6-48d6-9c00-53c077389198/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d5b2a8c9b3b62da4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-d5b2a8c9b3b62da4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resources_total</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T07_policy_compliance_donut" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;policy_compliance_donut&quot;,&quot;variables&quot;:{&quot;failedFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;policyStatus&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;FAILED&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-03-31T17:43:18.010Z&quot;}},&quot;totalFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-03-31T17:43:18.010Z&quot;}}},&quot;query&quot;:&quot;query policy_compliance_donut($failedFilters: PolicyTrendsFilter, $totalFilters: PolicyTrendsFilter) {\n  failed: PolicyTrends(where: $failedFilters, groupby: {fields: [\&quot;policySrn\&quot;]}) {\n    count\n    __typename\n  }\n  total: PolicyTrends(where: $totalFilters, groupby: {fields: [\&quot;id\&quot;]}) {\n    count\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:25c9-483d-847f-561fb8da37e5/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">90a14a3861714ec1</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-90a14a3861714ec1-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">policy_compliance_donut</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T08_riskCountsV2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;riskCountsV2&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;offset&quot;:0,&quot;sort&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}],&quot;filter&quot;:{&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;}},&quot;includeRollup&quot;:{&quot;status&quot;:true,&quot;environment&quot;:true}},&quot;query&quot;:&quot;query riskCountsV2($filter: TicketRollupFilter!, $includeRollup: TicketRollupIncludeRollup!, $limit: Long = 100, $offset: Long = 0, $sort: [TicketRollupOrder] = [{riskScore: {order: ASC}}]) {\n  TicketRollups(where: $filter, includeRollup: $includeRollup) {\n    items(limit: $limit, offset: $offset, orderBy: $sort) {\n      count\n      severityCategory\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4151-42ad-bf38-7ef691abfb71/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">cd10376a0ffff149</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-cd10376a0ffff149-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">riskCountsV2</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compliance_T09_compliance_coverage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;compliance_coverage&quot;,&quot;variables&quot;:{&quot;key&quot;:&quot;standardSrn&quot;,&quot;filters&quot;:{&quot;standardSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;2023-03-31T17:43:18.010Z&quot;}}},&quot;query&quot;:&quot;query compliance_coverage($filters: PolicyTrendsFilter, $key: String) {\n  compliance_coverage: PolicyTrends(\n    where: $filters\n    groupby: {fields: [$key, \&quot;id\&quot;]}\n  ) {\n    items {\n      standardSrn\n      riskLevel\n      riskScore\n      standardControlSrn\n      standardFamilySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:67d2-443b-b171-a7cc617849d5/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">681b54bfd824ee2e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e95cb15be2e0c7a5f97e87009de904b4-681b54bfd824ee2e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">compliance_coverage</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T01_getSCCards" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSCCards&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSCCards {\n  SolutionCards {\n    count\n    items {\n      __typename\n      name\n      createdDate\n      sid\n      srn\n      lastModified\n      resourceId\n      createdBy\n      contains {\n        items {\n          resourceId\n          title\n          subtitle\n          name\n          resultLayout\n          static\n          type\n          widgetLocation\n          createdDate\n          createdBy\n          sid\n          srn\n          lastModified\n          widgetSize\n          selection\n          options\n          contains {\n            items {\n              name\n              sid\n              srn\n              ... on Search {\n                rootQueryName\n                lastModified\n                createdDate\n                query\n                resourceId\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3311a83b0d9577d5cbd14f66a7330c2c</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2fc4-48c3-a024-fb15f267b7e7/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">496026be30866e48</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3311a83b0d9577d5cbd14f66a7330c2c-496026be30866e48-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSCCards</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T02_piechartQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;piechartQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query piechartQuery {\n  DataContainers(\n    where: {and: [{and: [{active: {op: EQ, value: true}}, {type: {op: NOT_IN_LIST, values: [Folder]}}]}, {}]}\n  ) {\n    group {\n      key {\n        type\n        __typename\n      }\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">564e0612c8a686cdd56c3b43307f8c31</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9062-4713-a31f-96f203cb4e26/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">07e6b8f98fad4619</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">564e0612c8a686cdd56c3b43307f8c31-07e6b8f98fad4619-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">pieChartWidget_data_repository_types</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T03_tableWidgetQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;tableWidgetQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query tableWidgetQuery {\n  DataStores(where: {and: [{and: [{active: {op: EQ, value: true}}]}, {}, {}]}) {\n    items {\n      name\n      type\n      active\n      account\n      createdDate\n      auditEnabled\n      encryptionEnabled\n      publicRead\n      publicWrite\n      tagSet: tagSet\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b03ff4f2a2d5ac2da9e011c2d43d58ff</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9721-4eeb-a053-a76664b5b6f1/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5775e2ced1ffdca3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b03ff4f2a2d5ac2da9e011c2d43d58ff-5775e2ced1ffdca3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">tableWidget_data_stores_monitored</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T04_piechartQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;piechartQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query piechartQuery {\n  Compute(where: {and: [{and: [{active: {op: EQ, value: true}}]}, {}]}) {\n    group {\n      key {\n        region\n        __typename\n      }\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">71e0b5247fea4d643b22da34a72143d7</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e244-48fe-9e76-30cc53d2cdd1/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b8f16d5301bdb6bb</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">71e0b5247fea4d643b22da34a72143d7-b8f16d5301bdb6bb-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">pieChartWidget_compute_regions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T05_piechartQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;piechartQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query piechartQuery {\n  DataStores(where: {and: [{and: [{active: {op: EQ, value: true}}]}, {}]}) {\n    group {\n      key {\n        type\n        __typename\n      }\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">41d352523fe4d8ffd1f3748e5e906780</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6753-4038-8328-4bbf46b47445/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">acd380cebdd7288b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">41d352523fe4d8ffd1f3748e5e906780-acd380cebdd7288b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">pieChartWidget_data_store_types</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T06_tableWidgetQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;tableWidgetQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query tableWidgetQuery {\n  Tags(where: {and: [{}, {}, {}]}) {\n    items {\n      key\n      value\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">bd76062aac5276fc8fb5fc4b17c8d9a6</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ea13-4579-bb20-20b45aceeeed/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0f65ff83be60c0d8</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">bd76062aac5276fc8fb5fc4b17c8d9a6-0f65ff83be60c0d8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">tableWidget_tags_review</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T07_getSonraiSeaches" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSonraiSeaches&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSonraiSeaches {\n  SavedQueries {\n    items(limit: -1) {\n      name\n      query\n      variables {\n        items {\n          defaultValue\n          name\n          __typename\n        }\n        __typename\n      }\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">943f43df60c7ac8a5003c9c7e5d44139</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:efe8-4474-b526-8111b644921f/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">05ff94393a039200</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">943f43df60c7ac8a5003c9c7e5d44139-05ff94393a039200-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSonraiSeaches</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T08_getSavedSearches" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSavedSearches&quot;,&quot;variables&quot;:{&quot;includeDetails&quot;:true},&quot;query&quot;:&quot;query getSavedSearches($includeDetails: Boolean = true) {\n  Searches {\n    items(limit: -1) {\n      name\n      description\n      query\n      createdDate\n      createdBy\n      sid\n      srn\n      lastModified\n      rootQueryName\n      resourceId\n      containedByWidget @include(if: $includeDetails) {\n        count\n        items(limit: -1) {\n          title\n          type\n          srn\n          containedBy {\n            items {\n              name\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      containedByControlPolicy @include(if: $includeDetails) {\n        count\n        items(limit: -1) {\n          title\n          srn\n          __typename\n        }\n        __typename\n      }\n      ownedByOrganization @include(if: $includeDetails) {\n        items {\n          sid\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d9703ec5a9e29637631976b324d374d3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:90be-4d23-ae84-90081b3718e2/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1eaaf2ad571b2f49</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d9703ec5a9e29637631976b324d374d3-1eaaf2ad571b2f49-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSavedSearches</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T09_fetchSwimlanes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchSwimlanes&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchSwimlanes {\n  Swimlanes {\n    items(limit: -1) {\n      description\n      label\n      title\n      srn\n      defaultImportance\n      createdBy\n      sid\n      preventionEnabled\n      lastModified\n      createdDate\n      name\n      accounts\n      names\n      resourceIds\n      tags\n      resourceId\n      environments\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a13ba070fd6bf5e082189100a923729e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:96fd-4136-8b8a-931cef11928f/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b8e58dc59262476f</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a13ba070fd6bf5e082189100a923729e-b8e58dc59262476f-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchSwimlanes</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T10_getAccounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAccounts&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAccounts {\n  Accounts {\n    items(limit: -1) {\n      name\n      srn\n      friendlyName\n      account\n      cloudType\n      type\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">dbdd91628f0b0a7f74c71737a7d4521f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e6e3-4e6f-962d-23863d1a7347/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fd458bb422e4fe72</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">dbdd91628f0b0a7f74c71737a7d4521f-fd458bb422e4fe72-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAccounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard_T11_getSubscriptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSubscriptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSubscriptions {\n  Subscriptions {\n    items(limit: -1) {\n      friendlyName\n      name\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">9494037fe62c7a90eba317ed8a568ad2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:db63-4986-9094-305760726c93/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">545351bc59e60720</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">9494037fe62c7a90eba317ed8a568ad2-545351bc59e60720-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSubscriptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T01_fetchControlPoliciesOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchControlPoliciesOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchControlPoliciesOptions {\n  ControlPolicies {\n    items(limit: -1) {\n      srn\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3f2c-455f-b8f2-8d5f0b4054b7/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2c01a499b2787797</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e-2c01a499b2787797-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchControlPoliciesOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T02_fetchCrmTicketKeyOptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchCrmTicketKeyOptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchCrmTicketKeyOptions {\n  identityOptions: getChangeDetectionOptions(resourceType: Identity) {\n    keyType\n    keyName\n    __typename\n  }\n  dataOptions: getChangeDetectionOptions(resourceType: Data) {\n    keyType\n    keyName\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:c85f-4f90-9d39-4f7a4e02459d/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1396e0712282d61e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e-1396e0712282d61e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchCrmTicketKeyOptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T03_counPanelAssetInventory" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;counPanelAssetInventory&quot;,&quot;variables&quot;:{&quot;includeAws&quot;:true,&quot;includeAzure&quot;:true,&quot;includeGcp&quot;:true,&quot;includeOci&quot;:true,&quot;swimlaneFilter&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/c87de86d-6448-4312-8141-c67f10ffbc66&quot;,&quot;srn:stage11733927::Swimlane/54346aae-f962-4303-8775-558e376772da&quot;,&quot;srn:stage11733927::Swimlane/632c1e2a-0cf7-4432-b593-4b0c45c082d5&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/5861c490-03f2-4ca8-a060-f822e88dd658&quot;,&quot;srn:stage11733927::Swimlane/846176cf-47c2-4d8f-b094-43e1d5f161fc&quot;,&quot;srn:stage11733927::Swimlane/635c2880-ca1d-4434-92a4-c7feaf74ae53&quot;,&quot;srn:stage11733927::Swimlane/4f7e22fa-6c07-41bc-943d-23ad332ddf18&quot;,&quot;srn:stage11733927::Swimlane/c177456e-edcf-4bad-aeac-2e7834afd322&quot;,&quot;srn:stage11733927::Swimlane/be0a8d40-d422-4eb4-a940-d95da8486981&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/9057a678-a9c9-4088-ac95-f42d99e20d45&quot;,&quot;srn:stage11733927::Swimlane/8ffcd427-b034-4080-9feb-74abe4a2bc1a&quot;,&quot;srn:stage11733927::Swimlane/17dce178-87b1-4b25-be32-ce58a03cffd7&quot;,&quot;srn:stage11733927::Swimlane/60b72733-a220-4260-8ed1-66671f59597e&quot;,&quot;srn:stage11733927::Swimlane/798d6f98-48ac-4a71-b704-3765e39d5938&quot;,&quot;srn:stage11733927::Swimlane/7bc365e5-b897-4b58-8753-be85e03573f6&quot;,&quot;srn:stage11733927::Swimlane/7e986fc7-7db9-475c-898b-c666b1c7411a&quot;,&quot;srn:stage11733927::Swimlane/d8db091e-0147-40fe-bef0-08f2f5d172cf&quot;,&quot;srn:stage11733927::Swimlane/a459fece-58ef-49e2-9779-357f876e15e9&quot;,&quot;srn:stage11733927::Swimlane/a6736f91-4891-4e61-b96d-7ca3d9ff25f7&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/2c9894ff-d4de-4d83-9557-630d70634d8a&quot;,&quot;srn:stage11733927::Swimlane/0fccef66-2e58-4164-ae72-cf6528270022&quot;,&quot;srn:stage11733927::Swimlane/082a0e22-5dad-41ee-b7ab-15e567119797&quot;,&quot;srn:stage11733927::Swimlane/882f219e-e3aa-453e-b997-91e8e0b5516e&quot;,&quot;srn:stage11733927::Swimlane/f47a8e25-188a-4c9d-91d6-1a54883e9fa2&quot;,&quot;srn:stage11733927::Swimlane/a766f0c1-f619-4fba-94a9-498aeb81624c&quot;,&quot;srn:stage11733927::Swimlane/edb2917d-81a3-4b74-9e22-1af5f507a2fe&quot;,&quot;srn:stage11733927::Swimlane/d84a67d6-760c-4a6a-924b-c8f46c9d5360&quot;,&quot;srn:stage11733927::Swimlane/57cdd790-cb15-4213-a618-d7306ae5e595&quot;,&quot;srn:stage11733927::Swimlane/454d1176-305e-40c3-ab66-c6fdac382a1d&quot;,&quot;srn:stage11733927::Swimlane/00b2a8b9-345b-40eb-abe4-0d74832b3cfb&quot;,&quot;srn:stage11733927::Swimlane/525ec320-5276-4bbc-b8bc-89feeeb14328&quot;,&quot;srn:stage11733927::Swimlane/f5c522fa-e7f4-4be4-8f0e-469e4f603f36&quot;,&quot;srn:stage11733927::Swimlane/94eab80b-4b32-46c2-9ee2-20c7e898eeb3&quot;,&quot;srn:stage11733927::Swimlane/3fc23896-66b4-4bbd-925d-a977ab832acc&quot;,&quot;srn:stage11733927::Swimlane/7c2896dc-7604-4f5b-bc4e-0a0034d061d2&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;,&quot;srn:stage11733927::Swimlane/2a6bd270-2f19-4535-8244-014b2e43be49&quot;,&quot;srn:stage11733927::Swimlane/6720e478-06db-444d-a19f-42b61ba08d6b&quot;,&quot;srn:stage11733927::Swimlane/52d5c2a5-9132-44d9-8eb8-1386b5bb8dc4&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/5c8ebc78-17e2-49cb-acc7-fb200922d32a&quot;,&quot;srn:stage11733927::Swimlane/876ed902-5674-475d-9f94-8466a06c5625&quot;,&quot;srn:stage11733927::Swimlane/054e6112-5c09-4a64-806f-fdc03d4887da&quot;,&quot;srn:stage11733927::Swimlane/ba3b5b6e-9c31-4053-b37a-03d2dd0d558a&quot;,&quot;srn:stage11733927::Swimlane/e058b72f-904d-428d-9225-ea92e9166a9d&quot;,&quot;srn:stage11733927::Swimlane/d622d287-90d2-49d1-add1-22fdbb5cc4d0&quot;,&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;,&quot;srn:stage11733927::Swimlane/81a239ab-ac92-4b0d-899d-74c35e600b2a&quot;,&quot;srn:stage11733927::Swimlane/6579051f-fc8a-46e7-882a-0cde2219f9ef&quot;,&quot;srn:stage11733927::Swimlane/24f4367c-8a0e-4905-8811-0726d4d112bd&quot;,&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/6024d0eb-d1bb-4d48-9fd3-f96fff0e1d2e&quot;,&quot;srn:stage11733927::Swimlane/e55fb989-dbe7-46f7-8fa4-957c7e4acb52&quot;,&quot;srn:stage11733927::Swimlane/05fe70d3-183b-4452-b0f5-2e8f2aeb5996&quot;,&quot;srn:stage11733927::Swimlane/186b2a2d-4b46-4639-a942-bd396c53bd67&quot;,&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/a9443082-562d-4269-a53d-fba35565b4ce&quot;,&quot;srn:stage11733927::Swimlane/5e06ca2b-15b9-4654-99c0-2f2731b55e96&quot;,&quot;srn:stage11733927::Swimlane/55773a02-470e-4cf8-95de-2845ef4408d2&quot;,&quot;srn:stage11733927::Swimlane/ac7784fd-bd3d-4966-9bac-610c39053e99&quot;,&quot;srn:stage11733927::Swimlane/ff34414f-e6d4-4b25-a45c-05c3d603dec9&quot;,&quot;srn:stage11733927::Swimlane/538951ca-f147-4685-90f1-083473ebba0e&quot;,&quot;srn:stage11733927::Swimlane/3ace1654-4a66-45da-9b3d-78d7b24583d2&quot;,&quot;srn:stage11733927::Swimlane/4dfead77-670a-4c66-b1da-81ed07092089&quot;,&quot;srn:stage11733927::Swimlane/d470e390-13f2-4859-97d6-2b2bb4fc3cba&quot;,&quot;srn:stage11733927::Swimlane/f8e036fd-4c39-4abf-b142-24a7c13adf91&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;]}},&quot;query&quot;:&quot;query counPanelAssetInventory($includeAws: Boolean = false, $includeAzure: Boolean = false, $includeGcp: Boolean = false, $includeOci: Boolean = false, $swimlaneFilter: StringOperator) {\n  publicClouds: Accounts(\n    where: {and: [{active: {value: true}}, {type: {op: NEQ, value: OCICompartment}}]}\n  ) {\n    items(limit: -1) {\n      cloudType\n      name\n      srn\n      __typename\n    }\n    __typename\n  }\n  ... on Query @include(if: $includeAws) {\n    aws_Identity_User: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: User}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Identity_Group: Groups(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: Group}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Identity_AWSAccessKey: AccessKeys(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: AWSAccessKey}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Identity_SAMLProvider: IdentityProviders(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: SAMLProvider}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_Bucket: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: Bucket}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_Table: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: Table}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_Database: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: Database}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_ReplicationGroup: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: ReplicationGroup}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Data_EBS: DataStores(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: EBS}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_VPC: Network(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: VPC}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_EC2: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: EC2}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_AWSLambda: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: AWSLambda}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_AWSKubernetesCluster: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: AWSKubernetesCluster}}]}\n    ) {\n      count\n      __typename\n    }\n    aws_Infrastructure_CloudFrontDistribution: NetworkComponents(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: CloudFrontDistribution}}]}\n    ) {\n      count\n      __typename\n    }\n    __typename\n  }\n  ... on Query @include(if: $includeAzure) {\n    azure_Identity_AzureTenant: Accounts(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureTenant}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Identity_ServicePrincipal: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: ServicePrincipal}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Identity_ActiveDirectoryUser: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: ActiveDirectoryUser}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Identity_AzureManagedIdentity: IdentityProviders(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureManagedIdentity}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Identity_AzureManagementGroup: OrganizationalUnits(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureManagementGroup}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Data_StorageAccount: DataStores(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: StorageAccount}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Data_FileShare: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: FileShare}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Data_SQLServer: DataStores(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: SQLServer}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Data_MySQL: DataStores(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: MySQL}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_VNET: Network(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: VNET}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_VirtualMachine: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: VirtualMachine}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_AzureSubnet: NetworkSubnet(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureSubnet}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_NetworkLoadBalancer: NetworkComponents(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: NetworkLoadBalancer}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_AzureAppGateway: NetworkComponents(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;aws\&quot;}}, {type: {value: AzureAppGateway}}]}\n    ) {\n      count\n      __typename\n    }\n    azure_Infrastructure_AzureFunctionTrigger: Triggers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;azure\&quot;}}, {type: {value: AzureFunctionTrigger}}]}\n    ) {\n      count\n      __typename\n    }\n    __typename\n  }\n  ... on Query @include(if: $includeGcp) {\n    gcp_Identity_GCPServiceAccount: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GCPServiceAccount}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Identity_GCPService: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GCPService}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Data_GCPStorageBucket: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GCPStorageBucket}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Data_GcpDisk: BlockStorage(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GcpDisk}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Infrastructure_VPC: Network(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: VPC}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Infrastructure_VirtualMachine: Compute(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: VirtualMachine}}]}\n    ) {\n      count\n      __typename\n    }\n    gcp_Infrastructure_GCPSubnetwork: NetworkSubnet(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;gcp\&quot;}}, {type: {value: GCPSubnetwork}}]}\n    ) {\n      count\n      __typename\n    }\n    __typename\n  }\n  ... on Query @include(if: $includeOci) {\n    oci_Identity_OCIUser: Users(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIUser}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Identity_OCIGroup: Groups(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIGroup}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Identity_OCIDynamicGroup: IdentityReferences(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIDynamicGroup}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Data_OCIBucket: DataContainers(\n      where: {and: [{active: {value: true}}, {swimlaneSRNs: $swimlaneFilter}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIBucket}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Infrastructure_OCIVCN: Network(\n      where: {and: [{active: {value: true}}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCIVCN}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Infrastructure_OCILoadBalancer: NetworkComponents(\n      where: {and: [{active: {value: true}}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCILoadBalancer}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Infrastructure_OCISubnet: NetworkSubnet(\n      where: {and: [{active: {value: true}}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {value: OCISubnet}}]}\n    ) {\n      count\n      __typename\n    }\n    oci_Infrastructure_OCICompute: Compute(\n      where: {and: [{active: {value: true}}, {cloudType: {value: \&quot;oci\&quot;}}, {type: {op: IN_LIST, values: [OCIInstance, OCIDedicatedVmHost]}}]}\n    ) {\n      count\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7d86-4927-856a-02f7fb0d5750/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">7dd7df20b6b5eb48</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e-7dd7df20b6b5eb48-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">counPanelAssetInventory</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T04_fetchSummaryPanelData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchSummaryPanelData&quot;,&quot;variables&quot;:{&quot;totalsFilter&quot;:{&quot;swimlaneSrn&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyMetaType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]}},&quot;platformFilter&quot;:{&quot;controlPolicyMetaType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;PLATFORM&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKeyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;identityFilter&quot;:{&quot;controlPolicyMetaType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;IDENTITY&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKeyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;dataFilter&quot;:{&quot;controlPolicyMetaType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;DATA&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;swimlaneSrn&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKeyName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;maturityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}}},&quot;query&quot;:&quot;query fetchSummaryPanelData($totalsFilter: TicketRollupFilter!, $platformFilter: TicketRollupFilter!, $identityFilter: TicketRollupFilter!, $dataFilter: TicketRollupFilter!) {\n  totals: TicketRollups(where: $totalsFilter, includeRollup: {environment: true}) {\n    items {\n      count\n      riskScore\n      riskScoreDescription\n      riskScoreNumeric\n      controlPolicyMetaType\n      __typename\n    }\n    __typename\n  }\n  platform: TicketRollups(\n    where: $platformFilter\n    includeRollup: {environment: true}\n  ) {\n    items(orderBy: {riskScore: {order: ASC}}, limit: 4) {\n      ...all_the_fields\n      __typename\n    }\n    __typename\n  }\n  identity: TicketRollups(\n    where: $identityFilter\n    includeRollup: {environment: true}\n  ) {\n    items(orderBy: {riskScore: {order: ASC}}, limit: 4) {\n      ...all_the_fields\n      __typename\n    }\n    __typename\n  }\n  data: TicketRollups(where: $dataFilter, includeRollup: {environment: true}) {\n    items(orderBy: {riskScore: {order: ASC}}, limit: 4) {\n      ...all_the_fields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment all_the_fields on TicketRollup {\n  riskScore\n  riskScoreDescription\n  riskScoreNumeric\n  ticketKey\n  ticketKeyName\n  maturityArea\n  count\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:8f5e-4b0e-a839-c497208e2bba/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9b96d23342f3bca6</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e-9b96d23342f3bca6-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchSummaryPanelData</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T05_resourcesRisksPanelData" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcesRisksPanelData&quot;,&quot;variables&quot;:{&quot;limit&quot;:6,&quot;filter&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceLabel&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:null},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;CRITICAL&quot;]}},&quot;orderBy&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}]},&quot;query&quot;:&quot;query resourcesRisksPanelData($filter: TicketRollupFilter!, $orderBy: [TicketRollupOrder], $limit: Long = 6, $preaggregationLimit: Long = 1000) {\n  TicketRollups(where: $filter, includeRollup: {environment: true}) {\n    items(\n      orderBy: $orderBy\n      limit: $limit\n      preaggregationLimit: $preaggregationLimit\n    ) {\n      resourceSRN\n      resourceName\n      resourceType\n      resourceLabel\n      count\n      riskScoreNumeric\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:fcf2-48c8-aab2-2f2a526b5ec3/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">41236dd5f7552181</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e-41236dd5f7552181-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcesRisksPanelData</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T06_risk_levels_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;risk_levels_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-02-28T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-03-29T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;PLATFORM&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query risk_levels_by_metatype($metaType: String!, $to: DateTime!, $from: DateTime!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}, status: {op: EQ, value: \&quot;NEW\&quot;}}\n    type: {type: RISK_LEVELS}\n  ) {\n    items {\n      dateTime\n      riskLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5134-47a6-9361-218666f202bc/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">095838453014a18b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e-095838453014a18b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">risk_levels_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T07_risk_levels_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;risk_levels_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-02-28T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-03-29T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;IDENTITY&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query risk_levels_by_metatype($metaType: String!, $to: DateTime!, $from: DateTime!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}, status: {op: EQ, value: \&quot;NEW\&quot;}}\n    type: {type: RISK_LEVELS}\n  ) {\n    items {\n      dateTime\n      riskLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:365d-444e-b0d1-8889cf761a74/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8439b6057cf2ac15</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e-8439b6057cf2ac15-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">risk_levels_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T08_risk_levels_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;risk_levels_by_metatype&quot;,&quot;variables&quot;:{&quot;from&quot;:&quot;2023-02-28T00:00:00.000Z&quot;,&quot;to&quot;:&quot;2023-03-29T23:59:59.999Z&quot;,&quot;granularity&quot;:&quot;DAY&quot;,&quot;metaType&quot;:&quot;DATA&quot;,&quot;environmentNames&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;query&quot;:&quot;query risk_levels_by_metatype($metaType: String!, $to: DateTime!, $from: DateTime!, $environmentNames: [String!]!, $granularity: TicketTrendGranularity!) {\n  TicketTrends(\n    granularity: {granularity: $granularity}\n    where: {dateTime: {op: BETWEEN, values: [$from, $to]}, metaType: {op: EQ, value: $metaType}, environmentName: {op: IN_LIST, values: $environmentNames}, status: {op: EQ, value: \&quot;NEW\&quot;}}\n    type: {type: RISK_LEVELS}\n  ) {\n    items {\n      dateTime\n      riskLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:655e-4030-af79-de2df66a7b1d/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">41bbfff2278e2759</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">91bdbadfae8d11a1ea989e9434c7494e-41bbfff2278e2759-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">risk_levels_by_metatype</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Summary_T09_risk_levels_by_metatype" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;resourcesRisksPanelData&quot;,&quot;variables&quot;:{&quot;limit&quot;:6,&quot;filter&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;environment&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;srn:azure:ActiveDirectory::1bd233b2-c77b-4210-8821-6d698724bb61/User/ae395579-e368-4e31-b2bd-b15268e531f0&quot;,&quot;srn:aws:iam::474484658459/Role/custom-pricing-org-role&quot;,&quot;srn:aws:iam::474484658459/User/Root/Root&quot;,&quot;srn:aws:iam::474484658459/User/User/adam.doyle&quot;,&quot;srn:aws:iam::474484658459/User/User/adam.leclerc&quot;,&quot;srn:aws:iam::474484658459/Role/AWSReservedSSO_AdministratorAccess_d8f615c79fc77094&quot;]}}},&quot;query&quot;:&quot;query resourcesRisksPanelData($filter: TicketRollupFilter!, $orderBy: [TicketRollupOrder], $limit: Long = 6, $preaggregationLimit: Long = 1000) {\n  TicketRollups(where: $filter, includeRollup: {environment: true}) {\n    items(\n      orderBy: $orderBy\n      limit: $limit\n      preaggregationLimit: $preaggregationLimit\n    ) {\n      resourceSRN\n      resourceName\n      resourceType\n      resourceLabel\n      count\n      riskScoreNumeric\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">744a6ddd7b35efad6be68e2db5f9f650</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a986-4539-8d03-85f969f5f140/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e8fbc9065143ab32</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">744a6ddd7b35efad6be68e2db5f9f650-e8fbc9065143ab32-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">resourcesRisksPanelData</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Maturity_T01_fetchMaturitySwimlanes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchMaturitySwimlanes&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchMaturitySwimlanes {\n  Swimlanes {\n    items(limit: -1) {\n      srn\n      title\n      targetMaturityLevel\n      environments\n      accounts\n      resourceIds\n      tags\n      __typename\n    }\n    __typename\n  }\n  Environments {\n    items {\n      name\n      friendlyName\n      targetMaturityLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b911d026273964a2fb3899ec1b668b99</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3fde-4fe2-a487-7b9d09767e37/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fa97db73c900d010</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b911d026273964a2fb3899ec1b668b99-fa97db73c900d010-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchMaturitySwimlanes</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Maturity_T02_fetchMaturitySwimlanes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchMaturitySwimlanesPassing&quot;,&quot;variables&quot;:{&quot;m1Swimlanes&quot;:[&quot;srn:stage11733927::Swimlane/b3c77842-5f65-424d-acd9-f15dd023b5fd&quot;,&quot;srn:stage11733927::Swimlane/42112df8-6dae-46a1-8b93-2987c1c0793c&quot;,&quot;srn:stage11733927::Swimlane/8da13aac-7408-4a0b-b8b9-504f47270e13&quot;,&quot;srn:stage11733927::Swimlane/66b7c16f-8dd0-4224-b6a7-4e4d2404c889&quot;,&quot;srn:stage11733927::Swimlane/1bffc47f-80b9-4bd5-a373-4ca2aae7dd62&quot;,&quot;srn:stage11733927::Swimlane/16fdd1e2-7336-4995-9463-1de3694184d1&quot;,&quot;srn:stage11733927::Swimlane/415689ae-cd0b-4eef-bb63-73b5e1d3067a&quot;,&quot;srn:stage11733927::Swimlane/81701b38-3609-4467-baeb-e741b59138d5&quot;,&quot;srn:stage11733927::Swimlane/616ad5d7-5b7e-49ed-8e1b-5306a6ca4b1b&quot;,&quot;srn:stage11733927::Swimlane/efe84463-3c2c-47af-b606-c868a6a74485&quot;,&quot;srn:stage11733927::Swimlane/df28688e-458f-42ca-acc4-b0a04c01b617&quot;,&quot;srn:stage11733927::Swimlane/8dc9294c-bf80-4e3f-8b29-1f94e3b435e5&quot;,&quot;srn:stage11733927::Swimlane/01360e59-f63b-4b8f-8007-07941051e722&quot;,&quot;srn:stage11733927::Swimlane/efce2d9d-56a5-45b0-8457-197891171142&quot;,&quot;srn:stage11733927::Swimlane/3ea0ed41-9f3b-4724-b501-a634d495c302&quot;,&quot;srn:stage11733927::Swimlane/39d18340-4efd-4867-bd1d-d099a70554ae&quot;],&quot;m1Include&quot;:true,&quot;m2Swimlanes&quot;:[],&quot;m2Include&quot;:false,&quot;m3Swimlanes&quot;:[&quot;srn:stage11733927::Swimlane/b70ebaca-a1c0-46a0-9054-aa3c912e431b&quot;,&quot;srn:stage11733927::Swimlane/632f9001-a7ee-4a36-a9b4-34e548b474a2&quot;,&quot;srn:stage11733927::Swimlane/0e16e877-4789-4f05-9630-ac8359053b8e&quot;,&quot;srn:stage11733927::Swimlane/4f91c051-9646-4117-a465-b266a67223a0&quot;,&quot;srn:stage11733927::Swimlane/ec8b4243-8b66-4339-ab40-077decf7e399&quot;,&quot;srn:stage11733927::Swimlane/0fe6ec5a-c7e5-4f57-a1b4-7e09b16af9c9&quot;,&quot;srn:stage11733927::Swimlane/67eddbc8-3996-4bf4-81ca-1174d322eec5&quot;,&quot;srn:stage11733927::Swimlane/4b91f1c7-f50b-4f4e-8954-ee90f8c05eb7&quot;,&quot;srn:stage11733927::Swimlane/ff2fc0a3-9bcf-4df9-8b2d-ea98c75880a6&quot;,&quot;srn:stage11733927::Swimlane/73e293f8-0271-4e1e-8f97-a7df6b4ab709&quot;,&quot;srn:stage11733927::Swimlane/dd7c19de-f32b-431f-b78c-6b1909c6d40e&quot;,&quot;srn:stage11733927::Swimlane/8039a691-b59e-4c73-bd94-defcc3e8c434&quot;,&quot;srn:stage11733927::Swimlane/55b93279-0eb0-4973-977a-81153e5b4be4&quot;,&quot;srn:stage11733927::Swimlane/85a3b536-b744-4c4f-9b9b-369e1f6b5724&quot;,&quot;srn:stage11733927::Swimlane/ced52d2a-c358-4dbb-8734-7b70f782e23d&quot;,&quot;srn:stage11733927::Swimlane/1806fd9d-b37c-45fc-a3fe-6f88c79b6551&quot;,&quot;srn:stage11733927::Swimlane/b452d257-cb44-411d-9cac-0179e666deff&quot;,&quot;srn:stage11733927::Swimlane/9cd7adcc-c7d7-4cd2-95d2-b8df5b40bb13&quot;,&quot;srn:stage11733927::Swimlane/3304300b-49c8-4372-8847-110905c9dbdb&quot;,&quot;srn:stage11733927::Swimlane/d10808ce-ebfa-4f83-925c-22a6016d2da4&quot;,&quot;srn:stage11733927::Swimlane/238581e0-c08c-42cb-a459-4a3334b33cae&quot;,&quot;srn:stage11733927::Swimlane/9bfc9225-4af4-47a4-bcf1-8523c4d00519&quot;,&quot;srn:stage11733927::Swimlane/c4ff1c5f-1a6b-440f-955e-6cdb8a0e8df9&quot;,&quot;srn:stage11733927::Swimlane/8d3d9ee2-eeb9-4145-85dc-cc2986c31ae7&quot;,&quot;srn:stage11733927::Swimlane/6f2dbab1-6521-4a0e-bbf1-86abf42fe1a5&quot;,&quot;srn:stage11733927::Swimlane/eb046ec8-f31c-481a-8577-a9d088bcd7e8&quot;,&quot;srn:stage11733927::Swimlane/1f7913de-78f4-4ba6-a705-86a3e38e53c6&quot;,&quot;srn:stage11733927::Swimlane/778b31a3-9154-4c25-afbc-429fe32751f5&quot;],&quot;m3Include&quot;:true,&quot;m4Swimlanes&quot;:[&quot;srn:stage11733927::Swimlane/161f59a8-4987-4cc8-9b0c-d6371b639f32&quot;,&quot;srn:stage11733927::Swimlane/b4757e68-85c1-439b-a52f-deb9e3cfad55&quot;,&quot;srn:stage11733927::Swimlane/1e40e15c-2c3c-4a40-9f2d-52c7b7937055&quot;,&quot;srn:stage11733927::Swimlane/d4174dce-a7f5-4b27-af9d-5a3a9cb89d27&quot;,&quot;srn:stage11733927::Swimlane/ffa2e8e3-ec98-410d-9b9d-fcbd70ec6082&quot;,&quot;srn:stage11733927::Swimlane/8c6bf995-7f4d-40b9-8134-428b0ce03c7a&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/bed7bd36-ee29-4544-99e5-94e3130c8574&quot;,&quot;srn:stage11733927::Swimlane/cedbfdda-269f-4d8e-b4f0-87cce12a567b&quot;,&quot;srn:stage11733927::Swimlane/f8e036fd-4c39-4abf-b142-24a7c13adf91&quot;,&quot;srn:stage11733927::Swimlane/c87de86d-6448-4312-8141-c67f10ffbc66&quot;,&quot;srn:stage11733927::Swimlane/e058b72f-904d-428d-9225-ea92e9166a9d&quot;,&quot;srn:stage11733927::Swimlane/882f219e-e3aa-453e-b997-91e8e0b5516e&quot;,&quot;srn:stage11733927::Swimlane/566aa3d1-efd5-4e5b-b7a9-09aea0ffef7a&quot;,&quot;srn:stage11733927::Swimlane/1656eeac-9fae-4bb8-946f-2d27008eb42b&quot;,&quot;srn:stage11733927::Swimlane/566164c6-e529-4b9a-a065-6677cda5a586&quot;,&quot;srn:stage11733927::Swimlane/0a87b60e-6349-4858-810b-f846762d3d55&quot;,&quot;srn:stage11733927::Swimlane/9057a678-a9c9-4088-ac95-f42d99e20d45&quot;,&quot;srn:stage11733927::Swimlane/5a349d39-d2c2-4d77-a003-7d8437bcf400&quot;,&quot;srn:stage11733927::Swimlane/958d066a-05be-45be-be73-eaa8109adafe&quot;,&quot;srn:stage11733927::Swimlane/55773a02-470e-4cf8-95de-2845ef4408d2&quot;,&quot;srn:stage11733927::Swimlane/ade3b043-f5af-4aca-a484-ef3a03a1171a&quot;,&quot;srn:stage11733927::Swimlane/9595b561-19d8-46e1-a5f0-65ea43f79e0f&quot;,&quot;srn:stage11733927::Swimlane/ce09ecf0-90c6-410e-98f3-d48e6b24c015&quot;,&quot;srn:stage11733927::Swimlane/d622d287-90d2-49d1-add1-22fdbb5cc4d0&quot;,&quot;srn:stage11733927::Swimlane/47d24b2a-5aa2-47f8-95db-22c74ea30b6c&quot;,&quot;srn:stage11733927::Swimlane/edb2917d-81a3-4b74-9e22-1af5f507a2fe&quot;,&quot;srn:stage11733927::Swimlane/322b22c8-3cc3-416d-b64d-843c3e935420&quot;,&quot;srn:stage11733927::Swimlane/cc8b09fb-3e9d-4dff-a9a8-37e0becea109&quot;,&quot;srn:stage11733927::Swimlane/4dfead77-670a-4c66-b1da-81ed07092089&quot;,&quot;srn:stage11733927::Swimlane/632c1e2a-0cf7-4432-b593-4b0c45c082d5&quot;,&quot;srn:stage11733927::Swimlane/99355681-05db-455a-b5dd-6660ffa4277e&quot;,&quot;srn:stage11733927::Swimlane/3e9dd7ed-8bd9-48cc-92ab-dc224c2c06f2&quot;,&quot;srn:stage11733927::Swimlane/635c2880-ca1d-4434-92a4-c7feaf74ae53&quot;,&quot;srn:stage11733927::Swimlane/b833ee33-f51b-4bbd-bbec-35f57c1c753c&quot;,&quot;srn:stage11733927::Swimlane/752c3b38-0ba4-444c-aa93-361f9aea5176&quot;,&quot;srn:stage11733927::Swimlane/7bc365e5-b897-4b58-8753-be85e03573f6&quot;,&quot;srn:stage11733927::Swimlane/c177456e-edcf-4bad-aeac-2e7834afd322&quot;,&quot;srn:stage11733927::Swimlane/2e8048c2-4979-42d1-a59d-74400e22e022&quot;,&quot;srn:stage11733927::Swimlane/876ed902-5674-475d-9f94-8466a06c5625&quot;,&quot;srn:stage11733927::Swimlane/c5df50aa-58b9-4ae4-ae56-763db2f55b35&quot;,&quot;srn:stage11733927::Swimlane/0fccef66-2e58-4164-ae72-cf6528270022&quot;,&quot;srn:stage11733927::Swimlane/e55fb989-dbe7-46f7-8fa4-957c7e4acb52&quot;,&quot;srn:stage11733927::Swimlane/41f8b832-a2e9-4102-ac47-e35418e9ee9a&quot;,&quot;srn:stage11733927::Swimlane/ffd99cfa-b27a-4bed-99ae-7e845f793029&quot;,&quot;srn:stage11733927::Swimlane/538951ca-f147-4685-90f1-083473ebba0e&quot;,&quot;srn:stage11733927::Swimlane/fcaf570e-bc5b-47e4-ad51-2356ccbd897c&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/ec764d89-24da-4d64-8ffb-fe164546567a&quot;,&quot;srn:stage11733927::Swimlane/6720e478-06db-444d-a19f-42b61ba08d6b&quot;,&quot;srn:stage11733927::Swimlane/576c2e2d-7ff3-4aa7-8e5b-2311d4be8203&quot;,&quot;srn:stage11733927::Swimlane/00b2a8b9-345b-40eb-abe4-0d74832b3cfb&quot;,&quot;srn:stage11733927::Swimlane/303c03f6-6aba-4a6a-9b6c-563e1a4c8b6d&quot;,&quot;srn:stage11733927::Swimlane/77f65632-4298-4485-b9e4-d7033db11d17&quot;,&quot;srn:stage11733927::Swimlane/52004ffa-055b-47b0-a2f5-30a3aa3a5dad&quot;,&quot;srn:stage11733927::Swimlane/6d741085-866d-48b9-a359-63a9c3525e40&quot;,&quot;srn:stage11733927::Swimlane/0c7518ff-a8b2-45e6-b8e7-a9609ee56b7e&quot;,&quot;srn:stage11733927::Swimlane/05fe70d3-183b-4452-b0f5-2e8f2aeb5996&quot;,&quot;srn:stage11733927::Swimlane/475521a5-73c6-47c2-962e-8e4417b10238&quot;,&quot;srn:stage11733927::Swimlane/54346aae-f962-4303-8775-558e376772da&quot;,&quot;srn:stage11733927::Swimlane/371411c2-f9fd-4657-84a5-d32196e0606d&quot;,&quot;srn:stage11733927::Swimlane/1f04ce21-d745-4fd3-b55a-d2c6274833dc&quot;,&quot;srn:stage11733927::Swimlane/2c9894ff-d4de-4d83-9557-630d70634d8a&quot;,&quot;srn:stage11733927::Swimlane/aee2108a-c622-4653-a182-5e8bf1526110&quot;,&quot;srn:stage11733927::Swimlane/d470e390-13f2-4859-97d6-2b2bb4fc3cba&quot;,&quot;srn:stage11733927::Swimlane/c3c35f59-341d-4a94-b384-a7617f804656&quot;,&quot;srn:stage11733927::Swimlane/3f7910dc-d53b-42e2-b5b2-bfdb6d471ab2&quot;,&quot;srn:stage11733927::Swimlane/7e986fc7-7db9-475c-898b-c666b1c7411a&quot;,&quot;srn:stage11733927::Swimlane/19f18796-4505-4ee8-a43e-1997b9473603&quot;,&quot;srn:stage11733927::Swimlane/5861c490-03f2-4ca8-a060-f822e88dd658&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/821bb9a3-2a11-4146-9bcd-50ef77c8be04&quot;,&quot;srn:stage11733927::Swimlane/864585b9-d9ad-4fc0-9cd7-51a7a9a06fcf&quot;,&quot;srn:stage11733927::Swimlane/846176cf-47c2-4d8f-b094-43e1d5f161fc&quot;,&quot;srn:stage11733927::Swimlane/b2970a8f-3e08-44d8-8819-b12f8d0b1036&quot;,&quot;srn:stage11733927::Swimlane/ff34414f-e6d4-4b25-a45c-05c3d603dec9&quot;,&quot;srn:stage11733927::Swimlane/71ba4ed3-4d0f-4074-91a9-efd3d80c1190&quot;,&quot;srn:stage11733927::Swimlane/2a6bd270-2f19-4535-8244-014b2e43be49&quot;,&quot;srn:stage11733927::Swimlane/0dff53c9-9aed-450e-97b6-f9c7c7269bb6&quot;,&quot;srn:stage11733927::Swimlane/3da8ae25-926a-40df-97a3-64c64435fa15&quot;,&quot;srn:stage11733927::Swimlane/273cdc1b-236d-4eff-9500-ce2e79f76131&quot;,&quot;srn:stage11733927::Swimlane/b3a26fc0-1e27-4bf6-8172-1a16309514ce&quot;,&quot;srn:stage11733927::Swimlane/94eab80b-4b32-46c2-9ee2-20c7e898eeb3&quot;,&quot;srn:stage11733927::Swimlane/5bcb750f-6910-4b0b-830a-6c39a76474ba&quot;,&quot;srn:stage11733927::Swimlane/798d6f98-48ac-4a71-b704-3765e39d5938&quot;,&quot;srn:stage11733927::Swimlane/8b5d40ad-f3fe-4dc5-88ca-87b85cd27af8&quot;,&quot;srn:stage11733927::Swimlane/5c8ebc78-17e2-49cb-acc7-fb200922d32a&quot;,&quot;srn:stage11733927::Swimlane/525ec320-5276-4bbc-b8bc-89feeeb14328&quot;,&quot;srn:stage11733927::Swimlane/17dce178-87b1-4b25-be32-ce58a03cffd7&quot;,&quot;srn:stage11733927::Swimlane/81a239ab-ac92-4b0d-899d-74c35e600b2a&quot;,&quot;srn:stage11733927::Swimlane/52d5c2a5-9132-44d9-8eb8-1386b5bb8dc4&quot;,&quot;srn:stage11733927::Swimlane/734f44e5-b824-424b-8a24-f6e33d9a4257&quot;,&quot;srn:stage11733927::Swimlane/aa440663-576c-4ec3-9f08-72e2c1a408e5&quot;,&quot;srn:stage11733927::Swimlane/070a6bfb-eb62-4308-83a6-c4962d7f7734&quot;,&quot;srn:stage11733927::Swimlane/60b72733-a220-4260-8ed1-66671f59597e&quot;,&quot;srn:stage11733927::Swimlane/f9f5b2e8-f46d-4442-980f-d393e2701b1f&quot;,&quot;srn:stage11733927::Swimlane/b56e2f0a-d79b-4699-ad9f-eba704dfbd6d&quot;,&quot;srn:stage11733927::Swimlane/2f4e024b-3303-4820-b1b5-f9096cde2e43&quot;,&quot;srn:stage11733927::Swimlane/ba3b5b6e-9c31-4053-b37a-03d2dd0d558a&quot;,&quot;srn:stage11733927::Swimlane/cebf6739-57ff-475b-92c8-0f5a3907c376&quot;,&quot;srn:stage11733927::Swimlane/ea565634-a002-4a81-91c0-bac8694e4cd6&quot;,&quot;srn:stage11733927::Swimlane/50362c1d-387c-4832-9da1-83ac4f93ebc5&quot;,&quot;srn:stage11733927::Swimlane/f4128920-8191-4aa7-ba9d-0655b1a05ddf&quot;,&quot;srn:stage11733927::Swimlane/efb0f4d5-1904-4b33-9523-c99c298c722f&quot;,&quot;srn:stage11733927::Swimlane/6c02eb55-3815-4f0b-a56b-2a747b8fa715&quot;],&quot;m4Include&quot;:true,&quot;m5Swimlanes&quot;:[&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/5e06ca2b-15b9-4654-99c0-2f2731b55e96&quot;,&quot;srn:stage11733927::Swimlane/57cdd790-cb15-4213-a618-d7306ae5e595&quot;,&quot;srn:stage11733927::Swimlane/8ffcd427-b034-4080-9feb-74abe4a2bc1a&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;,&quot;srn:stage11733927::Swimlane/a9443082-562d-4269-a53d-fba35565b4ce&quot;,&quot;srn:stage11733927::Swimlane/f47a8e25-188a-4c9d-91d6-1a54883e9fa2&quot;,&quot;srn:stage11733927::Swimlane/054e6112-5c09-4a64-806f-fdc03d4887da&quot;,&quot;srn:stage11733927::Swimlane/ac7784fd-bd3d-4966-9bac-610c39053e99&quot;,&quot;srn:stage11733927::Swimlane/a6736f91-4891-4e61-b96d-7ca3d9ff25f7&quot;,&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/24f4367c-8a0e-4905-8811-0726d4d112bd&quot;,&quot;srn:stage11733927::Swimlane/454d1176-305e-40c3-ab66-c6fdac382a1d&quot;,&quot;srn:stage11733927::Swimlane/7c2896dc-7604-4f5b-bc4e-0a0034d061d2&quot;,&quot;srn:stage11733927::Swimlane/6024d0eb-d1bb-4d48-9fd3-f96fff0e1d2e&quot;,&quot;srn:stage11733927::Swimlane/186b2a2d-4b46-4639-a942-bd396c53bd67&quot;,&quot;srn:stage11733927::Swimlane/a766f0c1-f619-4fba-94a9-498aeb81624c&quot;,&quot;srn:stage11733927::Swimlane/6579051f-fc8a-46e7-882a-0cde2219f9ef&quot;,&quot;srn:stage11733927::Swimlane/be0a8d40-d422-4eb4-a940-d95da8486981&quot;,&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/d8db091e-0147-40fe-bef0-08f2f5d172cf&quot;,&quot;srn:stage11733927::Swimlane/a459fece-58ef-49e2-9779-357f876e15e9&quot;,&quot;srn:stage11733927::Swimlane/d84a67d6-760c-4a6a-924b-c8f46c9d5360&quot;,&quot;srn:stage11733927::Swimlane/082a0e22-5dad-41ee-b7ab-15e567119797&quot;,&quot;srn:stage11733927::Swimlane/4f7e22fa-6c07-41bc-943d-23ad332ddf18&quot;,&quot;srn:stage11733927::Swimlane/3fc23896-66b4-4bbd-925d-a977ab832acc&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;,&quot;srn:stage11733927::Swimlane/f5c522fa-e7f4-4be4-8f0e-469e4f603f36&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;,&quot;srn:stage11733927::Swimlane/3ace1654-4a66-45da-9b3d-78d7b24583d2&quot;],&quot;m5Include&quot;:true},&quot;query&quot;:&quot;query fetchMaturitySwimlanesPassing($m5Swimlanes: [String], $m5Include: Boolean!, $m4Swimlanes: [String], $m4Include: Boolean!, $m3Swimlanes: [String], $m3Include: Boolean!, $m2Swimlanes: [String], $m2Include: Boolean!, $m1Swimlanes: [String], $m1Include: Boolean!) {\n  m5: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m5Swimlanes, maturityLevel: 5}\n  ) @include(if: $m5Include) {\n    ...fields\n    __typename\n  }\n  m4: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m4Swimlanes, maturityLevel: 4}\n  ) @include(if: $m4Include) {\n    ...fields\n    __typename\n  }\n  m3: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m3Swimlanes, maturityLevel: 3}\n  ) @include(if: $m3Include) {\n    ...fields\n    __typename\n  }\n  m2: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m2Swimlanes, maturityLevel: 2}\n  ) @include(if: $m2Include) {\n    ...fields\n    __typename\n  }\n  m1: GetTicketToPopulationRatios(\n    where: {swimlaneSrns: $m1Swimlanes, maturityLevel: 1}\n  ) @include(if: $m1Include) {\n    ...fields\n    __typename\n  }\n}\n\nfragment fields on TicketToPopulationRatios {\n  items {\n    ratioM1\n    ratioM2\n    ratioM3\n    ratioM4\n    ratioM5\n    swimlaneSrn\n    maturityLevel\n    maturityLevelNumeric\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b911d026273964a2fb3899ec1b668b99</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4b1a-48f6-8dc7-596424ef9f98/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5fdd815bc98c3098</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b911d026273964a2fb3899ec1b668b99-5fdd815bc98c3098-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchMaturitySwimlanesPassing</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Maturity_T03_fetchMaturitySwimlanes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchMaturitySwimlanesRadarChartData&quot;,&quot;variables&quot;:{&quot;includeOverall&quot;:false,&quot;includeForSwimlanes&quot;:true,&quot;input&quot;:[{&quot;swimlanesrn&quot;:&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;targetMarturityLevel&quot;:5}]},&quot;query&quot;:&quot;query fetchMaturitySwimlanesRadarChartData($input: [MaturityLevelMap], $includeOverall: Boolean!, $includeForSwimlanes: Boolean!) {\n  overall: MaturityScores @include(if: $includeOverall) {\n    items {\n      swimlaneSrn\n      securityArea\n      maturityScore\n      maturityScore\n      maturityLevel\n      __typename\n    }\n    __typename\n  }\n  by_swimlane: MaturityScores(where: {input: $input}) @include(if: $includeForSwimlanes) {\n    items {\n      swimlaneSrn\n      securityArea\n      maturityScore\n      maturityScore\n      maturityLevel\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b911d026273964a2fb3899ec1b668b99</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0a77-446d-9bb8-01546c14ca50/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0f5cdb7a49e4d567</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b911d026273964a2fb3899ec1b668b99-0f5cdb7a49e4d567-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchMaturitySwimlanesRadarChartData</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tickets_T01_fetchTicketCount" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketCount&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}}},&quot;query&quot;:&quot;query fetchTicketCount($filters: TicketsFilter) {\n  Tickets(where: $filters) {\n    globalCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2810f997bc9911d944af5192d3c64f35</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6db7-4e0d-99fb-1b549a1eef28/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e4c1698b873b0caf</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2810f997bc9911d944af5192d3c64f35-e4c1698b873b0caf-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketCount</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tickets_T02_getEscalations" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getEscalations&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getEscalations {\n  EscalationSchemes {\n    items {\n      srn\n      title\n      description\n      createdBy\n      createdDate\n      resourceId\n      assignments {\n        srn\n        swimlaneSRN\n        allSwimlanes\n        resourceId\n        __typename\n      }\n      filters {\n        srn\n        createdDate\n        createdBy\n        ticketType\n        ticketKey\n        allKeys\n        allTypes\n        controlFrameworkSrn\n        severity\n        onlyCreatedAfterDate\n        __typename\n      }\n      rules {\n        srn\n        triggerAfter\n        triggerAfterDate\n        actionType\n        assignUser {\n          userSrn\n          __typename\n        }\n        assignRole {\n          roleType: ActionRoleType\n          __typename\n        }\n        escalateToBot {\n          botSrn\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2810f997bc9911d944af5192d3c64f35</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9920-460f-a988-29501721ebd6/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8176cb164cce188a</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2810f997bc9911d944af5192d3c64f35-8176cb164cce188a-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getEscalations</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tickets_T03_fetchTicketTemplates" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketTemplates&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchTicketTemplates {\n  TicketTemplates {\n    items(limit: 1000, orderBy: [{title: {order: ASC}}]) {\n      srn\n      title\n      description\n      fields {\n        name\n        required\n        type\n        multi\n        description\n        select {\n          search\n          searchFieldMap {\n            items {\n              value\n              key\n              __typename\n            }\n            __typename\n          }\n          path\n          valueField\n          labelFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2810f997bc9911d944af5192d3c64f35</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0687-468f-b78b-2a93f5359fb1/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">b119cd90ff0f4922</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2810f997bc9911d944af5192d3c64f35-b119cd90ff0f4922-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketTemplates</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tickets_T04_fetchTicketList" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketList&quot;,&quot;variables&quot;:{&quot;limit&quot;:25,&quot;offset&quot;:0,&quot;filters&quot;:{&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;orderBy&quot;:[{&quot;severityNumeric&quot;:{&quot;order&quot;:&quot;DESC&quot;}}]},&quot;query&quot;:&quot;query fetchTicketList($filters: TicketsFilter, $limit: Long = 25, $offset: Long, $orderBy: [TicketOrder]) {\n  Tickets(where: $filters) {\n    items(orderBy: $orderBy, limit: $limit, offset: $offset) {\n      title\n      templatedTitle\n      status\n      assignedTo\n      severityNumeric\n      swimlaneSRNs\n      createdDate\n      transitionDate\n      transitionedBy\n      lastModified\n      firstSeen\n      lastSeen\n      createdBy\n      ticketKey\n      ticketType\n      resourceType\n      resourceLabel\n      actionClassification\n      account\n      srn\n      resourceSRN\n      resourceName\n      resourceId\n      policy {\n        srn\n        alertingLevelNumeric\n        controlPolicyMetaTypes\n        __typename\n      }\n      swimlanes {\n        environments\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">2810f997bc9911d944af5192d3c64f35</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4411-4229-8306-5db79b67b388/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">31fc824cc1cee628</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">2810f997bc9911d944af5192d3c64f35-31fc824cc1cee628-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketList</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TicketsTrands_T01_TicketTrendsV2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TicketTrendsV2&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]}},&quot;granularityRates&quot;:&quot;DAY&quot;,&quot;granularityTotals&quot;:&quot;DAY&quot;,&quot;openFilters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-30T00:00:00.000Z&quot;]}}},&quot;query&quot;:&quot;query TicketTrendsV2($filters: TicketTrendsFilter, $openFilters: TicketTrendsFilter, $granularityRates: TicketTrendGranularity!, $granularityTotals: TicketTrendGranularity!) {\n  Rates: TicketTrends(\n    where: $filters\n    type: {type: DAILY_RATES}\n    granularity: {granularity: $granularityRates}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n  Totals: TicketTrendsV2(\n    granularity: {granularity: $granularityTotals}\n    where: $openFilters\n    type: {type: DAILY_TOTALS}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">642ce20de74cdcca75de7f444d8b9629</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1424-49bd-b13a-6c51f679d8d1/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">d30cfb30094fc42d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">642ce20de74cdcca75de7f444d8b9629-d30cfb30094fc42d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TicketTrendsV2</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TicketsTrands_T02_TicketTrendsBySecurityArea" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;TicketTrendsBySecurityArea&quot;,&quot;variables&quot;:{&quot;filters&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]}}},&quot;query&quot;:&quot;query TicketTrendsBySecurityArea($filters: TicketTrendsFilter!) {\n  TicketTrends(\n    granularity: {granularity: DAY}\n    where: $filters\n    type: {type: OPEN_BY_SECURITY_AREA}\n  ) {\n    items {\n      count\n      dateTime\n      severityCategory\n      status\n      securityArea\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7f6a72963592be2d7b9dc9218c1b2d94</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:fff9-4c1d-a80a-8710a0e4739e/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1f5aeaef9ba4ff27</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7f6a72963592be2d7b9dc9218c1b2d94-1f5aeaef9ba4ff27-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">TicketTrendsBySecurityArea</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TicketsTrands_T03_getSecurityTicketChangePercentBySecArea" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSecurityTicketChangePercentBySecArea&quot;,&quot;variables&quot;:{&quot;accessFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Access&quot;}},&quot;auditFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Audit&quot;}},&quot;credentialsFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Credentials&quot;}},&quot;baseConfigFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Base Config&quot;}},&quot;encryptionFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Encryption&quot;}},&quot;leastPrivilegeFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Least Privilege&quot;}},&quot;networkFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Network&quot;}},&quot;dataProtectionFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Data Protection&quot;}},&quot;privilegeEscalationFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Privilege Escalation&quot;}},&quot;threatVulnManagementFilter&quot;:{&quot;environmentName&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;Production&quot;,&quot;Sensitive Data&quot;]},&quot;dateTime&quot;:{&quot;op&quot;:&quot;BETWEEN&quot;,&quot;values&quot;:[&quot;2023-02-28T00:00:00.000Z&quot;,&quot;2023-03-29T23:59:59.999Z&quot;]},&quot;status&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;NEW&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Threat &amp; Vuln. Management&quot;}}},&quot;query&quot;:&quot;query getSecurityTicketChangePercentBySecArea($accessFilter: TicketTrendsFilter!, $auditFilter: TicketTrendsFilter!, $credentialsFilter: TicketTrendsFilter!, $baseConfigFilter: TicketTrendsFilter!, $encryptionFilter: TicketTrendsFilter!, $leastPrivilegeFilter: TicketTrendsFilter!, $networkFilter: TicketTrendsFilter!, $dataProtectionFilter: TicketTrendsFilter!, $privilegeEscalationFilter: TicketTrendsFilter!, $threatVulnManagementFilter: TicketTrendsFilter!) {\n  access: TicketPercentageIncrease(where: $accessFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  audit: TicketPercentageIncrease(where: $auditFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  credentials: TicketPercentageIncrease(where: $credentialsFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  baseConfig: TicketPercentageIncrease(where: $baseConfigFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  encryption: TicketPercentageIncrease(where: $encryptionFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  leastPrivilege: TicketPercentageIncrease(where: $leastPrivilegeFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  network: TicketPercentageIncrease(where: $networkFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  dataProtection: TicketPercentageIncrease(where: $dataProtectionFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  privilegeEscalation: TicketPercentageIncrease(where: $privilegeEscalationFilter) {\n    isValid\n    countChange\n    __typename\n  }\n  threatVulnManagement: TicketPercentageIncrease(\n    where: $threatVulnManagementFilter\n  ) {\n    isValid\n    countChange\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a81d273153d414789b75fca913595687</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9faf-44ca-a3e6-2bae5d9bb4a1/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0b34c2b5fd802143</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a81d273153d414789b75fca913595687-0b34c2b5fd802143-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSecurityTicketChangePercentBySecArea</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Issues_T01_groupedTicketsGraphQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;groupedTicketsGraphQuery&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;orderBy&quot;:[{&quot;count&quot;:{&quot;order&quot;:&quot;DESC&quot;}}],&quot;controlFrameworkSrn&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;controlFrameworkSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlFrameworkTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlFrameworkEnabled&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:true},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;maturityArea&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;securityArea&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;objectiveSrn&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;objectiveSrn&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;EQ&quot;,&quot;value&quot;:&quot;Policy&quot;},&quot;objectiveName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;ticketKey&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;resourceSRN&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;resourceSRN&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;resourceName&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;resourceType&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;resourceType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;severityCategory&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;severityCategory&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;swimlaneSrns&quot;:{&quot;swimlaneSrns&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;swimlaneTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;controlFrameworkSrn_includeRollup&quot;:{&quot;status&quot;:true},&quot;maturityArea_includeRollup&quot;:{&quot;status&quot;:true},&quot;objectiveSrn_includeRollup&quot;:{&quot;status&quot;:true},&quot;ticketKey_includeRollup&quot;:{&quot;status&quot;:true},&quot;resourceSRN_includeRollup&quot;:{&quot;status&quot;:true},&quot;resourceType_includeRollup&quot;:{&quot;status&quot;:true},&quot;severityCategory_includeRollup&quot;:{&quot;status&quot;:true},&quot;swimlaneSrns_includeRollup&quot;:{&quot;status&quot;:true}},&quot;query&quot;:&quot;query groupedTicketsGraphQuery($limit: Long = 100, $orderBy: [TicketRollupOrder] = [{count: {order: DESC}}], $controlFrameworkSrn: TicketRollupFilter!, $maturityArea: TicketRollupFilter!, $objectiveSrn: TicketRollupFilter!, $resourceType: TicketRollupFilter!, $resourceSRN: TicketRollupFilter!, $severityCategory: TicketRollupFilter!, $ticketKey: TicketRollupFilter!, $swimlaneSrns: TicketRollupFilter!, $controlFrameworkSrn_includeRollup: TicketRollupIncludeRollup!, $maturityArea_includeRollup: TicketRollupIncludeRollup!, $objectiveSrn_includeRollup: TicketRollupIncludeRollup!, $resourceType_includeRollup: TicketRollupIncludeRollup!, $resourceSRN_includeRollup: TicketRollupIncludeRollup!, $severityCategory_includeRollup: TicketRollupIncludeRollup!, $ticketKey_includeRollup: TicketRollupIncludeRollup!, $swimlaneSrns_includeRollup: TicketRollupIncludeRollup!) {\n  controlFrameworkSrn: TicketRollups(\n    where: $controlFrameworkSrn\n    includeRollup: $controlFrameworkSrn_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  maturityArea: TicketRollups(\n    where: $maturityArea\n    includeRollup: $maturityArea_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  objectiveSrn: TicketRollups(\n    where: $objectiveSrn\n    includeRollup: $objectiveSrn_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  resourceType: TicketRollups(\n    where: $resourceType\n    includeRollup: $resourceType_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  resourceSRN: TicketRollups(\n    where: $resourceSRN\n    includeRollup: $resourceSRN_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  severityCategory: TicketRollups(\n    where: $severityCategory\n    includeRollup: $severityCategory_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  ticketKey: TicketRollups(\n    where: $ticketKey\n    includeRollup: $ticketKey_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n  swimlaneSrns: TicketRollups(\n    where: $swimlaneSrns\n    includeRollup: $swimlaneSrns_includeRollup\n  ) {\n    ...ticketRollupFields\n    __typename\n  }\n}\n\nfragment ticketRollupFields on TicketRollups {\n  items(limit: $limit, orderBy: $orderBy) {\n    count\n    controlFrameworkSrn\n    maturityArea\n    objectiveSrn\n    ticketKey\n    resourceType\n    resourceSRN\n    severityCategory\n    swimlaneSrn\n    __typename\n  }\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">cb449a8e2e43bea13fd607694fce3e83</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1cb2-4c85-9ce1-11c7f05270a7/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">9a219f2ff506b1e9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">cb449a8e2e43bea13fd607694fce3e83-9a219f2ff506b1e9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">groupedTicketsGraphQuery</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Issues_T02_groupedTicketsGraphQuery" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;topRiskPoliciesTicketRollups&quot;,&quot;variables&quot;:{&quot;limit&quot;:100,&quot;offset&quot;:0,&quot;sort&quot;:[{&quot;riskScore&quot;:{&quot;order&quot;:&quot;ASC&quot;}}],&quot;filter&quot;:{&quot;swimlaneSrns&quot;:{&quot;value&quot;:&quot;ALL&quot;},&quot;ticketKey&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;ticketType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;Property&quot;},&quot;controlPolicyTitle&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;controlPolicyType&quot;:{&quot;op&quot;:&quot;NEQ&quot;,&quot;value&quot;:&quot;ALL&quot;},&quot;status&quot;:{&quot;op&quot;:&quot;IN_LIST&quot;,&quot;values&quot;:[&quot;NEW&quot;]}},&quot;includeRollup&quot;:{&quot;status&quot;:true}},&quot;query&quot;:&quot;query topRiskPoliciesTicketRollups($filter: TicketRollupFilter!, $includeRollup: TicketRollupIncludeRollup!, $limit: Long = 100, $offset: Long = 0, $sort: [TicketRollupOrder] = [{riskScore: {order: ASC}}]) {\n  TicketRollups(where: $filter, includeRollup: $includeRollup) {\n    items(limit: $limit, offset: $offset, orderBy: $sort) {\n      count\n      riskScore\n      riskScoreNumeric\n      riskScoreDescription\n      ticketKey\n      controlPolicyType\n      controlPolicyTitle\n      controlFrameworkSrn\n      controlFrameworkTitle\n      maturityArea\n      objectiveSrn\n      resourceSRN\n      resourceType\n      severityCategory\n      swimlaneSrn\n      swimlaneTitle\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">cb449a8e2e43bea13fd607694fce3e83</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3f95-4da4-85a5-ecfab3164456/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fdeeb8e7d536c34e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">cb449a8e2e43bea13fd607694fce3e83-fdeeb8e7d536c34e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">topRiskPoliciesTicketRollups</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Issues_T03_load_content_ticketRollupTitleControlPolicy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;load_content_ticketRollupTitleControlPolicy&quot;,&quot;variables&quot;:{&quot;ids&quot;:[&quot;srn:supersonrai::ControlPolicy/659535e8-1f76-4c92-b0f3-98bd28237e0a&quot;,&quot;srn:supersonrai::ControlPolicy/eccacb7a-22f3-44f7-b227-e935e2545fd7&quot;,&quot;srn:supersonrai::ControlPolicy/89ee1ac9-0dd3-405b-b10e-db7e93c68090&quot;]},&quot;query&quot;:&quot;query load_content_ticketRollupTitleControlPolicy($ids: [String]) {\n  ControlPolicies(where: {srn: {op: IN_LIST, values: $ids}}) {\n    items {\n      ...ticketRollupTitleControlPolicy\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ticketRollupTitleControlPolicy on Controlpolicy {\n  srn\n  title\n  __typename\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">ca61403b6ffe90acd00cbb0aa026fa9f</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9b55-48a9-9136-d0eb2bb8659c/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">fbd6ed274b0fec63</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">ca61403b6ffe90acd00cbb0aa026fa9f-fbd6ed274b0fec63-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">load_content_ticketRollupTitleControlPolicy</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T01_getStatsBySwimlane" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStatsBySwimlane&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStatsBySwimlane {\n  GroupedQuery(where: {keys: [Swimlane, Label]}) {\n    key\n    items {\n      value\n      hasGroupedResult {\n        items {\n          value\n          count\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">53a879eec578ccd24bec07c484eb741b</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1093-4366-bed4-1a655c067b94/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">cc8c109d9862366b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">53a879eec578ccd24bec07c484eb741b-cc8c109d9862366b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getStatsBySwimlane</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T02_fetchLatestCPEvalLogs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchLatestCPEvalLogs&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;,&quot;srn:supersonrai::ControlPolicy/ecf685ff-eb31-4f24-97d5-0f1db4738a68&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/4007d909-ae91-4e1b-9e6c-a58f42647162&quot;,&quot;srn:supersonrai::ControlPolicy/dcab6cb9-cfa6-4954-8ff2-8274c1f2f180&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/18ae02b6-1496-4b44-b2cd-7a7adefcb82a&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/ffd99cfa-b27a-4bed-99ae-7e845f793029&quot;,&quot;srn:stage11733927::Swimlane/3304300b-49c8-4372-8847-110905c9dbdb&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/aee2108a-c622-4653-a182-5e8bf1526110&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;,&quot;srn:stage11733927::Swimlane/b452d257-cb44-411d-9cac-0179e666deff&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/40fd992a-4d38-47e5-8857-6ba6cc792338&quot;]},&quot;query&quot;:&quot;query fetchLatestCPEvalLogs($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  ControlPolicyEvalLogsLatest(\n    where: {policySrns: $policySrns, swimlaneSrns: $swimlaneSrns}\n  ) {\n    items {\n      swimlaneSrn\n      policySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d812db60d4d52b86d42aaf681a12718d</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:9bb1-43f0-b114-63051fa24da0/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ccbf41da5a09534d</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d812db60d4d52b86d42aaf681a12718d-ccbf41da5a09534d-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchLatestCPEvalLogs</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T03_fetchTicketCountsForPolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketCountsForPolicies&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;,&quot;srn:supersonrai::ControlPolicy/ecf685ff-eb31-4f24-97d5-0f1db4738a68&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/4007d909-ae91-4e1b-9e6c-a58f42647162&quot;,&quot;srn:supersonrai::ControlPolicy/dcab6cb9-cfa6-4954-8ff2-8274c1f2f180&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/18ae02b6-1496-4b44-b2cd-7a7adefcb82a&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/0bbca8be-ed54-4677-b581-973950ecfb9c&quot;,&quot;srn:stage11733927::Swimlane/0c69d424-e054-45d7-a19f-c9b86f3a2c80&quot;,&quot;srn:stage11733927::Swimlane/ffd99cfa-b27a-4bed-99ae-7e845f793029&quot;,&quot;srn:stage11733927::Swimlane/3304300b-49c8-4372-8847-110905c9dbdb&quot;,&quot;srn:stage11733927::Swimlane/56517df8-c68c-4481-a547-8e05d48454fb&quot;,&quot;srn:stage11733927::Swimlane/aee2108a-c622-4653-a182-5e8bf1526110&quot;,&quot;srn:stage11733927::Swimlane/49a44cb4-862b-4598-9ebb-75582b9e1986&quot;,&quot;srn:stage11733927::Swimlane/d61afe67-c651-46bd-904b-9a68988ee3c3&quot;,&quot;srn:stage11733927::Swimlane/4236caae-3e01-4b87-8a50-765370a840ef&quot;,&quot;srn:stage11733927::Swimlane/b452d257-cb44-411d-9cac-0179e666deff&quot;,&quot;srn:stage11733927::Swimlane/1fbc5e7c-64ac-4f4b-a62c-14ebd47a5fde&quot;,&quot;srn:stage11733927::Swimlane/93f43210-d0bd-486d-baaa-232b79ecbe06&quot;,&quot;srn:stage11733927::Swimlane/e5d5b4dc-4e67-4fd5-999b-a782e1e83878&quot;,&quot;srn:stage11733927::Swimlane/40fd992a-4d38-47e5-8857-6ba6cc792338&quot;]},&quot;query&quot;:&quot;query fetchTicketCountsForPolicies($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  TicketRollups(\n    where: {swimlaneSrn: {op: IN_LIST, values: $swimlaneSrns}, ticketKey: {op: IN_LIST, values: $policySrns}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}}\n  ) {\n    items {\n      count\n      policySrn: ticketKey\n      swimlaneSrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">120fff6b6aa0a2dbdb1fa3a686bc0328</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:01db-4753-b2c9-5bfd7a8cf26c/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1772b5e9c7a6f5f9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">120fff6b6aa0a2dbdb1fa3a686bc0328-1772b5e9c7a6f5f9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketCountsForPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T04_fetchLatestCPEvalLogs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchLatestCPEvalLogs&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;,&quot;srn:supersonrai::ControlPolicy/ecf685ff-eb31-4f24-97d5-0f1db4738a68&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/4007d909-ae91-4e1b-9e6c-a58f42647162&quot;,&quot;srn:supersonrai::ControlPolicy/dcab6cb9-cfa6-4954-8ff2-8274c1f2f180&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/18ae02b6-1496-4b44-b2cd-7a7adefcb82a&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/eb046ec8-f31c-481a-8577-a9d088bcd7e8&quot;,&quot;srn:stage11733927::Swimlane/b3c77842-5f65-424d-acd9-f15dd023b5fd&quot;,&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;]},&quot;query&quot;:&quot;query fetchLatestCPEvalLogs($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  ControlPolicyEvalLogsLatest(\n    where: {policySrns: $policySrns, swimlaneSrns: $swimlaneSrns}\n  ) {\n    items {\n      swimlaneSrn\n      policySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">d3075e70644a91a3a1c869948e823d2e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5537-4f86-bd1d-33d72f2859e5/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1948677613284a14</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">d3075e70644a91a3a1c869948e823d2e-1948677613284a14-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchLatestCPEvalLogs</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T05_fetchTicketCountsForPolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketCountsForPolicies&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/2992c85a-b598-48bc-979e-a8f87b9dbc49&quot;,&quot;srn:supersonrai::ControlPolicy/70084518-ac96-4c5b-8a13-022a0c085ded&quot;,&quot;srn:supersonrai::ControlPolicy/9662f13b-46c2-4e94-987f-c15a6f869c76&quot;,&quot;srn:supersonrai::ControlPolicy/7ab64be6-4925-40df-8edf-5eecf52e9ab6&quot;,&quot;srn:supersonrai::ControlPolicy/ca07f1a0-b914-44da-85de-0ae41c38b310&quot;,&quot;srn:supersonrai::ControlPolicy/01bed657-134f-46b0-9412-f0720ea8a5d1&quot;,&quot;srn:supersonrai::ControlPolicy/569dddb1-208a-4289-ac96-02017793dba6&quot;,&quot;srn:supersonrai::ControlPolicy/f015dc34-e3e6-4db2-932a-182b6b5f5ae7&quot;,&quot;srn:supersonrai::ControlPolicy/d3682b01-cbdb-4548-9c03-0a625d1e9347&quot;,&quot;srn:supersonrai::ControlPolicy/a0b3e5fc-b641-4bea-b2b3-af1589da36e8&quot;,&quot;srn:supersonrai::ControlPolicy/02fee0f1-4656-4de1-91c8-9a77152938f4&quot;,&quot;srn:supersonrai::ControlPolicy/ddec1226-a23f-46a3-879d-e9ae0fdd51e7&quot;,&quot;srn:supersonrai::ControlPolicy/6a66a148-6cd0-4d53-839f-a81712d8c424&quot;,&quot;srn:supersonrai::ControlPolicy/c42d55a2-b668-46b3-9f19-57557af3a5e2&quot;,&quot;srn:supersonrai::ControlPolicy/abe977a3-d2ce-492c-939f-fecf646e7c71&quot;,&quot;srn:supersonrai::ControlPolicy/d58e4e23-d879-454c-ad1e-7f051ca50b86&quot;,&quot;srn:supersonrai::ControlPolicy/8875fc15-1e8f-4024-b745-edad91b756b7&quot;,&quot;srn:supersonrai::ControlPolicy/7fe8dab0-ae6e-4456-8c06-5f831c5fc7dc&quot;,&quot;srn:supersonrai::ControlPolicy/d6606624-14ce-42bc-8c15-c4832279359a&quot;,&quot;srn:supersonrai::ControlPolicy/820e093a-1344-4cc3-8c48-c7164afb243b&quot;,&quot;srn:supersonrai::ControlPolicy/8d93def7-b73f-4650-8214-1d19331273cd&quot;,&quot;srn:supersonrai::ControlPolicy/1d8eeb01-92c0-4270-a8ee-a7c4296272ea&quot;,&quot;srn:supersonrai::ControlPolicy/66f662df-acd5-49ad-a4bc-3fbbd3870f49&quot;,&quot;srn:supersonrai::ControlPolicy/9304c022-9600-41e7-9cfc-0676bbe9c591&quot;,&quot;srn:supersonrai::ControlPolicy/83a1ca33-12fc-4f65-89c5-e169be71e74c&quot;,&quot;srn:supersonrai::ControlPolicy/3ec7c61e-736f-4cde-807a-0ac175756ae4&quot;,&quot;srn:supersonrai::ControlPolicy/ddf5fd8e-c658-4606-9a24-4de35473557c&quot;,&quot;srn:supersonrai::ControlPolicy/f684722d-f5fb-419a-8c22-70d9fdc5d183&quot;,&quot;srn:supersonrai::ControlPolicy/38051138-ba0f-431e-a3d6-0e1fc2799d90&quot;,&quot;srn:supersonrai::ControlPolicy/646152af-3750-4d26-94ae-5dc5668fa256&quot;,&quot;srn:supersonrai::ControlPolicy/99af7c2f-8022-41de-9897-d13514c16fb4&quot;,&quot;srn:supersonrai::ControlPolicy/59cbc312-34f6-4a4e-961b-2b0d1abe4e78&quot;,&quot;srn:supersonrai::ControlPolicy/1ac48fa2-6789-4b77-89aa-df76059c3753&quot;,&quot;srn:supersonrai::ControlPolicy/59dc9836-4602-44bb-b352-53bf3a059cbf&quot;,&quot;srn:supersonrai::ControlPolicy/c55acb65-ae36-4386-8e8a-2e83b677d25b&quot;,&quot;srn:supersonrai::ControlPolicy/d68da1c0-8898-4b5b-874d-e40080034cb2&quot;,&quot;srn:supersonrai::ControlPolicy/ee0e3e38-8484-438d-8bae-7375bae6df54&quot;,&quot;srn:supersonrai::ControlPolicy/458c6986-ce57-4933-a35f-331cbd2be1f4&quot;,&quot;srn:supersonrai::ControlPolicy/ecf685ff-eb31-4f24-97d5-0f1db4738a68&quot;,&quot;srn:supersonrai::ControlPolicy/181257cc-183b-4b86-aa6c-85c6441072bb&quot;,&quot;srn:supersonrai::ControlPolicy/8cd26196-929a-49b5-af6b-de37915f2b53&quot;,&quot;srn:supersonrai::ControlPolicy/4007d909-ae91-4e1b-9e6c-a58f42647162&quot;,&quot;srn:supersonrai::ControlPolicy/dcab6cb9-cfa6-4954-8ff2-8274c1f2f180&quot;,&quot;srn:supersonrai::ControlPolicy/f493d1db-8ef2-4546-86ee-0b5b9808734f&quot;,&quot;srn:supersonrai::ControlPolicy/bcdef8ba-c217-491a-93ab-0c06bd544277&quot;,&quot;srn:supersonrai::ControlPolicy/8927da79-197b-47d3-b7af-40b98edff903&quot;,&quot;srn:supersonrai::ControlPolicy/90fceb83-3ca6-4b47-9ba6-750161078b01&quot;,&quot;srn:supersonrai::ControlPolicy/43c68e2c-bd9c-4554-a371-2d1bde4b4df1&quot;,&quot;srn:supersonrai::ControlPolicy/14637c09-5b17-4ebf-b822-07e070c3ea0a&quot;,&quot;srn:supersonrai::ControlPolicy/e2d57d19-d172-44d3-91c8-023a82566097&quot;,&quot;srn:supersonrai::ControlPolicy/900180dc-2657-439f-9d4d-7422065a503e&quot;,&quot;srn:supersonrai::ControlPolicy/27c642fb-090a-4a38-816c-b374278abc06&quot;,&quot;srn:supersonrai::ControlPolicy/18ae02b6-1496-4b44-b2cd-7a7adefcb82a&quot;,&quot;srn:supersonrai::ControlPolicy/3573b890-167a-4b99-ad60-93153522f0b3&quot;,&quot;srn:supersonrai::ControlPolicy/c1977ed1-796f-40e1-a91f-de2cd0eb9a40&quot;,&quot;srn:supersonrai::ControlPolicy/f5785ba0-2adc-4790-b4c3-25e4cfa265b1&quot;,&quot;srn:supersonrai::ControlPolicy/4957e49d-4780-493a-9d13-8eadd7031a65&quot;,&quot;srn:supersonrai::ControlPolicy/dbeadb9b-f8ec-4ca6-ab93-3ab0e8d10475&quot;,&quot;srn:supersonrai::ControlPolicy/c489901d-1f22-449a-b86a-0c68bbf1328c&quot;,&quot;srn:supersonrai::ControlPolicy/571af71b-25e3-4f17-add9-8e7353a35bb8&quot;,&quot;srn:supersonrai::ControlPolicy/f64efe6e-2a9b-4e27-aeab-395ceee22ac9&quot;,&quot;srn:supersonrai::ControlPolicy/4ecf8b19-1dc5-47cc-8740-f1794c2d9c18&quot;,&quot;srn:supersonrai::ControlPolicy/ee8be6c2-5e35-4355-b868-0c6071cf7fbd&quot;,&quot;srn:supersonrai::ControlPolicy/0a4babce-fbd3-4d87-b646-c5b7054f0280&quot;,&quot;srn:supersonrai::ControlPolicy/d2d60f20-c7ec-4704-82d8-c1653883a284&quot;,&quot;srn:supersonrai::ControlPolicy/67b0b224-2608-46c9-92f8-f82270e8184e&quot;,&quot;srn:supersonrai::ControlPolicy/10f58f2a-a096-47c1-99fe-d009f1112a3a&quot;,&quot;srn:supersonrai::ControlPolicy/00f91912-71d1-40a9-baeb-4725de640211&quot;,&quot;srn:supersonrai::ControlPolicy/9a102233-edef-427e-908c-48c60fa06f5f&quot;,&quot;srn:supersonrai::ControlPolicy/482e462d-8838-4a02-88e6-a9a7b7f22206&quot;,&quot;srn:supersonrai::ControlPolicy/19d0550d-aabd-41eb-86cc-e60e15ad4202&quot;,&quot;srn:supersonrai::ControlPolicy/d8ae74d2-4e3e-42f7-945d-5dbd06be55ab&quot;,&quot;srn:supersonrai::ControlPolicy/b3cf34f5-47b2-43c9-bb2a-242436d06b14&quot;,&quot;srn:supersonrai::ControlPolicy/e0a0fb67-6bc3-4199-97c7-c61294d82394&quot;,&quot;srn:supersonrai::ControlPolicy/28eaae05-4a75-43de-bb18-b6c604786626&quot;,&quot;srn:supersonrai::ControlPolicy/14fa6df2-b860-4890-9759-195b42637d7c&quot;,&quot;srn:supersonrai::ControlPolicy/3905b5cf-a360-47ef-8136-13495cbf5b5f&quot;,&quot;srn:supersonrai::ControlPolicy/10353af3-b8bf-424d-bbe3-62e3a6c43a8b&quot;,&quot;srn:supersonrai::ControlPolicy/720efad5-298c-45c9-b098-2ea052baa06d&quot;,&quot;srn:supersonrai::ControlPolicy/986bdc7f-2ec7-4429-bb73-7d984d13214b&quot;,&quot;srn:supersonrai::ControlPolicy/52dd18c7-6baa-48f2-9400-dfe365cdcaa1&quot;,&quot;srn:supersonrai::ControlPolicy/2cac6d88-4517-4e56-8d92-2911f0a2b36a&quot;,&quot;srn:supersonrai::ControlPolicy/09a784a5-d70a-46db-9df6-189c19a802c7&quot;,&quot;srn:supersonrai::ControlPolicy/fbbe1fff-458c-419a-8327-4ebbe9763181&quot;,&quot;srn:supersonrai::ControlPolicy/3a58c442-bc3e-4308-933b-ce8d5a6bc678&quot;,&quot;srn:supersonrai::ControlPolicy/2a11dece-cb36-43be-a423-26168bbb57e8&quot;,&quot;srn:supersonrai::ControlPolicy/1e3a8826-c8bb-4947-8ef5-9319016441c8&quot;,&quot;srn:supersonrai::ControlPolicy/7998703e-1e0c-4a10-bed3-056b53f2e3ad&quot;,&quot;srn:supersonrai::ControlPolicy/9393e9b7-2bfb-4426-9608-5aeba9048448&quot;,&quot;srn:supersonrai::ControlPolicy/113e1558-2654-441e-8067-58bd541ffdbd&quot;,&quot;srn:supersonrai::ControlPolicy/b03e2608-d7b6-451d-b78c-6e9030b44a52&quot;,&quot;srn:supersonrai::ControlPolicy/faa80be2-f94e-4522-875f-8582b6ef435c&quot;,&quot;srn:supersonrai::ControlPolicy/eb812ac4-4b38-4698-b5b9-ae506811ef77&quot;,&quot;srn:supersonrai::ControlPolicy/f8b97bab-471c-45e8-b882-b9ddc92bc078&quot;,&quot;srn:supersonrai::ControlPolicy/bad1bd6f-069d-4e32-b016-50044aa2e38a&quot;,&quot;srn:supersonrai::ControlPolicy/108d5fc8-9388-4817-abc9-d682936f3b7f&quot;,&quot;srn:supersonrai::ControlPolicy/ae39d1e1-9882-42b0-b8e6-c3d9991279f6&quot;,&quot;srn:supersonrai::ControlPolicy/e0fe2b45-3859-4916-ac48-6f372c024389&quot;,&quot;srn:supersonrai::ControlPolicy/298e54d7-fa9d-4090-a0d0-7257152c7544&quot;,&quot;srn:supersonrai::ControlPolicy/88144241-73d3-42f0-9710-f350d887ec09&quot;,&quot;srn:supersonrai::ControlPolicy/89d1d826-7ee9-487a-a96f-50913819fcba&quot;,&quot;srn:supersonrai::ControlPolicy/c5ce4e6f-3f31-4945-9c63-93c4746ac4be&quot;,&quot;srn:supersonrai::ControlPolicy/7a56a7a5-4e38-41c5-9089-01f1e5be24c9&quot;,&quot;srn:supersonrai::ControlPolicy/2c398505-f420-4535-bad8-903716941e10&quot;,&quot;srn:supersonrai::ControlPolicy/a6d1a142-e21c-4c85-945d-c99de0ae1aa6&quot;,&quot;srn:supersonrai::ControlPolicy/51818758-a378-407d-b2b1-f1fb9cf67808&quot;,&quot;srn:supersonrai::ControlPolicy/60ef19c9-c950-48e3-91c2-124d93395b14&quot;,&quot;srn:supersonrai::ControlPolicy/d8cf0d35-0cc9-4c1e-a07f-f42d64ef9900&quot;,&quot;srn:supersonrai::ControlPolicy/e10ff1a7-2951-4e41-971a-4214cc5d782a&quot;,&quot;srn:supersonrai::ControlPolicy/2c46a054-67c3-468d-a0c2-db6f7ba97a72&quot;,&quot;srn:supersonrai::ControlPolicy/90d48edd-8c38-4062-9e2f-551009b42bf1&quot;,&quot;srn:supersonrai::ControlPolicy/aec2ee16-3a29-4f94-9dd0-4663956bba15&quot;,&quot;srn:supersonrai::ControlPolicy/639f9dd0-02f5-4929-b9fc-6980fdcd3600&quot;,&quot;srn:supersonrai::ControlPolicy/4827181f-4a85-4c6e-bb94-7414f3b400f9&quot;,&quot;srn:supersonrai::ControlPolicy/645ef7ff-3c5f-46d8-9a30-1825d35684f4&quot;,&quot;srn:supersonrai::ControlPolicy/8a35abd0-16b2-499a-8e57-c80d36d281b9&quot;,&quot;srn:supersonrai::ControlPolicy/d89ffbdd-dfe3-407e-8d6e-9b52b5405632&quot;,&quot;srn:supersonrai::ControlPolicy/8b305367-4649-418a-8fa2-7c8a3dbc7e61&quot;,&quot;srn:supersonrai::ControlPolicy/917b77c9-84eb-48f7-a099-6aaa58c29cf6&quot;,&quot;srn:supersonrai::ControlPolicy/f29a8f95-37b1-4260-a85a-e40f2a72b064&quot;,&quot;srn:supersonrai::ControlPolicy/cd35e590-e1b7-4ded-8d38-69832d3acb35&quot;,&quot;srn:supersonrai::ControlPolicy/e798f370-d432-49d7-8137-fec4b5523a19&quot;,&quot;srn:supersonrai::ControlPolicy/8b1988f2-f7a2-4caa-8778-1a533a6f4e35&quot;,&quot;srn:supersonrai::ControlPolicy/6984dee5-18a8-4f77-b5ae-c08ffdec090f&quot;,&quot;srn:supersonrai::ControlPolicy/fac10498-6ba4-4796-bbbe-f4ed7012b30b&quot;,&quot;srn:supersonrai::ControlPolicy/117a9056-68ad-4e2f-95d4-bdad0cbce90f&quot;,&quot;srn:supersonrai::ControlPolicy/2b5c15d2-1ba7-4147-96f3-5130aef97c68&quot;,&quot;srn:supersonrai::ControlPolicy/e0d7ff99-d49a-453d-bd5f-93d74402865b&quot;,&quot;srn:supersonrai::ControlPolicy/89df9285-4636-413b-a75d-22a0bd82412b&quot;,&quot;srn:supersonrai::ControlPolicy/acb44b52-9943-464c-9b60-9636e62e72df&quot;,&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/eb046ec8-f31c-481a-8577-a9d088bcd7e8&quot;,&quot;srn:stage11733927::Swimlane/b3c77842-5f65-424d-acd9-f15dd023b5fd&quot;,&quot;srn:stage11733927::Swimlane/6cb632fe-951d-4481-8663-76188ff0024c&quot;,&quot;srn:stage11733927::Swimlane/60757a12-aa4a-4e35-8418-c6e9b26145e0&quot;]},&quot;query&quot;:&quot;query fetchTicketCountsForPolicies($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  TicketRollups(\n    where: {swimlaneSrn: {op: IN_LIST, values: $swimlaneSrns}, ticketKey: {op: IN_LIST, values: $policySrns}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}}\n  ) {\n    items {\n      count\n      policySrn: ticketKey\n      swimlaneSrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">52c9b5eb81fe97e81649423b85c8ad53</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:e226-41c4-aff8-47adec1f3896/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">34f682fe012f246c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">52c9b5eb81fe97e81649423b85c8ad53-34f682fe012f246c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketCountsForPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T06_fetchLatestCPEvalLogs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchLatestCPEvalLogs&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;]},&quot;query&quot;:&quot;query fetchLatestCPEvalLogs($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  ControlPolicyEvalLogsLatest(\n    where: {policySrns: $policySrns, swimlaneSrns: $swimlaneSrns}\n  ) {\n    items {\n      swimlaneSrn\n      policySrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">5244144fdef4821af20a6f09d3327f52</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0240-4f0b-9a6c-09a3d2742ff2/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">c82e284ba0fa3950</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">5244144fdef4821af20a6f09d3327f52-c82e284ba0fa3950-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchLatestCPEvalLogs</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T07_fetchTicketCountsForPolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchTicketCountsForPolicies&quot;,&quot;variables&quot;:{&quot;policySrns&quot;:[&quot;srn:supersonrai::ControlPolicy/b8de9aac-8eb5-447c-b7b0-ef0579af43f8&quot;,&quot;srn:supersonrai::ControlPolicy/74cb8fcb-e504-4024-985a-b341249f4346&quot;,&quot;srn:supersonrai::ControlPolicy/95909e4b-bb02-4f55-b4fd-656872cea2f7&quot;,&quot;srn:supersonrai::ControlPolicy/0a50164c-e223-498c-a677-87c99d6758db&quot;,&quot;srn:supersonrai::ControlPolicy/fbe645ee-6631-46ae-bfc5-a313ced2122d&quot;,&quot;srn:supersonrai::ControlPolicy/1e331300-93d7-4d17-8493-1acb5001be54&quot;,&quot;srn:supersonrai::ControlPolicy/b9a80c12-5ea4-4efa-9615-5f8be660c313&quot;,&quot;srn:supersonrai::ControlPolicy/e201287b-185d-42e8-a259-4ca69047da50&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc&quot;,&quot;srn:supersonrai::ControlPolicy/a730cdeb-2095-4032-a5dd-770ee5f2c004&quot;,&quot;srn:supersonrai::ControlPolicy/b686ade3-ef90-4bec-88b1-f9134c6cb542&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97/87f3aab6-8024-427b-bdda-0194188879a9&quot;,&quot;srn:Sonrai::ControlPolicy/c063ac86-a316-45c9-b321-565fe7f42cdc/9313fd77-a977-40d0-be5c-6814a54c4e97&quot;,&quot;srn:supersonrai::ControlPolicy/ba1542db-0556-4c6f-818d-1b0a6f242d92&quot;,&quot;srn:supersonrai::ControlPolicy/83b71a20-27ac-4d2c-937a-530e1190aa54&quot;,&quot;srn:supersonrai::ControlPolicy/ce9ecc92-8ddd-4e69-8b77-261fd8bc58fb&quot;,&quot;srn:supersonrai::ControlPolicy/ef896928-ef7f-43be-a552-45a2d3a54e11&quot;,&quot;srn:supersonrai::ControlPolicy/491c563c-bac8-4747-a979-bf0d9ccde67b&quot;],&quot;swimlaneSrns&quot;:[&quot;srn:stage11733927::Swimlane/2e0fc915-74d7-4938-bb0e-ecac2193c9a0&quot;]},&quot;query&quot;:&quot;query fetchTicketCountsForPolicies($policySrns: [String!]!, $swimlaneSrns: [String!]!) {\n  TicketRollups(\n    where: {swimlaneSrn: {op: IN_LIST, values: $swimlaneSrns}, ticketKey: {op: IN_LIST, values: $policySrns}, status: {op: IN_LIST, values: [\&quot;NEW\&quot;, \&quot;IN_PROGRESS\&quot;]}}\n  ) {\n    items {\n      count\n      policySrn: ticketKey\n      swimlaneSrn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">ff57c580b3bbcc55d0280664de236fe3</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:bb1f-4077-ac42-e22db741862d/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">23adb500a504579c</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">ff57c580b3bbcc55d0280664de236fe3-23adb500a504579c-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchTicketCountsForPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T08_getSonraiSeaches" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSonraiSeaches&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSonraiSeaches {\n  SavedQueries {\n    items(limit: -1) {\n      name\n      query\n      variables {\n        items {\n          defaultValue\n          name\n          __typename\n        }\n        __typename\n      }\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">00dc635b9eccc55319640412802788b5</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:332e-463c-88bc-e2a014176ecd/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0cb8b803e839f482</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">00dc635b9eccc55319640412802788b5-0cb8b803e839f482-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSonraiSeaches</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T09_getSavedSearches" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSavedSearches&quot;,&quot;variables&quot;:{&quot;includeDetails&quot;:true},&quot;query&quot;:&quot;query getSavedSearches($includeDetails: Boolean = true) {\n  Searches {\n    items(limit: -1) {\n      name\n      description\n      query\n      createdDate\n      createdBy\n      sid\n      srn\n      lastModified\n      rootQueryName\n      resourceId\n      containedByWidget @include(if: $includeDetails) {\n        count\n        items(limit: -1) {\n          title\n          type\n          srn\n          containedBy {\n            items {\n              name\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      containedByControlPolicy @include(if: $includeDetails) {\n        count\n        items(limit: -1) {\n          title\n          srn\n          __typename\n        }\n        __typename\n      }\n      ownedByOrganization @include(if: $includeDetails) {\n        items {\n          sid\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">a9bf76cc535a65df1cf2a3091d638979</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:5211-4748-acbf-eb7060f80f24/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">738f2aae29a171c6</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">a9bf76cc535a65df1cf2a3091d638979-738f2aae29a171c6-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSavedSearches</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T10_fetchSwimlanes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchSwimlanes&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query fetchSwimlanes {\n  Swimlanes {\n    items(limit: -1) {\n      description\n      label\n      title\n      srn\n      defaultImportance\n      createdBy\n      sid\n      preventionEnabled\n      lastModified\n      createdDate\n      name\n      accounts\n      names\n      resourceIds\n      tags\n      resourceId\n      environments\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7f755cab1402f5a55cb5c58dc324e407</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:f935-423b-9eb7-433a2d895482/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">883ad0f12b7ba7a3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7f755cab1402f5a55cb5c58dc324e407-883ad0f12b7ba7a3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchSwimlanes</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T11_getAccounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAccounts&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAccounts {\n  Accounts {\n    items(limit: -1) {\n      name\n      srn\n      friendlyName\n      account\n      cloudType\n      type\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">db39a96fd4ad319df64d4002116aeed2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:640c-4405-a9c8-8b26466e2990/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">2bf34a10a1379dc9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">db39a96fd4ad319df64d4002116aeed2-2bf34a10a1379dc9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAccounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SwimlaneCheckup_T12_getAccounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSubscriptions&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSubscriptions {\n  Subscriptions {\n    items(limit: -1) {\n      friendlyName\n      name\n      srn\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">e7ee54e6485ee3c692082617df973f24</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4320-4cdd-a4da-f97dc75af9e9/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">79e11d24ed2a7174</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">e7ee54e6485ee3c692082617df973f24-79e11d24ed2a7174-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSubscriptions</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Objective_T01_getObjectives" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getObjectives&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getObjectives {\n  SonraiObjectives {\n    items {\n      srn\n      resourceId\n      name\n      description\n      createdBy\n      definedControlFrameworks {\n        controlFrameworkSrn\n        controlFrameworkOrder\n        __typename\n      }\n      appliedControlFrameworks {\n        items {\n          srn\n          swimlaneSRNs\n          contains {\n            items {\n              srn\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">615cc12d80dff9299960f20ee04605ff</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="cache-control" elementType="Header">
                <stringProp name="Header.name">cache-control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">a945861d4cf90349</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3a26-41b0-ae78-9fc0a5c06ebc/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">615cc12d80dff9299960f20ee04605ff-a945861d4cf90349-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getObjectives</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MonitoredResource_T01_getTags" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTags&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getTags {\n  Tags {\n    count\n    group {\n      key {\n        key\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">b8469b3a905042aec0ed34d19aa01884</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:d3b6-4937-9e28-1058ad56a918/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ba13af1dd05e81c2</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">b8469b3a905042aec0ed34d19aa01884-ba13af1dd05e81c2-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getTags</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MonitoredResource_T02_getAllMonitoredResources" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAllMonitoredResources&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAllMonitoredResources {\n  Resources(where: {and: [{sonraiConfig: {value: CHANGEDETECTION}}]}) {\n    items {\n      name\n      account\n      cloudType\n      lastAlertDate\n      importance\n      region\n      label\n      friendlyName\n      country\n      highestAlertSeverity\n      srn\n      active\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">8976298bb0ab294d1687f91152274e22</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:6f10-4b3f-805c-ec4a3f6669cd/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">57c956362723e740</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">8976298bb0ab294d1687f91152274e22-57c956362723e740-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getAllMonitoredResources</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Policies_T01_getControlPolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getControlPolicies&quot;,&quot;variables&quot;:{&quot;filter&quot;:{}},&quot;query&quot;:&quot;query getControlPolicies($filter: ControlpolicyFilter) {\n  ControlPolicies(where: $filter) {\n    items(limit: -1) {\n      srn\n      title\n      createdDate\n      controlPolicyMetaTypes\n      alertingLevel\n      createdBy\n      description\n      alertingLevelNumeric\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1d61f843b66f77c86d2593150e55a928</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:ee3f-4ab4-abd0-88e34e0f27cd/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">83442ceef1ccc88e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1d61f843b66f77c86d2593150e55a928-83442ceef1ccc88e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getControlPolicies</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bots_T01_getBots" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getBots&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getBots {\n  Bots {\n    items {\n      title\n      description\n      type\n      isCustom\n      url\n      status\n      cloud\n      operation\n      lastSync\n      version\n      srn\n      resourceId\n      blob\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">29ccc22cec1cd3e7a46f998b50fe9ccc</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:17ab-41fc-b3e7-345adcc87e3d/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ea5f6393ba2f732b</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">29ccc22cec1cd3e7a46f998b50fe9ccc-ea5f6393ba2f732b-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getBots</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bots_T02_fetchPlatformAccounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;fetchPlatformAccounts&quot;,&quot;variables&quot;:{&quot;accountLimit&quot;:11,&quot;discoveryLimit&quot;:11,&quot;dcLimit&quot;:11,&quot;rbLimit&quot;:11,&quot;auditLimit&quot;:1},&quot;query&quot;:&quot;query fetchPlatformAccounts($discoveryLimit: Int, $dcLimit: Int, $rbLimit: Int, $auditLimit: Int, $accountLimit: Int) {\n  PlatformAccounts(\n    where: {cloudType: {op: NEQ, value: \&quot;sonraiSaaS\&quot;}, jobLimits: {discoveryLimit: $discoveryLimit, dataClassificationLimit: $dcLimit, remediationBotLimit: $rbLimit}}\n  ) {\n    items {\n      name\n      cloudType\n      srn\n      sid\n      status\n      lastModified\n      createdDate @formatDateTime(epochMilli: true)\n      containsCloudAccount(where: {auditStatusLimit: {limit: $auditLimit}}) {\n        count\n        items(limit: $accountLimit) {\n          name\n          srn\n          blob\n          cloudType\n          createdDate\n          lastModified\n          auditStatus {\n            auditLocation\n            status\n            createdAt\n            updatedAt\n            duration\n            name\n            type\n            __typename\n          }\n          scanConfig {\n            fullyEnabled\n            error\n            scanTypes {\n              configured\n              enabled\n              profileSrn\n              schedule\n              nextScanTime\n              scanType\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      jobs {\n        __typename\n        ... on DiscoveryJobStatus {\n          id\n          type\n          cloudAccountBlob\n          cloudAccountId\n          status\n          createdAt\n          startedAt\n          finishedAt\n          __typename\n        }\n        ... on DataClassificationJobStatus {\n          id\n          type\n          cloudAccountBlob\n          cloudAccountId\n          targetSrn\n          status\n          createdAt\n          startedAt\n          finishedAt\n          __typename\n        }\n        ... on RemediationBotStatus {\n          id\n          type\n          cloudAccountBlob\n          cloudAccountId\n          status\n          createdAt\n          srn\n          targetSrn\n          ticketSrn\n          startedAt\n          finishedAt\n          __typename\n        }\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">55b846b3952884d2ed1369f69f967c2a</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:a3d4-4f75-9d0a-3142ddf21fcc/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1f9a8f6d88a0b2be</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">55b846b3952884d2ed1369f69f967c2a-1f9a8f6d88a0b2be-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">fetchPlatformAccounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Classifiers_T01_getCustomClassifiers" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCustomClassifiers&quot;,&quot;variables&quot;:{&quot;srnList&quot;:[]},&quot;query&quot;:&quot;query getCustomClassifiers($srnList: [String!]!) {\n  GetCustomClassifiers(srnList: $srnList) {\n    items {\n      params {\n        regexes\n        aliases\n        proximity\n        where\n        disallowed_aliases\n        __typename\n      }\n      srn\n      type\n      atomName\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1f0d5102448b1a60ae22f14dd5cd3a31</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:b2b4-4df8-b498-0fc7fe6f0cf9/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">1c44f83338a1ba27</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1f0d5102448b1a60ae22f14dd5cd3a31-1c44f83338a1ba27-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getCustomClassifiers</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Users_T01_getInvites" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getInvites&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getInvites {\n  SonraiInvites {\n    items {\n      srn\n      email\n      dateSent\n      isPending\n      expiry\n      pendingRoleAssignments {\n        items {\n          srn\n          role {\n            items {\n              srn\n              name\n              __typename\n            }\n            __typename\n          }\n          scope\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">87194bd0a1dc8bd35eb3e5c3d4a23ee6</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1671-436d-ade4-b167a4ee49b9/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">93b91dc6ef8c15c8</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">87194bd0a1dc8bd35eb3e5c3d4a23ee6-93b91dc6ef8c15c8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getInvites</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Collectors_T01_getNotifications" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getNotifications {\n  Notifications(\n    where: {and: [{createdDate: {op: LT, variable: \&quot;now\&quot;}}, {createdDate: {withMods: [{op: ADD, value: {minutes: 60}}], op: GT, variable: \&quot;now\&quot;}}]}\n  ) {\n    count\n    items(limit: 50, orderBy: {createdDate: {order: DESC}}) {\n      msg\n      msgKey\n      msgData\n      createdDate\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">7a55c88a656a6af9526a410a49077cc1</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:7e46-4650-834f-33634f7d2c52/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">f1a7d8af58951076</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">7a55c88a656a6af9526a410a49077cc1-f1a7d8af58951076-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getNotifications</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integrations_T01_getIntegrations" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getIntegrations&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getIntegrations {\n  Integrations {\n    items {\n      srn\n      resourceId\n      orgName\n      title\n      description\n      createdDate\n      createdBy\n      type\n      email {\n        emailList {\n          email\n          active\n          deactivateSource\n          __typename\n        }\n        __typename\n      }\n      configs {\n        srn\n        createdDate\n        createdBy\n        type\n        status\n        slack {\n          channels\n          actionTypes\n          slackFilter {\n            ticketKey\n            ticketType\n            allKeys\n            allTypes\n            severityNumeric\n            __typename\n          }\n          __typename\n        }\n        jira {\n          ProjectKey\n          PutLabels\n          __typename\n        }\n        email {\n          actionTypes\n          emailFilter {\n            ticketKey\n            ticketType\n            allKeys\n            allTypes\n            severityNumeric\n            __typename\n          }\n          __typename\n        }\n        azureSentinel {\n          actionTypes\n          __typename\n        }\n        assignment {\n          srn\n          SwimlaneSRN\n          orgName\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">f5cfc1995fc54dd740791dcadd0d9429</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="cache-control" elementType="Header">
                <stringProp name="Header.name">cache-control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5eb633de286df0d8</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:1158-4c46-ab86-3edff246710a/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">f5cfc1995fc54dd740791dcadd0d9429-5eb633de286df0d8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getIntegrations</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accounts_T01_getSaasCollector" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSaasCollector&quot;,&quot;variables&quot;:{&quot;includeCloudAccounts&quot;:false},&quot;query&quot;:&quot;query getSaasCollector($includeCloudAccounts: Boolean = false) {\n  PlatformAccounts(where: {cloudType: {op: EQ, value: \&quot;sonraiSaaS\&quot;}}) {\n    items {\n      sid\n      srn\n      name\n      cloudType\n      containsCloudAccount @include(if: $includeCloudAccounts) {\n        count\n        items(limit: -1) {\n          name\n          srn\n          sid\n          blob\n          cloudType\n          createdDate\n          lastModified\n          auditStatus {\n            auditLocation\n            status\n            createdAt\n            updatedAt\n            duration\n            name\n            type\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">4eb3fd81c829826d3e5f2126ddcc784e</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:cd77-4f6c-ac1f-91f3751fb877/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">8d361d8b268cfbc9</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">4eb3fd81c829826d3e5f2126ddcc784e-8d361d8b268cfbc9-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSaasCollector</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accounts_T02_onboardingManagerGetSaasCollector" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;onboardingManagerGetSaasCollector&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query onboardingManagerGetSaasCollector {\n  PlatformAccounts(where: {cloudType: {op: EQ, value: \&quot;sonraiSaaS\&quot;}}) {\n    items {\n      sid\n      srn\n      name\n      cloudType\n      containsCloudAccount {\n        count\n        items(limit: -1) {\n          name\n          srn\n          sid\n          blob\n          cloudType\n          createdDate\n          lastModified\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">3a4a713a1690d0f413c33887af0043b2</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:250c-4682-9402-75914c55a433/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">417c47d69e2fa290</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">3a4a713a1690d0f413c33887af0043b2-417c47d69e2fa290-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">onboardingManagerGetSaasCollector</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accounts_T03_getSaasCollectorPaged" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSaasCollectorPaged&quot;,&quot;variables&quot;:{&quot;limit&quot;:25,&quot;offset&quot;:0,&quot;freeTextFilter&quot;:null},&quot;query&quot;:&quot;query getSaasCollectorPaged($limit: Int = -1, $offset: Int = 0, $freeTextFilter: PlatformcloudaccountFilter) {\n  PlatformAccounts(where: {cloudType: {op: EQ, value: \&quot;sonraiSaaS\&quot;}}) {\n    items {\n      sid\n      srn\n      name\n      cloudType\n      containsCloudAccount(where: $freeTextFilter) {\n        items(limit: $limit, offset: $offset) {\n          name\n          srn\n          sid\n          blob\n          cloudType\n          createdDate\n          lastModified\n          scanConfig {\n            fullyEnabled\n            error\n            scanTypes {\n              configured\n              enabled\n              profileSrn\n              schedule\n              nextScanTime\n              scanType\n              __typename\n            }\n            __typename\n          }\n          auditStatus {\n            auditLocation\n            status\n            createdAt\n            updatedAt\n            duration\n            name\n            type\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">321cde6a7c72d7bd3c3b30962d9e6414</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:82b0-4a9e-b4fb-123ec6678a80/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">0823d94fb71dc7e4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">321cde6a7c72d7bd3c3b30962d9e6414-0823d94fb71dc7e4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSaasCollectorPaged</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accounts_T04_getSaasCollectorRowCount" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSaasCollectorRowCount&quot;,&quot;variables&quot;:{&quot;freeTextFilter&quot;:null},&quot;query&quot;:&quot;query getSaasCollectorRowCount($freeTextFilter: PlatformcloudaccountFilter) {\n  PlatformAccounts(where: {cloudType: {op: EQ, value: \&quot;sonraiSaaS\&quot;}}) {\n    items {\n      sid\n      srn\n      name\n      cloudType\n      containsCloudAccount(where: $freeTextFilter) {\n        count\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">5e1c49881c9c7d980d9568420a6097bc</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:2d10-418a-93f7-e3b23b9bc673/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">5fab124323593df8</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">5e1c49881c9c7d980d9568420a6097bc-5fab124323593df8-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">getSaasCollectorRowCount</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScanStatus_T01_scan_profiles" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;scan_profiles&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query scan_profiles {\n  Profiles(where: {type: {value: SCAN}}) {\n    count\n    items {\n      profileSrn: srn\n      altTitle: name\n      title: description\n      createdBySrn: createdBy\n      scan {\n        profileCollectorId: collectorId\n        accounts: accounts\n        __typename\n      }\n      createdDate\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">6ac7889736ed7336c78c9899e502c2de</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0a00-4ed8-977b-c475d627c023/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">dbee6ac3424c52d4</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">6ac7889736ed7336c78c9899e502c2de-dbee6ac3424c52d4-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">scan_profiles</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScanStatus_T02_job_definitions_by_profile" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;job_definitions_by_profile&quot;,&quot;variables&quot;:{&quot;scanProfileSrns&quot;:[&quot;srn:stage11733927::Profile/d673f740-cb0d-4ad7-8ee6-f1a42b6e5169&quot;,&quot;srn:stage11733927::Profile/febe9ddf-495e-4f19-8e14-b34177811b86&quot;,&quot;srn:stage11733927::Profile/3aa12012-20f5-4a2d-8996-998f90792b3b&quot;,&quot;srn:stage11733927::Profile/b5adc838-66e5-477f-aa56-ac1b42474cae&quot;,&quot;srn:stage11733927::Profile/70cd296a-ecf4-41ce-b939-e874972aa701&quot;,&quot;srn:stage11733927::Profile/bd04a025-b6a9-42e3-bec0-dd7809ae7536&quot;,&quot;srn:stage11733927::Profile/582dea77-a3a9-490a-b943-dee4be170811&quot;,&quot;srn:stage11733927::Profile/11e26bf3-6140-4b0d-8b4d-ddf6afb6ab16&quot;,&quot;srn:stage11733927::Profile/d7165e7f-f3a4-498c-baa9-6c577d5df1ef&quot;,&quot;srn:stage11733927::Profile/2700f943-7f1a-43c9-8018-05d40ac07bfb&quot;,&quot;srn:stage11733927::Profile/817da2b7-90ae-4351-bf2c-1567fdb93e36&quot;,&quot;srn:stage11733927::Profile/9d0b01c4-4ad2-49d1-af9d-cd21c8151b67&quot;,&quot;srn:stage11733927::Profile/5551e77b-9209-4683-a609-d9017a58dae5&quot;,&quot;srn:stage11733927::Profile/a4911daa-366c-42e5-b2bc-14bbd14504a1&quot;,&quot;srn:stage11733927::Profile/450aafff-2991-4937-bcaf-eb322ceeadc5&quot;,&quot;srn:stage11733927::Profile/0d341bdc-192a-4c20-9687-f73254cc14b2&quot;]},&quot;query&quot;:&quot;query job_definitions_by_profile($scanProfileSrns: [String!]) {\n  JobDefinitions(\n    where: {source: {sourceSrn: {op: IN_LIST, values: $scanProfileSrns}}}\n  ) {\n    items {\n      sources {\n        items {\n          profileSrn: sourceSrn\n          __typename\n        }\n        __typename\n      }\n      lastJob {\n        lastJobStatus: status\n        lastJobStartTime: startTime\n        lastJobEndTime: endTime\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">740c3280c168f0e41c90af929af4b4b8</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:0eee-4c3e-93cb-a2c72c0b3e5b/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">e1c47689364e3b8e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">740c3280c168f0e41c90af929af4b4b8-e1c47689364e3b8e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">job_definitions_by_profile</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScanStatus_T03_collectors" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;collectors&quot;,&quot;variables&quot;:{&quot;collectorSrns&quot;:[&quot;srn:stage11733927::PlatformAccount/ea5e256f-a869-43b8-a974-7afade1388bc&quot;,&quot;srn:stage11733927::PlatformAccount/ea5e256f-a869-43b8-a974-7afade1388bc&quot;,&quot;srn:stage11733927::PlatformAccount/ea5e256f-a869-43b8-a974-7afade1388bc&quot;,&quot;srn:stage11733927::PlatformAccount/64179c9b-b915-4604-82c4-ff71246378d5&quot;,&quot;srn:stage11733927::PlatformAccount/64179c9b-b915-4604-82c4-ff71246378d5&quot;,&quot;srn:stage11733927::PlatformAccount/64179c9b-b915-4604-82c4-ff71246378d5&quot;,&quot;srn:stage11733927::PlatformAccount/cc8648fd-b7f4-4d54-b843-0cfb69a8ba93&quot;,&quot;srn:stage11733927::PlatformAccount/1dc40650-4b23-40af-9aff-668362f25ef8&quot;,&quot;srn:stage11733927::PlatformAccount/1dc40650-4b23-40af-9aff-668362f25ef8&quot;,&quot;srn:stage11733927::PlatformAccount/ea5e256f-a869-43b8-a974-7afade1388bc&quot;,&quot;srn:stage11733927::PlatformAccount/ea5e256f-a869-43b8-a974-7afade1388bc&quot;,&quot;srn:stage11733927::PlatformAccount/2ca8c1b1-7b7f-4494-97dd-d0b0db1d9e5f&quot;,&quot;srn:stage11733927::PlatformAccount/d9d2ef21-9aaa-4bde-aac8-b442de0bcb14&quot;,&quot;srn:stage11733927::PlatformAccount/169c85dd-4e60-4c71-943a-5a7d690ae707&quot;,&quot;srn:stage11733927::PlatformAccount/d6252f3-0aeb-4eb9-bf1e-1cf15d83d27d&quot;,&quot;srn:stage11733927::PlatformAccount/64179c9b-b915-4604-82c4-ff71246378d5&quot;]},&quot;query&quot;:&quot;query collectors($collectorSrns: [String!]) {\n  PlatformAccounts(where: {srn: {op: IN_LIST, values: $collectorSrns}}) {\n    items {\n      collectorSrn: srn\n      collectorName: name\n      cloud: cloudType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">1fdd230bd04f131ac124a5a3893608be</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:df16-4c51-92d4-5eb24ea837da/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">ca11b633d49a90d3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">1fdd230bd04f131ac124a5a3893608be-ca11b633d49a90d3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">collectors</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScanStatus_T04_accounts" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;accounts&quot;,&quot;variables&quot;:{&quot;accountIds&quot;:[&quot;577945324761&quot;,&quot;577945324761&quot;,&quot;577945324761&quot;,&quot;284563492725&quot;,&quot;380873608913&quot;,&quot;GCPProject|deirdres-project&quot;,&quot;577945324761&quot;,&quot;577945324761&quot;,&quot;577945324761&quot;,&quot;577945324761&quot;,&quot;GCPProject|sj-crew-2&quot;,&quot;777841547793&quot;,&quot;531734574008&quot;,&quot;380873608913&quot;]},&quot;query&quot;:&quot;query accounts($accountIds: [String!]!) {\n  Accounts(where: {account: {op: IN_LIST, values: $accountIds}}) {\n    items {\n      name\n      account\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">c024cef1553b71399a2ad8adae521416</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:4919-41cc-b2fe-c875719df641/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">06b27f6a9f08183e</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">c024cef1553b71399a2ad8adae521416-06b27f6a9f08183e-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">accounts</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ScanStatus_T05_jobs_by_profile" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;jobs_by_profile&quot;,&quot;variables&quot;:{&quot;scanProfileSrns&quot;:[&quot;srn:stage11733927::Profile/d673f740-cb0d-4ad7-8ee6-f1a42b6e5169&quot;,&quot;srn:stage11733927::Profile/febe9ddf-495e-4f19-8e14-b34177811b86&quot;,&quot;srn:stage11733927::Profile/3aa12012-20f5-4a2d-8996-998f90792b3b&quot;,&quot;srn:stage11733927::Profile/b5adc838-66e5-477f-aa56-ac1b42474cae&quot;,&quot;srn:stage11733927::Profile/d7165e7f-f3a4-498c-baa9-6c577d5df1ef&quot;,&quot;srn:stage11733927::Profile/2700f943-7f1a-43c9-8018-05d40ac07bfb&quot;,&quot;srn:stage11733927::Profile/817da2b7-90ae-4351-bf2c-1567fdb93e36&quot;,&quot;srn:stage11733927::Profile/5551e77b-9209-4683-a609-d9017a58dae5&quot;,&quot;srn:stage11733927::Profile/a4911daa-366c-42e5-b2bc-14bbd14504a1&quot;,&quot;srn:stage11733927::Profile/450aafff-2991-4937-bcaf-eb322ceeadc5&quot;]},&quot;query&quot;:&quot;query jobs_by_profile($scanProfileSrns: [String!]) {\n  Jobs(where: {sourceSrn: {op: IN_LIST, values: $scanProfileSrns}}) {\n    items {\n      profileSrn: sourceSrn\n      lastJobStatus: status\n      lastJobStartTime: startTime\n      lastJobEndTime: endTime\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-b3-traceid" elementType="Header">
                <stringProp name="Header.name">x-b3-traceid</stringProp>
                <stringProp name="Header.value">67896c09030f00400615d5f38d26b910</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">${Token}</stringProp>
              </elementProp>
              <elementProp name="sonraisecurity-com-org" elementType="Header">
                <stringProp name="Header.name">sonraisecurity-com-org</stringProp>
                <stringProp name="Header.value">stage11733927</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="x-sonrai-request-id" elementType="Header">
                <stringProp name="Header.name">x-sonrai-request-id</stringProp>
                <stringProp name="Header.value">r:3cb9-412b-a693-52ab2fe70f78/t:d7d14c46/u:640b315a3dbd33596a1c2217</stringProp>
              </elementProp>
              <elementProp name="x-b3-spanid" elementType="Header">
                <stringProp name="Header.name">x-b3-spanid</stringProp>
                <stringProp name="Header.value">01e0913c938537b3</stringProp>
              </elementProp>
              <elementProp name="b3" elementType="Header">
                <stringProp name="Header.name">b3</stringProp>
                <stringProp name="Header.value">67896c09030f00400615d5f38d26b910-01e0913c938537b3-1</stringProp>
              </elementProp>
              <elementProp name="x-b3-sampled" elementType="Header">
                <stringProp name="Header.name">x-b3-sampled</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="query-name" elementType="Header">
                <stringProp name="Header.name">query-name</stringProp>
                <stringProp name="Header.value">jobs_by_profile</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
